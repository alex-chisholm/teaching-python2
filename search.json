[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Programming II for Data Analysis",
    "section": "",
    "text": "Preface\nThis is a set of Python reference guides based on material covered in the Fall 2025 semester of Python Programming II for Data Analysis.\nCreated with Quarto. Developed in Positron.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html",
    "href": "python-fundamentals/basics.html",
    "title": "General Overview",
    "section": "",
    "text": "Getting Started\nBefore we dive into data analytics in Python, let’s recap Python basics using just the standard library. This guide serves as a comprehensive reference for Python fundamentals that you’ll use in data analysis.",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#strings",
    "href": "python-fundamentals/basics.html#strings",
    "title": "General Overview",
    "section": "Strings",
    "text": "Strings\nText data is stored as strings and enclosed in quotes.\n\nBasic String OperationsCase MethodsString Testing\n\n\n\ncountry = \"Netherlands\"\nprint(country)\nprint(f\"Type: {type(country)}\")\nprint(f\"Length: {len(country)}\")\n\nNetherlands\nType: &lt;class 'str'&gt;\nLength: 11\n\n\n\n\n\ncountry = \"Netherlands\"\ncity = \"den haag\"\n\nprint(f\"Upper: {country.upper()}\")\nprint(f\"Lower: {country.lower()}\")\nprint(f\"Title: {city.title()}\")\nprint(f\"Capitalize: {city.capitalize()}\")\n\nUpper: NETHERLANDS\nLower: netherlands\nTitle: Den Haag\nCapitalize: Den haag\n\n\n\n\n\ncountry = \"Netherlands\"\n\nprint(f\"Starts with 'Neth': {country.startswith('Neth')}\")\nprint(f\"Ends with 'lands': {country.endswith('lands')}\")\nprint(f\"Is alphabetic: {country.isalpha()}\")\nprint(f\"Is digit: {country.isdigit()}\")\n\nStarts with 'Neth': True\nEnds with 'lands': True\nIs alphabetic: True\nIs digit: False",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#numbers-integers-and-floats",
    "href": "python-fundamentals/basics.html#numbers-integers-and-floats",
    "title": "General Overview",
    "section": "Numbers (Integers and Floats)",
    "text": "Numbers (Integers and Floats)\n\nNote: Integers (whole numbers) and Floats (decimals) have nearly identical treatment in Python.\n\n\nBasic NumbersBasic MathBuilt-in FunctionsMath ModuleType Conversion\n\n\n\ngdp_capita = 50000\ngdp_capita_float = 50000.00\n\nprint(f\"Integer: {gdp_capita} (type: {type(gdp_capita)})\")\nprint(f\"Float: {gdp_capita_float} (type: {type(gdp_capita_float)})\")\nprint(f\"Equal? {gdp_capita == gdp_capita_float}\")\n\nInteger: 50000 (type: &lt;class 'int'&gt;)\nFloat: 50000.0 (type: &lt;class 'float'&gt;)\nEqual? True\n\n\n\n\n\ngdp_capita = 50000\n\nprint(f\"Addition: {gdp_capita + 5000}\")\nprint(f\"Subtraction: {gdp_capita - 5000}\")\nprint(f\"Multiplication: {gdp_capita * 2}\")\nprint(f\"Division: {gdp_capita / 1000}\")\nprint(f\"Floor division: {gdp_capita // 1000}\")\nprint(f\"Modulo: {gdp_capita % 1000}\")\nprint(f\"Exponentiation: {gdp_capita ** 2}\")\n\nAddition: 55000\nSubtraction: 45000\nMultiplication: 100000\nDivision: 50.0\nFloor division: 50\nModulo: 0\nExponentiation: 2500000000\n\n\n\n\n\ngdp_capita = 50000\n\nprint(f\"Absolute value: {abs(gdp_capita)}\")\nprint(f\"Round to nearest thousand: {round(gdp_capita, -3)}\")\nprint(f\"Minimum: {min(gdp_capita, 60000)}\")\nprint(f\"Maximum: {max(gdp_capita, 40000)}\")\nprint(f\"Sum: {sum([gdp_capita, 45000, 55000])}\")\n\nAbsolute value: 50000\nRound to nearest thousand: 50000\nMinimum: 50000\nMaximum: 50000\nSum: 150000\n\n\n\n\n\nimport math\ngdp_capita = 50000\n\nprint(f\"Square root: {math.sqrt(gdp_capita):.1f}\")\nprint(f\"Log base 10: {math.log10(gdp_capita):.3f}\")\nprint(f\"Ceiling division: {math.ceil(gdp_capita/3)}\")\n\nSquare root: 223.6\nLog base 10: 4.699\nCeiling division: 16667\n\n\n\n\n\ngdp_capita = 50000\n\nprint(f\"To string: '{str(gdp_capita)}'\")\nprint(f\"To float: {float(gdp_capita)}\")\nprint(f\"Number of digits: {len(str(gdp_capita))}\")\n\nTo string: '50000'\nTo float: 50000.0\nNumber of digits: 5",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#booleans",
    "href": "python-fundamentals/basics.html#booleans",
    "title": "General Overview",
    "section": "Booleans",
    "text": "Booleans\nBoolean values represent True or False and are essential for conditional logic and data filtering.\n\nBasic BooleansBoolean Operations\n\n\n\nis_european = True\nis_landlocked = False\n\nprint(f\"European: {is_european}\")\nprint(f\"Type: {type(is_european)}\")\n\nEuropean: True\nType: &lt;class 'bool'&gt;\n\n\n\n\n\nis_european = True\nis_landlocked = False\n\nprint(f\"Both conditions: {is_european and is_landlocked}\")\nprint(f\"Either condition: {is_european or is_landlocked}\")\nprint(f\"Not European: {not is_european}\")\n\nBoth conditions: False\nEither condition: True\nNot European: False",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#null-values",
    "href": "python-fundamentals/basics.html#null-values",
    "title": "General Overview",
    "section": "Null values",
    "text": "Null values\n\nBasic NoneNone Checking\n\n\n\nmy_null = None\nprint(f\"Type: {type(my_null)}\")\n\nType: &lt;class 'NoneType'&gt;\n\n\n\n\n\nmy_null = None\n\nif my_null is None:\n    print(\"Value is None\")\n\n# Using None in comparisons\nvalues = [1, 2, None, 4, 5]\nclean_values = [x for x in values if x is not None]\nprint(f\"Clean values: {clean_values}\")\n\nValue is None\nClean values: [1, 2, 4, 5]",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#operators-reference",
    "href": "python-fundamentals/basics.html#operators-reference",
    "title": "General Overview",
    "section": "Operators Reference",
    "text": "Operators Reference\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n==\nEqual to\n5 == 5\nTrue\n\n\n!=\nNot equal to\n5 != 3\nTrue\n\n\n&lt;\nLess than\n3 &lt; 5\nTrue\n\n\n&gt;\nGreater than\n7 &gt; 4\nTrue\n\n\n&lt;=\nLess than or equal to\n5 &lt;= 5\nTrue\n\n\n&gt;=\nGreater than or equal to\n6 &gt;= 4\nTrue\n\n\nin\nMembership test\n'a' in 'cat'\nTrue\n\n\nnot in\nNegative membership test\n'x' not in 'cat'\nTrue\n\n\nis\nIdentity test\nx is None\nTrue (if x is None)\n\n\nis not\nNegative identity test\nx is not None\nTrue (if x is not None)\n\n\nand\nLogical AND\nTrue and False\nFalse\n\n\nor\nLogical OR\nTrue or False\nTrue\n\n\nnot\nLogical NOT\nnot True\nFalse\n\n\n\n\nBasic If StatementsIf-Else StatementsIf-Elif-ElseTernary Operator\n\n\n\nmonthly_spend = 6000 \nmonthly_budget = 5000\n\nif monthly_spend &gt; monthly_budget:\n    print(\"Careful, you're spending more than you are earning!\")\n\n# Store the outcome as a variable\nlosing_money = monthly_spend &gt; monthly_budget\nprint(f\"Losing money? {losing_money}\")\n\nif losing_money:\n    print(\"Careful, you are losing money\")\n\nCareful, you're spending more than you are earning!\nLosing money? True\nCareful, you are losing money\n\n\n\n\n\nmonthly_spend = 4000\nmonthly_budget = 5000\n\nif monthly_spend &gt; monthly_budget:\n    guidance = \"Stop spending money you don't have\"\nelse:\n    guidance = \"You're doing alright. Keep it up!\"\n\nprint(guidance)\n\nYou're doing alright. Keep it up!\n\n\n\n\n\nmonthly_spend = 10000\nmonthly_budget = 10000\n\nif monthly_spend &gt; monthly_budget:\n    guidance = \"Stop spending money you don't have\"\nelif monthly_spend &lt; monthly_budget:\n    guidance = \"You're doing alright. Keep it up!\"\nelse:\n    guidance = \"Money in, money out!\"\n\nprint(guidance)\n\nMoney in, money out!\n\n\n\n\n\nmonthly_spend = 6000\nmonthly_budget = 5000\n\n# Ternary operator (conditional expression)\nlosing_money = True if monthly_spend &gt; monthly_budget else False\nprint(f\"Losing money? {losing_money}\")\n\n# More practical example\nstatus = \"Over budget\" if monthly_spend &gt; monthly_budget else \"Within budget\"\nprint(f\"Budget status: {status}\")\n\nLosing money? True\nBudget status: Over budget",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#return-vs.-print",
    "href": "python-fundamentals/basics.html#return-vs.-print",
    "title": "General Overview",
    "section": "Return vs. Print",
    "text": "Return vs. Print\nUnderstanding the difference between return and print is crucial for writing reusable functions.\n\nReturn FunctionsPrint Functions\n\n\n\ndef calculate_area(length, width):\n    \"\"\"Calculate rectangle area - returns a value\"\"\"\n    return length * width\n\n# Function with return - value can be stored\nstored_area = calculate_area(5, 3)\nprint(f\"Stored area: {stored_area}\")\nprint(f\"Type: {type(stored_area)}\")\n\n# Return values can be used in calculations\narea1 = calculate_area(5, 3)\narea2 = calculate_area(4, 6)\ntotal_area = area1 + area2\nprint(f\"Total area: {total_area}\")\n\nStored area: 15\nType: &lt;class 'int'&gt;\nTotal area: 39\n\n\n\n\n\ndef display_area(length, width):\n    \"\"\"Calculate and display rectangle area - prints but doesn't return\"\"\"\n    area = length * width\n    print(f\"The area is {area} square units\")\n\n# Function with print - returns None\nprinted_result = display_area(5, 3)\nprint(f\"Printed result: {printed_result}\")\nprint(f\"Type: {type(printed_result)}\")\n\n# Print functions cannot be used in calculations\n# This would cause an error: total = display_area(5, 3) + display_area(4, 6)\n\nThe area is 15 square units\nPrinted result: None\nType: &lt;class 'NoneType'&gt;",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#working-with-csv-files",
    "href": "python-fundamentals/basics.html#working-with-csv-files",
    "title": "General Overview",
    "section": "Working with CSV Files",
    "text": "Working with CSV Files\nCSV (Comma-Separated Values) files are common in data analytics.\n\nWriting CSVReading CSV - BasicReading CSV - as Dictionaries\n\n\n\nimport csv\n\n# Writing CSV data\nsales_data = [\n    ['Date', 'Product', 'Sales'],\n    ['2024-01-01', 'Widget A', 100],\n    ['2024-01-02', 'Widget B', 150],\n    ['2024-01-03', 'Widget A', 120]\n]\n\nwith open('sales.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(sales_data)\n\nprint(\"CSV file created\")\n\nCSV file created\n\n\n\n\n\nimport csv\n\n# Reading CSV data\ntry:\n    with open('sales.csv', 'r') as file:\n        reader = csv.reader(file)\n        header = next(reader)  # Get header row\n        print(f\"Headers: {header}\")\n        \n        for row in reader:\n            print(f\"Date: {row[0]}, Product: {row[1]}, Sales: {row[2]}\")\nexcept FileNotFoundError:\n    print(\"CSV file not found\")\n\nHeaders: ['Date', 'Product', 'Sales']\nDate: 2024-01-01, Product: Widget A, Sales: 100\nDate: 2024-01-02, Product: Widget B, Sales: 150\nDate: 2024-01-03, Product: Widget A, Sales: 120\n\n\n\n\n\nimport csv\n\n# Reading CSV as dictionaries (more convenient)\ntry:\n    with open('sales.csv', 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            print(f\"On {row['Date']}, {row['Product']} sold {row['Sales']} units\")\n        \n        # Convert to list of dictionaries\n        file.seek(0)  # Reset file pointer\n        reader = csv.DictReader(file)\n        data_list = list(reader)\n        print(f\"\\nAs list: {data_list}\")\nexcept FileNotFoundError:\n    print(\"CSV file not found\")\n\nOn 2024-01-01, Widget A sold 100 units\nOn 2024-01-02, Widget B sold 150 units\nOn 2024-01-03, Widget A sold 120 units\n\nAs list: [{'Date': '2024-01-01', 'Product': 'Widget A', 'Sales': '100'}, {'Date': '2024-01-02', 'Product': 'Widget B', 'Sales': '150'}, {'Date': '2024-01-03', 'Product': 'Widget A', 'Sales': '120'}]",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#working-with-json-files",
    "href": "python-fundamentals/basics.html#working-with-json-files",
    "title": "General Overview",
    "section": "Working with JSON Files",
    "text": "Working with JSON Files\nJSON (JavaScript Object Notation) is common for structured data.\n\nWriting JSONReading JSONJSON String Operations\n\n\n\nimport json\n\n# Writing JSON data\ncountry_data = {\n    \"name\": \"Netherlands\",\n    \"capital\": \"Amsterdam\",\n    \"population\": 17441000,\n    \"languages\": [\"Dutch\", \"English\"],\n    \"eu_member\": True\n}\n\nwith open('country.json', 'w') as file:\n    json.dump(country_data, file, indent=2)\n\nprint(\"JSON file created\")\n\nJSON file created\n\n\n\n\n\nimport json\n\n# Reading JSON data\ntry:\n    with open('country.json', 'r') as file:\n        data = json.load(file)\n        print(f\"Country: {data['name']}\")\n        print(f\"Capital: {data['capital']}\")\n        print(f\"Population: {data['population']:,}\")\n        print(f\"Languages: {', '.join(data['languages'])}\")\n        print(f\"EU Member: {data['eu_member']}\")\nexcept FileNotFoundError:\n    print(\"JSON file not found\")\nexcept json.JSONDecodeError:\n    print(\"Invalid JSON file\")\n\nCountry: Netherlands\nCapital: Amsterdam\nPopulation: 17,441,000\nLanguages: Dutch, English\nEU Member: True\n\n\n\n\n\nimport json\n\n# Working with JSON strings (not files)\ndata_dict = {\"name\": \"Alice\", \"scores\": [85, 92, 78]}\n\n# Convert dict to JSON string\njson_string = json.dumps(data_dict)\nprint(f\"JSON string: {json_string}\")\n\n# Convert JSON string back to dict\nparsed_data = json.loads(json_string)\nprint(f\"Parsed data: {parsed_data}\")\nprint(f\"Name: {parsed_data['name']}\")\n\nJSON string: {\"name\": \"Alice\", \"scores\": [85, 92, 78]}\nParsed data: {'name': 'Alice', 'scores': [85, 92, 78]}\nName: Alice",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#file-path-operations",
    "href": "python-fundamentals/basics.html#file-path-operations",
    "title": "General Overview",
    "section": "File Path Operations",
    "text": "File Path Operations\n\nFile Existence & InfoDirectory Operations\n\n\n\nimport os\n\n# Check if file exists\nif os.path.exists('countries.txt'):\n    print(\"File exists\")\n    print(f\"File size: {os.path.getsize('countries.txt')} bytes\")\nelse:\n    print(\"File does not exist\")\n\n# Get file information\ntry:\n    stat_info = os.stat('countries.txt')\n    print(f\"Last modified timestamp: {stat_info.st_mtime}\")\nexcept FileNotFoundError:\n    print(\"File not found for stat\")\n\nFile exists\nFile size: 48 bytes\nLast modified timestamp: 1757797146.7339044\n\n\n\n\n\nimport os\n\n# Working with directories\ncurrent_dir = os.getcwd()\nprint(f\"Current directory: {current_dir}\")\n\n# List files in directory\nfiles = os.listdir('.')\nprint(f\"Files in current directory: {files[:5]}\")  # Show first 5\n\n# Create directory\nos.makedirs('data_files', exist_ok=True)  # exist_ok prevents error if exists\nprint(\"Directory created or already exists\")\n\n# Check if it's a file or directory\nfor item in os.listdir('.')[:3]:  # Check first 3 items\n    if os.path.isfile(item):\n        print(f\"{item} is a file\")\n    elif os.path.isdir(item):\n        print(f\"{item} is a directory\")\n\nCurrent directory: /Users/alexchisholm/teaching-python2/python-fundamentals\nFiles in current directory: ['basics.quarto_ipynb', 'bool_files', 'str.qmd', 'bool.qmd', 'number.qmd']\nDirectory created or already exists\nbasics.quarto_ipynb is a file\nbool_files is a directory\nstr.qmd is a file",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html",
    "href": "python-fundamentals/type-functions.html",
    "title": "Functions/Method by Type Matrix",
    "section": "",
    "text": "Function/Method Availability by Type",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html#functionmethod-availability-by-type",
    "href": "python-fundamentals/type-functions.html#functionmethod-availability-by-type",
    "title": "Functions/Method by Type Matrix",
    "section": "",
    "text": "Function/Method\nDefinition\nstr\nint\nfloat\nbool\nNotes\n\n\n\n\nBuilt-in Functions\n\n\n\n\n\n\n\n\nlen()\nLength/count of items\n✅\n❌\n❌\n❌\nOnly for sequences/collections\n\n\nstr()\nConvert to string\n✅\n✅\n✅\n✅\nUniversal conversion\n\n\nrepr()\nOfficial string representation\n✅\n✅\n✅\n✅\nUniversal representation\n\n\ntype()\nGet object type\n✅\n✅\n✅\n✅\nUniversal type checking\n\n\nbool()\nConvert to boolean\n✅\n✅\n✅\n✅\nUniversal truthiness conversion\n\n\nhash()\nGet hash value\n✅\n✅\n✅\n✅\nUniversal (immutable types)\n\n\nid()\nGet memory address\n✅\n✅\n✅\n✅\nUniversal memory address\n\n\nabs()\nAbsolute value\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nint()\nConvert to integer\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\nfloat()\nConvert to float\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\ncomplex()\nConvert to complex number\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\nround()\nRound to nearest integer\n❌\n✅\n✅\n✅\nNumeric types only\n\n\npow()\nRaise to power\n❌\n✅\n✅\n✅\nNumeric types only\n\n\ndivmod()\nDivision and remainder\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nsum()\nSum of iterable\n❌\n✅\n✅\n✅\nWorks on iterables of numeric types\n\n\nmin()/max()\nMinimum/maximum value\n✅\n✅\n✅\n✅\nComparable types\n\n\nsorted()\nSort iterable\n✅\n✅\n✅\n✅\nWorks on iterables\n\n\nreversed()\nReverse sequence\n✅\n❌\n❌\n❌\nSequences only\n\n\nArithmetic Operators\n\n\n\n\n\n\n\n\n+ (addition)\nAdd values/concatenate\n✅\n✅\n✅\n✅\nString concatenation vs numeric addition\n\n\n- (subtraction)\nSubtract values\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n* (multiplication)\nMultiply/repeat\n✅\n✅\n✅\n✅\nString repetition vs numeric multiplication\n\n\n/ (division)\nDivide values\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n// (floor division)\nInteger division\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n% (modulo)\nRemainder/format\n✅\n✅\n✅\n✅\nString formatting vs numeric modulo\n\n\n** (exponentiation)\nRaise to power\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nComparison Operators\n\n\n\n\n\n\n\n\n==, !=\nEqual/not equal\n✅\n✅\n✅\n✅\nUniversal\n\n\n&lt;, &gt;, &lt;=, &gt;=\nOrdering comparisons\n✅\n✅\n✅\n✅\nUniversal (comparable types)\n\n\nBitwise Operators\n\n\n\n\n\n\n\n\n&, |, ^\nAND, OR, XOR\n❌\n✅\n❌\n✅\nInteger types only (bool inherits from int)\n\n\n~\nBitwise NOT\n❌\n✅\n❌\n✅\nInteger types only\n\n\n&lt;&lt;, &gt;&gt;\nLeft/right shift\n❌\n✅\n❌\n✅\nInteger types only\n\n\nType-Specific Methods\n\n\n\n\n\n\n\n\n.upper()/.lower()\nChange case\n✅\n❌\n❌\n❌\nString methods only\n\n\n.strip()/.split()\nRemove whitespace/split\n✅\n❌\n❌\n❌\nString methods only\n\n\n.replace()/.find()\nReplace/find substring\n✅\n❌\n❌\n❌\nString methods only\n\n\n.startswith()/.endswith()\nCheck prefix/suffix\n✅\n❌\n❌\n❌\nString methods only\n\n\n.isalpha()/.isdigit()\nCheck character types\n✅\n❌\n❌\n❌\nString methods only\n\n\n.join()\nJoin strings with separator\n✅\n❌\n❌\n❌\nString methods only\n\n\n.format()\nFormat string\n✅\n❌\n❌\n❌\nString methods only\n\n\n.encode()\nEncode to bytes\n✅\n❌\n❌\n❌\nString methods only\n\n\n.bit_length()\nNumber of bits needed\n❌\n✅\n❌\n✅\nInteger methods (bool inherits)\n\n\n.bit_count()\nCount of 1-bits\n❌\n✅\n❌\n✅\nInteger methods (Python 3.10+)\n\n\n.to_bytes()\nConvert to bytes\n❌\n✅\n❌\n✅\nInteger methods\n\n\n.from_bytes()\nCreate from bytes\n❌\n✅\n❌\n✅\nInteger class methods\n\n\n.is_integer()\nCheck if whole number\n❌\n❌\n✅\n❌\nFloat methods only\n\n\n.as_integer_ratio()\nReturn as fraction\n❌\n❌\n✅\n❌\nFloat methods only\n\n\n.hex()\nHexadecimal representation\n❌\n❌\n✅\n❌\nFloat methods only\n\n\nFormatting Functions\n\n\n\n\n\n\n\n\nbin()\nBinary representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\noct()\nOctal representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nhex()\nHexadecimal representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nMath Module Functions\n\n\n\n\n\n\n\n\nmath.sqrt()\nSquare root\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.log()\nNatural logarithm\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.sin()/.cos()\nTrigonometric functions\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.factorial()\nFactorial calculation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nmath.gcd()/.lcm()\nGreatest common divisor/LCM\n❌\n✅\n❌\n✅\nInteger types only\n\n\nmath.ceil()/.floor()\nRound up/down\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nRegular Expressions\n\n\n\n\n\n\n\n\nre.search()\nFind pattern match\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.findall()\nFind all matches\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.sub()\nSubstitute pattern\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.split()\nSplit by pattern\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nString Module\n\n\n\n\n\n\n\n\nstring.ascii_letters\nLetter constants\n✅\n❌\n❌\n❌\nString operations only\n\n\nstring.capwords()\nCapitalize words\n✅\n❌\n❌\n❌\nString operations only\n\n\nCollections/Iteration\n\n\n\n\n\n\n\n\nlist()\nConvert to list\n✅\n❌\n❌\n❌\nSequences only\n\n\ntuple()\nConvert to tuple\n✅\n❌\n❌\n❌\nSequences only\n\n\nset()\nConvert to set\n✅\n❌\n❌\n❌\nSequences only\n\n\nenumerate()\nAdd index to iterable\n✅\n❌\n❌\n❌\nSequences only\n\n\nzip()\nCombine iterables\n✅\n❌\n❌\n❌\nSequences only\n\n\nMembership/Indexing\n\n\n\n\n\n\n\n\nin/not in\nCheck membership\n✅\n❌\n❌\n❌\nSequences only\n\n\n[index]\nAccess by position\n✅\n❌\n❌\n❌\nSequences only\n\n\n[start:end]\nSlice sequence\n✅\n❌\n❌\n❌\nSequences only",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html#legend",
    "href": "python-fundamentals/type-functions.html#legend",
    "title": "Functions/Method by Type Matrix",
    "section": "Legend",
    "text": "Legend\n\n✅ Available: Function/method works directly with this type\n❌ Not Available: Function/method doesn’t work with this type\n✅* Conditional: Works with conditions (see notes)\n❌* Requires Conversion: Must convert type first",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html",
    "href": "python-fundamentals/list-functions.html",
    "title": "List Operations Matrix",
    "section": "",
    "text": "Function/Method Compatibility with Lists Containing Different Types",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#functionmethod-compatibility-with-lists-containing-different-types",
    "href": "python-fundamentals/list-functions.html#functionmethod-compatibility-with-lists-containing-different-types",
    "title": "List Operations Matrix",
    "section": "",
    "text": "Function/Method\nDefinition\nList[str]\nList[int]\nList[float]\nList[bool]\nMixed List\nNotes\n\n\n\n\nBasic List Functions\n\n\n\n\n\n\n\n\n\nlen()\nLength of list\n✅\n✅\n✅\n✅\n✅\nAlways works regardless of element type\n\n\ntype()\nGet object type\n✅\n✅\n✅\n✅\n✅\nAlways returns &lt;class 'list'&gt;\n\n\nstr()\nConvert to string\n✅\n✅\n✅\n✅\n✅\nString representation of entire list\n\n\nrepr()\nOfficial representation\n✅\n✅\n✅\n✅\n✅\nShows list with element representations\n\n\nbool()\nConvert to boolean\n✅\n✅\n✅\n✅\n✅\nFalse for empty list, True otherwise\n\n\nid()\nGet memory address\n✅\n✅\n✅\n✅\n✅\nEvery list has unique identity\n\n\nMathematical Functions\n\n\n\n\n\n\n\n\n\nsum()\nSum all elements\n❌\n✅\n✅\n✅\n⚠️\nString concatenation not supported; mixed needs compatible types\n\n\nmin()\nMinimum value\n✅\n✅\n✅\n✅\n⚠️\nWorks if all elements are comparable\n\n\nmax()\nMaximum value\n✅\n✅\n✅\n✅\n⚠️\nWorks if all elements are comparable\n\n\nall()\nAll elements truthy\n✅\n✅\n✅\n✅\n✅\nChecks truthiness of each element\n\n\nany()\nAny element truthy\n✅\n✅\n✅\n✅\n✅\nChecks if any element is truthy\n\n\nList Methods - Modification\n\n\n\n\n\n\n\n\n\n.append()\nAdd single item to end\n✅\n✅\n✅\n✅\n✅\nCan append any type to any list\n\n\n.extend()\nAdd multiple items\n✅\n✅\n✅\n✅\n✅\nExtends with any iterable\n\n\n.insert()\nInsert at position\n✅\n✅\n✅\n✅\n✅\nCan insert any type anywhere\n\n\n.remove()\nRemove first occurrence\n✅\n✅\n✅\n✅\n✅\nMust match element exactly\n\n\n.pop()\nRemove and return item\n✅\n✅\n✅\n✅\n✅\nReturns the removed element\n\n\n.clear()\nRemove all items\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\n.reverse()\nReverse in place\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\n.sort()\nSort in place\n✅\n✅\n✅\n✅\n⚠️\nMixed types may not be comparable\n\n\nList Methods - Information\n\n\n\n\n\n\n\n\n\n.index()\nFind first index\n✅\n✅\n✅\n✅\n✅\nMust match element exactly\n\n\n.count()\nCount occurrences\n✅\n✅\n✅\n✅\n✅\nCounts exact matches\n\n\n.copy()\nShallow copy\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nSequence Operations\n\n\n\n\n\n\n\n\n\n+ (concatenation)\nJoin lists\n✅\n✅\n✅\n✅\n✅\nCan concatenate any list types\n\n\n* (repetition)\nRepeat list\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nin/not in\nCheck membership\n✅\n✅\n✅\n✅\n✅\nChecks for exact element match\n\n\n[index]\nAccess by position\n✅\n✅\n✅\n✅\n✅\nAlways works with valid index\n\n\n[start:end]\nSlice list\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nSorting Functions\n\n\n\n\n\n\n\n\n\nsorted()\nReturn sorted copy\n✅\n✅\n✅\n✅\n⚠️\nMixed types may not be comparable\n\n\nreversed()\nReturn reversed iterator\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nType Conversion\n\n\n\n\n\n\n\n\n\ntuple()\nConvert to tuple\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nset()\nConvert to set\n✅\n✅\n✅\n✅\n✅\nRemoves duplicates; elements must be hashable\n\n\nfrozenset()\nConvert to immutable set\n✅\n✅\n✅\n✅\n✅\nLike set() but immutable\n\n\nIteration Functions\n\n\n\n\n\n\n\n\n\nenumerate()\nAdd index to elements\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nzip()\nCombine with other iterables\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nmap()\nApply function to elements\n✅\n✅\n✅\n✅\n✅\nFunction must be compatible with element types\n\n\nfilter()\nFilter elements\n✅\n✅\n✅\n✅\n✅\nFunction must be compatible with element types\n\n\nList Comprehensions\n\n\n\n\n\n\n\n\n\nBasic comprehension\n[expr for x in list]\n✅\n✅\n✅\n✅\n✅\nExpression must work with element type\n\n\nConditional comprehension\n[x for x in list if cond]\n✅\n✅\n✅\n✅\n✅\nCondition must work with element type\n\n\nMathematical Operations on Elements\n\n\n\n\n\n\n\n\n\nElement-wise arithmetic\nApply math to each element\n❌\n✅\n✅\n✅\n⚠️\n[x + 1 for x in lst] - numeric types only\n\n\nString Operations on Lists\n\n\n\n\n\n\n\n\n\nstr.join()\nJoin elements with separator\n✅\n⚠️\n⚠️\n⚠️\n⚠️\nNon-string elements need str() conversion\n\n\nStatistical Functions (statistics module)\n\n\n\n\n\n\n\n\n\nstatistics.mean()\nCalculate average\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.median()\nFind median\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.mode()\nFind most common\n✅\n✅\n✅\n✅\n✅\nWorks with any hashable type\n\n\nstatistics.stdev()\nStandard deviation\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.variance()\nCalculate variance\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nCollections Module Functions\n\n\n\n\n\n\n\n\n\ncollections.Counter()\nCount element frequencies\n✅\n✅\n✅\n✅\n✅\nWorks with any hashable elements\n\n\ncollections.deque()\nConvert to double-ended queue\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nRandom Module Functions\n\n\n\n\n\n\n\n\n\nrandom.choice()\nPick random element\n✅\n✅\n✅\n✅\n✅\nWorks with any non-empty list\n\n\nrandom.choices()\nPick multiple with replacement\n✅\n✅\n✅\n✅\n✅\nWorks with any non-empty list\n\n\nrandom.sample()\nPick multiple without replacement\n✅\n✅\n✅\n✅\n✅\nWorks with any list\n\n\nrandom.shuffle()\nShuffle in place\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nItertools Functions\n\n\n\n\n\n\n\n\n\nitertools.chain()\nFlatten nested iterables\n✅\n✅\n✅\n✅\n✅\nCombines multiple lists\n\n\nitertools.compress()\nFilter by boolean mask\n✅\n✅\n✅\n✅\n✅\nUses boolean list as selector\n\n\nitertools.groupby()\nGroup consecutive elements\n✅\n✅\n✅\n✅\n✅\nGroups by key function\n\n\nitertools.accumulate()\nCumulative operations\n❌\n✅\n✅\n✅\n⚠️\nDefault is addition (numeric only)\n\n\nCopy Module Functions\n\n\n\n\n\n\n\n\n\ncopy.copy()\nShallow copy\n✅\n✅\n✅\n✅\n✅\nSame as list.copy()\n\n\ncopy.deepcopy()\nDeep copy\n✅\n✅\n✅\n✅\n✅\nCopies nested objects too\n\n\nComparison Operations\n\n\n\n\n\n\n\n\n\n==, !=\nEquality comparison\n✅\n✅\n✅\n✅\n✅\nElement-wise comparison\n\n\n&lt;, &gt;, &lt;=, &gt;=\nLexicographic comparison\n✅\n✅\n✅\n✅\n⚠️\nElements must be comparable\n\n\nFunctional Programming\n\n\n\n\n\n\n\n\n\nfunctools.reduce()\nReduce to single value\n✅\n✅\n✅\n✅\n✅\nFunction must work with element types\n\n\nNumPy Operations (if available)\n\n\n\n\n\n\n\n\n\nnumpy.array()\nConvert to NumPy array\n✅\n✅\n✅\n✅\n⚠️\nMixed types become object arrays\n\n\nnumpy.mean()\nArray mean\n❌\n✅\n✅\n✅\n⚠️\nNumeric arrays only\n\n\nnumpy.sum()\nArray sum\n❌\n✅\n✅\n✅\n⚠️\nNumeric arrays only\n\n\nPandas Operations (if available)\n\n\n\n\n\n\n\n\n\npandas.Series()\nConvert to Pandas Series\n✅\n✅\n✅\n✅\n✅\nAlways works, handles mixed types\n\n\npandas.DataFrame()\nConvert to DataFrame\n✅\n✅\n✅\n✅\n✅\nCreates single-column DataFrame",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#example-lists-for-testing",
    "href": "python-fundamentals/list-functions.html#example-lists-for-testing",
    "title": "List Operations Matrix",
    "section": "Example Lists for Testing",
    "text": "Example Lists for Testing\n# Sample lists for each type\nstr_list = ['apple', 'banana', 'cherry']\nint_list = [1, 2, 3, 4, 5]\nfloat_list = [1.1, 2.2, 3.3, 4.4]\nbool_list = [True, False, True, False]\nmixed_list = ['hello', 42, 3.14, True]",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#legend",
    "href": "python-fundamentals/list-functions.html#legend",
    "title": "List Operations Matrix",
    "section": "Legend",
    "text": "Legend\n\n✅ Works: Function/method works directly with this list type\n❌ Doesn’t Work: Function/method doesn’t work with this list type\n⚠️ Conditional: Works with conditions or may raise errors",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "pandas/project-setup.html",
    "href": "pandas/project-setup.html",
    "title": "Project Setup",
    "section": "",
    "text": "Read in data\npassengers_df = pd.read_csv(\"../data/titanic.csv\")\ntype(passengers_df)\n\npandas.core.frame.DataFrame",
    "crumbs": [
      "Pandas",
      "Project Setup"
    ]
  },
  {
    "objectID": "pandas/project-setup.html#peek-at-data",
    "href": "pandas/project-setup.html#peek-at-data",
    "title": "Project Setup",
    "section": "Peek at data",
    "text": "Peek at data\n\npassengers_df\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibsp\nparch\nfare\nclass\nembark_town\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n\n\n\n\n891 rows × 9 columns",
    "crumbs": [
      "Pandas",
      "Project Setup"
    ]
  },
  {
    "objectID": "pandas/dataframe.html",
    "href": "pandas/dataframe.html",
    "title": "DataFrame",
    "section": "",
    "text": "Evaluation",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#evaluation",
    "href": "pandas/dataframe.html#evaluation",
    "title": "DataFrame",
    "section": "",
    "text": ".columns.info().shape.dtypes\n\n\n\npassengers_df.columns\n\nIndex(['passenger_id', 'survived', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'class', 'embark_town'],\n      dtype='object')\n\n\n\n\n\npassengers_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   passenger_id  891 non-null    object \n 1   survived      891 non-null    int64  \n 2   sex           891 non-null    object \n 3   age           714 non-null    float64\n 4   sibsp         891 non-null    int64  \n 5   parch         891 non-null    int64  \n 6   fare          891 non-null    float64\n 7   class         891 non-null    object \n 8   embark_town   889 non-null    object \ndtypes: float64(2), int64(3), object(4)\nmemory usage: 62.8+ KB\n\n\n\n\n\npassengers_df.shape\n\n(891, 9)\n\n\nThis returns (rows, columns) and can be slices to get one or the other by its index. For example, the number of rows:\n\npassengers_df.shape[0]\n\n891\n\n\n\n\n\npassengers_df.dtypes\n\npassenger_id     object\nsurvived          int64\nsex              object\nage             float64\nsibsp             int64\nparch             int64\nfare            float64\nclass            object\nembark_town      object\ndtype: object",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#modification",
    "href": "pandas/dataframe.html#modification",
    "title": "DataFrame",
    "section": "Modification",
    "text": "Modification\n\n.rename()pd.Categorical()\n\n\nRename columns by passing \"old_name\":\"new_name\" to the columns argument of .rename(). Remember to use inplace=True to store the changes in the existing DataFrame.\n\npassengers_df.rename(columns={\n    \"sibsp\":\"sibling_spouse_count\",\n    \"parch\":\"parents_children_count\"\n}, inplace=True)\n\npassengers_df.columns\n\nIndex(['passenger_id', 'survived', 'sex', 'age', 'sibling_spouse_count',\n       'parents_children_count', 'fare', 'class', 'embark_town'],\n      dtype='object')\n\n\n\n\nDefine categorical ordering by passing desired label ordering into pd.Categorical.\n\ndesired_ordering = [\"First\", \"Second\", \"Third\"]\n\npassengers_df[\"class\"] = pd.Categorical(\n    passengers_df[\"class\"],\n    categories=desired_ordering,\n    ordered=True\n)\n\npassengers_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column                  Non-Null Count  Dtype   \n---  ------                  --------------  -----   \n 0   passenger_id            891 non-null    object  \n 1   survived                891 non-null    int64   \n 2   sex                     891 non-null    object  \n 3   age                     714 non-null    float64 \n 4   sibling_spouse_count    891 non-null    int64   \n 5   parents_children_count  891 non-null    int64   \n 6   fare                    891 non-null    float64 \n 7   class                   891 non-null    category\n 8   embark_town             889 non-null    object  \ndtypes: category(1), float64(2), int64(3), object(3)\nmemory usage: 56.8+ KB\n\n\nCalling the variable shows that it looks the same as before, but now pandas knows the correct ordering ['First' &lt; 'Second' &lt; 'Third'].\n\npassengers_df[\"class\"]\n\n0       Third\n1       First\n2       Third\n3       First\n4       Third\n        ...  \n886    Second\n887     First\n888     Third\n889     First\n890     Third\nName: class, Length: 891, dtype: category\nCategories (3, object): ['First' &lt; 'Second' &lt; 'Third']\n\n\nDefining the variable as an ordered categorical series stores a numeric representation of the data labels.\n\npassengers_df[\"class\"].cat.codes\n\n0      2\n1      0\n2      2\n3      0\n4      2\n      ..\n886    1\n887    0\n888    2\n889    0\n890    2\nLength: 891, dtype: int8\n\n\nThese can be accessed for further analysis, if desired.\n\npassengers_df[\"class\"].cat.codes.median()\n\nnp.float64(2.0)",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#summarization",
    "href": "pandas/dataframe.html#summarization",
    "title": "DataFrame",
    "section": "Summarization",
    "text": "Summarization\n\n.describe().describe(include=[“object”, “category”])\n\n\n\npassengers_df.describe()\n\n\n\n\n\n\n\n\nsurvived\nage\nsibling_spouse_count\nparents_children_count\nfare\n\n\n\n\ncount\n891.000000\n714.000000\n891.000000\n891.000000\n891.000000\n\n\nmean\n0.383838\n29.699118\n0.523008\n0.381594\n32.204208\n\n\nstd\n0.486592\n14.526497\n1.102743\n0.806057\n49.693429\n\n\nmin\n0.000000\n0.420000\n0.000000\n0.000000\n0.000000\n\n\n25%\n0.000000\n20.125000\n0.000000\n0.000000\n7.910400\n\n\n50%\n0.000000\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n75%\n1.000000\n38.000000\n1.000000\n0.000000\n31.000000\n\n\nmax\n1.000000\n80.000000\n8.000000\n6.000000\n512.329200\n\n\n\n\n\n\n\n\n\n\npassengers_df.describe(include=[\"object\", \"category\"])\n\n\n\n\n\n\n\n\npassenger_id\nsex\nclass\nembark_town\n\n\n\n\ncount\n891\n891\n891\n889\n\n\nunique\n891\n2\n3\n3\n\n\ntop\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\nmale\nThird\nSouthampton\n\n\nfreq\n1\n577\n491\n644",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html",
    "href": "pandas/one-variable-analysis.html",
    "title": "Analyzing One Variable",
    "section": "",
    "text": "Categorical\nYou can get to a specific variable in your DataFrame in two ways:\nDot notation is often quicker, especially if your variable names are well constructed. However, be aware that if the variable name is the same as a reserved name in Python (e.g., class) or pandas, that you might hit errors.\npassengers_df[\"embark_town\"]\n\n0      Southampton\n1        Cherbourg\n2      Southampton\n3      Southampton\n4      Southampton\n          ...     \n886    Southampton\n887    Southampton\n888    Southampton\n889      Cherbourg\n890     Queenstown\nName: embark_town, Length: 891, dtype: object",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html#categorical",
    "href": "pandas/one-variable-analysis.html#categorical",
    "title": "Analyzing One Variable",
    "section": "",
    "text": "Value Counts\n\n.value_counts()sortnormalize\n\n\n\npassengers_df[\"embark_town\"].value_counts()\n\nembark_town\nSouthampton    644\nCherbourg      168\nQueenstown      77\nName: count, dtype: int64\n\n\n\n\nValue counts are sorted by frequency (top to bottom) by default. You can turn this off with sort.\n\npassengers_df[\"embark_town\"].value_counts(sort = False)\n\nembark_town\nSouthampton    644\nCherbourg      168\nQueenstown      77\nName: count, dtype: int64\n\n\nYou can also use ascending to change the sort order.\n\npassengers_df[\"embark_town\"].value_counts(sort = True, ascending=True)\n\nembark_town\nQueenstown      77\nCherbourg      168\nSouthampton    644\nName: count, dtype: int64\n\n\n\n\nThe normalize argument returns relative frequencies, which is the percent of total observations.\n\npassengers_df[\"embark_town\"].value_counts(normalize = True)\n\nembark_town\nSouthampton    0.724409\nCherbourg      0.188976\nQueenstown     0.086614\nName: proportion, dtype: float64\n\n\n\n\n\n\n\nVisualization\n\n.plot.bar().plot.barh().plot.pie()\n\n\n\npassengers_df[\"embark_town\"].value_counts().plot.bar()\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"embark_town\"].value_counts().plot.barh()\n\n\n\n\n\n\n\n\n\n\nAlthough it is generally better to avoid pie charts, using them with few data points and clear labels can be ok.\n\npassengers_df[\"embark_town\"].value_counts().plot.pie()",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html#numeric",
    "href": "pandas/one-variable-analysis.html#numeric",
    "title": "Analyzing One Variable",
    "section": "Numeric",
    "text": "Numeric\n\npassengers_df[\"age\"]\n\n0      22.0\n1      38.0\n2      26.0\n3      35.0\n4      35.0\n       ... \n886    27.0\n887    19.0\n888     NaN\n889    26.0\n890    32.0\nName: age, Length: 891, dtype: float64\n\n\n\nSummary and Subsetting\n\n.describe.nlargest().nsmallest()math methods\n\n\n\npassengers_df[\"age\"].describe()\n\ncount    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n25%       20.125000\n50%       28.000000\n75%       38.000000\nmax       80.000000\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].nlargest()\n\n630    80.0\n851    74.0\n96     71.0\n493    71.0\n116    70.5\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].nsmallest()\n\n803    0.42\n755    0.67\n469    0.75\n644    0.75\n78     0.83\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].mean()\n\nnp.float64(29.69911764705882)\n\n\n\n\n\n\n\nRank\nAdd a rank for each value relative to all observations. The method defaults to ascending=False, but this can be changed to True when you want lower values to earn higher ranks.\n\naverageminmaxfirstdense\n\n\nTies get the average of their rank positions (default)\n\npassengers_df[\"age\"].rank(method = \"average\").sort_values()\n\n803    1.0\n755    2.0\n644    3.5\n469    3.5\n78     5.5\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies all get the lowest possible rank\n\npassengers_df[\"age\"].rank(method=\"min\").sort_values()\n\n803    1.0\n755    2.0\n644    3.0\n469    3.0\n78     5.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies all get the highest possible rank\n\npassengers_df[\"age\"].rank(method=\"max\").sort_values()\n\n803    1.0\n755    2.0\n644    4.0\n469    4.0\n78     6.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies ranked by order they appear in data\n\npassengers_df[\"age\"].rank(method=\"first\").sort_values()\n\n803    1.0\n755    2.0\n469    3.0\n644    4.0\n78     5.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nLike min, but no gaps created in ranking sequence\n\npassengers_df[\"age\"].rank(method=\"dense\").sort_values()\n\n803    1.0\n755    2.0\n644    3.0\n469    3.0\n78     4.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\n\n\n\nVisualization\n\n.plot.hist().plot.hist(bins=).plot.box()\n\n\n\npassengers_df[\"age\"].plot.hist()\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"age\"].plot.hist(bins=80)\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"age\"].plot.box()",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html",
    "href": "pandas/multiple-variable-analysis.html",
    "title": "Analyzing Multiple Variable",
    "section": "",
    "text": "Categorical\nWe could pass the entire DataFrame into value_counts and use two categorical variables.\npassengers_df.value_counts([\"sex\", \"class\"])\n\nsex     class \nmale    Third     347\nfemale  Third     144\nmale    First     122\n        Second    108\nfemale  First      94\n        Second     76\nName: count, dtype: int64\nHowever, this format isn’t that easy to worth with and lacks the additional functionality of .crosstab().",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#categorical",
    "href": "pandas/multiple-variable-analysis.html#categorical",
    "title": "Analyzing Multiple Variable",
    "section": "",
    "text": "Crosstabs\n\n.crosstab().crosstab(margins=True).crosstab(normalize=True)\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"])\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n94\n76\n144\n\n\nmale\n122\n108\n347\n\n\n\n\n\n\n\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], margins=True)\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\nAll\n\n\nsex\n\n\n\n\n\n\n\n\nfemale\n94\n76\n144\n314\n\n\nmale\n122\n108\n347\n577\n\n\nAll\n216\n184\n491\n891\n\n\n\n\n\n\n\n\n\n\nPercent of Total\nAll values sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=True)\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.105499\n0.085297\n0.161616\n\n\nmale\n0.136925\n0.121212\n0.389450\n\n\n\n\n\n\n\n\n\nRow Percents\nRows sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=\"index\")\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.299363\n0.242038\n0.458599\n\n\nmale\n0.211438\n0.187175\n0.601386\n\n\n\n\n\n\n\n\n\nColumn Percents\nColumns sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=\"columns\")\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.435185\n0.413043\n0.293279\n\n\nmale\n0.564815\n0.586957\n0.706721\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\n\n.plot.bar().plot.barh()sns.heatmap()\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"]).plot.bar()\n\n\n\n\n\n\n\n\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"]).plot.barh()\n\n\n\n\n\n\n\n\n\n\n\nct = pd.crosstab(passengers_df[\"sex\"], passengers_df[\"class\"])\nsns.heatmap(ct, annot=True, fmt='d', cmap='Blues')\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore than two variables\nYou can pass in more than one variable to either the index argument (e.g., rows) or the columns argument.\n\npd.crosstab(index = [passengers_df[\"sex\"], passengers_df[\"class\"]], \n            columns = passengers_df[\"embark_town\"], \n            margins = True)\n\n\n\n\n\n\n\n\nembark_town\nCherbourg\nQueenstown\nSouthampton\nAll\n\n\nsex\nclass\n\n\n\n\n\n\n\n\nfemale\nFirst\n43\n1\n48\n92\n\n\nSecond\n7\n2\n67\n76\n\n\nThird\n23\n33\n88\n144\n\n\nmale\nFirst\n42\n1\n79\n122\n\n\nSecond\n10\n1\n97\n108\n\n\nThird\n43\n39\n265\n347\n\n\nAll\n\n168\n77\n644\n889",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#numeric",
    "href": "pandas/multiple-variable-analysis.html#numeric",
    "title": "Analyzing Multiple Variable",
    "section": "Numeric",
    "text": "Numeric\n\nCorrelation\n\nSingle .corr()Correlation MatrixCorrelation Matrix heatmap\n\n\n\npassengers_df[\"age\"].corr(passengers_df[\"fare\"])\n\nnp.float64(0.09606669176903891)\n\n\n\n\n\npassengers_df.corr(numeric_only=True)\n\n\n\n\n\n\n\n\nsurvived\nage\nsibling_spouse_count\nparents_children_count\nfare\n\n\n\n\nsurvived\n1.000000\n-0.077221\n-0.035322\n0.081629\n0.257307\n\n\nage\n-0.077221\n1.000000\n-0.308247\n-0.189119\n0.096067\n\n\nsibling_spouse_count\n-0.035322\n-0.308247\n1.000000\n0.414838\n0.159651\n\n\nparents_children_count\n0.081629\n-0.189119\n0.414838\n1.000000\n0.216225\n\n\nfare\n0.257307\n0.096067\n0.159651\n0.216225\n1.000000\n\n\n\n\n\n\n\n\n\n\n# add class codes that might be relevant\npassengers_df[\"class_codes\"] = passengers_df[\"class\"].cat.codes\ncorr_matrix = passengers_df.corr(numeric_only=True)\n\nsns.heatmap(corr_matrix,\n            annot=True,           # Show correlation values\n            cmap=\"coolwarm\",      # Color scheme (blue-white-red)\n            fmt=\".2f\")            # Format numbers to 2 decimal places\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\n\n.scatter()\n\n\n\npassengers_df.plot.scatter(x = \"age\", y = \"fare\")",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#mixed",
    "href": "pandas/multiple-variable-analysis.html#mixed",
    "title": "Analyzing Multiple Variable",
    "section": "Mixed",
    "text": "Mixed\nWhat if we wanted to explore the categorical embark_town variable with the numeric age and fare variables?\n\npassengers_df[[\"embark_town\", \"age\", \"fare\"]]\n\n\n\n\n\n\n\n\nembark_town\nage\nfare\n\n\n\n\n0\nSouthampton\n22.0\n7.2500\n\n\n1\nCherbourg\n38.0\n71.2833\n\n\n2\nSouthampton\n26.0\n7.9250\n\n\n3\nSouthampton\n35.0\n53.1000\n\n\n4\nSouthampton\n35.0\n8.0500\n\n\n...\n...\n...\n...\n\n\n886\nSouthampton\n27.0\n13.0000\n\n\n887\nSouthampton\n19.0\n30.0000\n\n\n888\nSouthampton\nNaN\n23.4500\n\n\n889\nCherbourg\n26.0\n30.0000\n\n\n890\nQueenstown\n32.0\n7.7500\n\n\n\n\n891 rows × 3 columns\n\n\n\n\nGrouping\n\n.groupby().groupby().agg([list]).groupby().agg([dictionary])\n\n\n\npassengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].mean()\n\n\n\n\n\n\n\n\nage\nfare\n\n\nembark_town\n\n\n\n\n\n\nCherbourg\n30.814769\n59.954144\n\n\nQueenstown\n28.089286\n13.276030\n\n\nSouthampton\n29.445397\n27.079812\n\n\n\n\n\n\n\n\n\n\npassengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].agg([\"mean\", \"max\"])\n\n\n\n\n\n\n\n\nage\nfare\n\n\n\nmean\nmax\nmean\nmax\n\n\nembark_town\n\n\n\n\n\n\n\n\nCherbourg\n30.814769\n71.0\n59.954144\n512.3292\n\n\nQueenstown\n28.089286\n70.5\n13.276030\n90.0000\n\n\nSouthampton\n29.445397\n80.0\n27.079812\n263.0000\n\n\n\n\n\n\n\n\n\n\npassengers_df.groupby(\"embark_town\").agg({\n    \"passenger_id\": \"count\",\n    \"fare\": \"sum\",\n    \"age\": [\"min\", \"median\", \"max\"]\n    })\n\n\n\n\n\n\n\n\npassenger_id\nfare\nage\n\n\n\ncount\nsum\nmin\nmedian\nmax\n\n\nembark_town\n\n\n\n\n\n\n\n\n\nCherbourg\n168\n10072.2962\n0.42\n29.0\n71.0\n\n\nQueenstown\n77\n1022.2543\n2.00\n27.0\n70.5\n\n\nSouthampton\n644\n17439.3988\n0.67\n28.0\n80.0\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\nYou can also visualize the result from a groupby() workflow. For instance,\n\nresults = passengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].mean()\nresults\n\n\n\n\n\n\n\n\nage\nfare\n\n\nembark_town\n\n\n\n\n\n\nCherbourg\n30.814769\n59.954144\n\n\nQueenstown\n28.089286\n13.276030\n\n\nSouthampton\n29.445397\n27.079812\n\n\n\n\n\n\n\n\nAll resultsSubset of results\n\n\n\nresults.plot.bar()\n\n\n\n\n\n\n\n\n\n\n\nresults[\"age\"].plot.bar()",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html",
    "href": "pandas/data-cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Outliers\nOutliers are extreme observations that can have an impact on summary statistics.",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html#outliers",
    "href": "pandas/data-cleaning.html#outliers",
    "title": "Data Cleaning",
    "section": "",
    "text": "Identification\nA common approach to identifying them is by examining each data point relative to a lower and upper bound.\n\nLower bound: 25th percentile - (1.5 x IQR)\nUpper bound: 75th percentile + (1.5 x IQR)\n\n\nIQR: Interquartile Range = 75th Percentile - 25th Percentile\n\nAn value below less than the lower bound or more than the upper bound can be considered an outlier.\nLet’s examine the age variable from passengers_df which had the following descriptive statistics.\n\npassengers_df[\"age\"].describe()\n\ncount    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n25%       20.125000\n50%       28.000000\n75%       38.000000\nmax       80.000000\nName: age, dtype: float64\n\n\nWe can calculate the information needed to generate a lower and upper cutoff bound.\n\np25 = passengers_df[\"age\"].quantile(0.25)\np75 = passengers_df[\"age\"].quantile(0.75)\niqr = p75 - p25\nlower_bound = p25 - 1.5 * iqr\nupper_bound = p75 + 1.5 * iqr\nprint(f\"\"\"\n25th Percentile: {p25}\\n75th Percentile: {p75}\\nIQR: {iqr}\\nLower Bound: {lower_bound}\\nUpper Bound: {upper_bound}\"\"\"\n)\n\n\n25th Percentile: 20.125\n75th Percentile: 38.0\nIQR: 17.875\nLower Bound: -6.6875\nUpper Bound: 64.8125\n\n\n\n\nAssignment\nWith this information, we can check the data series. Let’s assign True/False values to a new variable to track this\n\npassengers_df[\"age_outlier\"] = (passengers_df[\"age\"] &lt; lower_bound) | (passengers_df[\"age\"] &gt; upper_bound)\npassengers_df[\"age_outlier\"] \n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n886    False\n887    False\n888    False\n889    False\n890    False\nName: age_outlier, Length: 891, dtype: bool\n\n\nWe can now count it:\n\npassengers_df[\"age_outlier\"].value_counts()\n\nage_outlier\nFalse    880\nTrue      11\nName: count, dtype: int64\n\n\n\n\nDecision\nJust because you have outliers in a number series doesn’t mean you have to do anything about it. It depends on your goals and if you think the value is correct or now.\nYou could do nothing and leave the outliers in the data. If so, it could be helpful to:\n\nCommunicate their existence with explanation of values, if available.\nLean on more robust summary statistics (e.g., Median) when communicating findings.\n\nYou could also:\n\n\nCrosstabs\n\nRemove the rowRemove the valueReplace it\n\n\n\npassengers_df[passengers_df[\"age_outlier\"] == False]\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n2\nFalse\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n0\nFalse\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n2\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n1\nFalse\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n0\nFalse\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n2\nFalse\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n\n\n\n\n880 rows × 11 columns\n\n\n\n\n\n\nnp.where(\n    passengers_df[\"age_outlier\"], \n    np.nan, # remove the outlier and letting it be missing\n    passengers_df[\"age\"] # keep the original value\n)\n\narray([22.  , 38.  , 26.  , 35.  , 35.  ,   nan, 54.  ,  2.  , 27.  ,\n       14.  ,  4.  , 58.  , 20.  , 39.  , 14.  , 55.  ,  2.  ,   nan,\n       31.  ,   nan, 35.  , 34.  , 15.  , 28.  ,  8.  , 38.  ,   nan,\n       19.  ,   nan,   nan, 40.  ,   nan,   nan,   nan, 28.  , 42.  ,\n         nan, 21.  , 18.  , 14.  , 40.  , 27.  ,   nan,  3.  , 19.  ,\n         nan,   nan,   nan,   nan, 18.  ,  7.  , 21.  , 49.  , 29.  ,\n         nan,   nan, 21.  , 28.5 ,  5.  , 11.  , 22.  , 38.  , 45.  ,\n        4.  ,   nan,   nan, 29.  , 19.  , 17.  , 26.  , 32.  , 16.  ,\n       21.  , 26.  , 32.  , 25.  ,   nan,   nan,  0.83, 30.  , 22.  ,\n       29.  ,   nan, 28.  , 17.  , 33.  , 16.  ,   nan, 23.  , 24.  ,\n       29.  , 20.  , 46.  , 26.  , 59.  ,   nan,   nan, 23.  , 34.  ,\n       34.  , 28.  ,   nan, 21.  , 33.  , 37.  , 28.  , 21.  ,   nan,\n       38.  ,   nan, 47.  , 14.5 , 22.  , 20.  , 17.  , 21.  ,   nan,\n       29.  , 24.  ,  2.  , 21.  ,   nan, 32.5 , 32.5 , 54.  , 12.  ,\n         nan, 24.  ,   nan, 45.  , 33.  , 20.  , 47.  , 29.  , 25.  ,\n       23.  , 19.  , 37.  , 16.  , 24.  ,   nan, 22.  , 24.  , 19.  ,\n       18.  , 19.  , 27.  ,  9.  , 36.5 , 42.  , 51.  , 22.  , 55.5 ,\n       40.5 ,   nan, 51.  , 16.  , 30.  ,   nan,   nan, 44.  , 40.  ,\n       26.  , 17.  ,  1.  ,  9.  ,   nan, 45.  ,   nan, 28.  , 61.  ,\n        4.  ,  1.  , 21.  , 56.  , 18.  ,   nan, 50.  , 30.  , 36.  ,\n         nan,   nan,  9.  ,  1.  ,  4.  ,   nan,   nan, 45.  , 40.  ,\n       36.  , 32.  , 19.  , 19.  ,  3.  , 44.  , 58.  ,   nan, 42.  ,\n         nan, 24.  , 28.  ,   nan, 34.  , 45.5 , 18.  ,  2.  , 32.  ,\n       26.  , 16.  , 40.  , 24.  , 35.  , 22.  , 30.  ,   nan, 31.  ,\n       27.  , 42.  , 32.  , 30.  , 16.  , 27.  , 51.  ,   nan, 38.  ,\n       22.  , 19.  , 20.5 , 18.  ,   nan, 35.  , 29.  , 59.  ,  5.  ,\n       24.  ,   nan, 44.  ,  8.  , 19.  , 33.  ,   nan,   nan, 29.  ,\n       22.  , 30.  , 44.  , 25.  , 24.  , 37.  , 54.  ,   nan, 29.  ,\n       62.  , 30.  , 41.  , 29.  ,   nan, 30.  , 35.  , 50.  ,   nan,\n        3.  , 52.  , 40.  ,   nan, 36.  , 16.  , 25.  , 58.  , 35.  ,\n         nan, 25.  , 41.  , 37.  ,   nan, 63.  , 45.  ,   nan,  7.  ,\n       35.  ,   nan, 28.  , 16.  , 19.  ,   nan, 33.  , 30.  , 22.  ,\n       42.  , 22.  , 26.  , 19.  , 36.  , 24.  , 24.  ,   nan, 23.5 ,\n        2.  ,   nan, 50.  ,   nan,   nan, 19.  ,   nan,   nan,  0.92,\n         nan, 17.  , 30.  , 30.  , 24.  , 18.  , 26.  , 28.  , 43.  ,\n       26.  , 24.  , 54.  , 31.  , 40.  , 22.  , 27.  , 30.  , 22.  ,\n         nan, 36.  , 61.  , 36.  , 31.  , 16.  ,   nan, 45.5 , 38.  ,\n       16.  ,   nan,   nan, 29.  , 41.  , 45.  , 45.  ,  2.  , 24.  ,\n       28.  , 25.  , 36.  , 24.  , 40.  ,   nan,  3.  , 42.  , 23.  ,\n         nan, 15.  , 25.  ,   nan, 28.  , 22.  , 38.  ,   nan,   nan,\n       40.  , 29.  , 45.  , 35.  ,   nan, 30.  , 60.  ,   nan,   nan,\n       24.  , 25.  , 18.  , 19.  , 22.  ,  3.  ,   nan, 22.  , 27.  ,\n       20.  , 19.  , 42.  ,  1.  , 32.  , 35.  ,   nan, 18.  ,  1.  ,\n       36.  ,   nan, 17.  , 36.  , 21.  , 28.  , 23.  , 24.  , 22.  ,\n       31.  , 46.  , 23.  , 28.  , 39.  , 26.  , 21.  , 28.  , 20.  ,\n       34.  , 51.  ,  3.  , 21.  ,   nan,   nan,   nan, 33.  ,   nan,\n       44.  ,   nan, 34.  , 18.  , 30.  , 10.  ,   nan, 21.  , 29.  ,\n       28.  , 18.  ,   nan, 28.  , 19.  ,   nan, 32.  , 28.  ,   nan,\n       42.  , 17.  , 50.  , 14.  , 21.  , 24.  , 64.  , 31.  , 45.  ,\n       20.  , 25.  , 28.  ,   nan,  4.  , 13.  , 34.  ,  5.  , 52.  ,\n       36.  ,   nan, 30.  , 49.  ,   nan, 29.  ,   nan,   nan, 50.  ,\n         nan, 48.  , 34.  , 47.  , 48.  ,   nan, 38.  ,   nan, 56.  ,\n         nan,  0.75,   nan, 38.  , 33.  , 23.  , 22.  ,   nan, 34.  ,\n       29.  , 22.  ,  2.  ,  9.  ,   nan, 50.  , 63.  , 25.  ,   nan,\n       35.  , 58.  , 30.  ,  9.  ,   nan, 21.  , 55.  ,   nan, 21.  ,\n         nan, 54.  ,   nan, 25.  , 24.  , 17.  , 21.  ,   nan, 37.  ,\n       16.  , 18.  , 33.  ,   nan, 28.  , 26.  , 29.  ,   nan, 36.  ,\n       54.  , 24.  , 47.  , 34.  ,   nan, 36.  , 32.  , 30.  , 22.  ,\n         nan, 44.  ,   nan, 40.5 , 50.  ,   nan, 39.  , 23.  ,  2.  ,\n         nan, 17.  ,   nan, 30.  ,  7.  , 45.  , 30.  ,   nan, 22.  ,\n       36.  ,  9.  , 11.  , 32.  , 50.  , 64.  , 19.  ,   nan, 33.  ,\n        8.  , 17.  , 27.  ,   nan, 22.  , 22.  , 62.  , 48.  ,   nan,\n       39.  , 36.  ,   nan, 40.  , 28.  ,   nan,   nan, 24.  , 19.  ,\n       29.  ,   nan, 32.  , 62.  , 53.  , 36.  ,   nan, 16.  , 19.  ,\n       34.  , 39.  ,   nan, 32.  , 25.  , 39.  , 54.  , 36.  ,   nan,\n       18.  , 47.  , 60.  , 22.  ,   nan, 35.  , 52.  , 47.  ,   nan,\n       37.  , 36.  ,   nan, 49.  ,   nan, 49.  , 24.  ,   nan,   nan,\n       44.  , 35.  , 36.  , 30.  , 27.  , 22.  , 40.  , 39.  ,   nan,\n         nan,   nan, 35.  , 24.  , 34.  , 26.  ,  4.  , 26.  , 27.  ,\n       42.  , 20.  , 21.  , 21.  , 61.  , 57.  , 21.  , 26.  ,   nan,\n         nan, 51.  , 32.  ,   nan,  9.  , 28.  , 32.  , 31.  , 41.  ,\n         nan, 20.  , 24.  ,  2.  ,   nan,  0.75, 48.  , 19.  , 56.  ,\n         nan, 23.  ,   nan, 18.  , 21.  ,   nan, 18.  , 24.  ,   nan,\n       32.  , 23.  , 58.  , 50.  , 40.  , 47.  , 36.  , 20.  , 32.  ,\n       25.  ,   nan, 43.  ,   nan, 40.  , 31.  ,   nan, 31.  ,   nan,\n       18.  , 24.5 , 18.  , 43.  , 36.  ,   nan, 27.  , 20.  , 14.  ,\n       60.  , 25.  , 14.  , 19.  , 18.  , 15.  , 31.  ,  4.  ,   nan,\n       25.  , 60.  , 52.  , 44.  ,   nan, 49.  , 42.  , 18.  , 35.  ,\n       18.  , 25.  , 26.  , 39.  , 45.  , 42.  , 22.  ,   nan, 24.  ,\n         nan, 48.  , 29.  , 52.  , 19.  , 38.  , 27.  ,   nan, 33.  ,\n        6.  , 17.  , 34.  , 50.  , 27.  , 20.  , 30.  ,   nan, 25.  ,\n       25.  , 29.  , 11.  ,   nan, 23.  , 23.  , 28.5 , 48.  , 35.  ,\n         nan,   nan,   nan, 36.  , 21.  , 24.  , 31.  ,   nan, 16.  ,\n       30.  , 19.  , 31.  ,  4.  ,  6.  , 33.  , 23.  , 48.  ,  0.67,\n       28.  , 18.  , 34.  , 33.  ,   nan, 41.  , 20.  , 36.  , 16.  ,\n       51.  ,   nan, 30.5 ,   nan, 32.  , 24.  , 48.  , 57.  ,   nan,\n       54.  , 18.  ,   nan,  5.  ,   nan, 43.  , 13.  , 17.  , 29.  ,\n         nan, 25.  , 25.  , 18.  ,  8.  ,  1.  , 46.  ,   nan, 16.  ,\n         nan,   nan, 25.  , 39.  , 49.  , 31.  , 30.  , 30.  , 34.  ,\n       31.  , 11.  ,  0.42, 27.  , 31.  , 39.  , 18.  , 39.  , 33.  ,\n       26.  , 39.  , 35.  ,  6.  , 30.5 ,   nan, 23.  , 31.  , 43.  ,\n       10.  , 52.  , 27.  , 38.  , 27.  ,  2.  ,   nan,   nan,  1.  ,\n         nan, 62.  , 15.  ,  0.83,   nan, 23.  , 18.  , 39.  , 21.  ,\n         nan, 32.  ,   nan, 20.  , 16.  , 30.  , 34.5 , 17.  , 42.  ,\n         nan, 35.  , 28.  ,   nan,  4.  ,   nan,  9.  , 16.  , 44.  ,\n       18.  , 45.  , 51.  , 24.  ,   nan, 41.  , 21.  , 48.  ,   nan,\n       24.  , 42.  , 27.  , 31.  ,   nan,  4.  , 26.  , 47.  , 33.  ,\n       47.  , 28.  , 15.  , 20.  , 19.  ,   nan, 56.  , 25.  , 33.  ,\n       22.  , 28.  , 25.  , 39.  , 27.  , 19.  ,   nan, 26.  , 32.  ])\n\n\n\n\nThis is useful if you believe the data is simply wrong and you need to keep other information that is good from the observation.\nImagine if the variable was age and the value was 224. It would be an outlier, but it is not a believable outlier. Perhaps it was a typo that should have been 24. Instead of trying to guess what it should have been, you could also impute a value based upon data you have more faith in.\nFor instance, you could replace missing values with the median of the series - which is a more robust summary statistic.\nHere we use np.where that says where something is True, do something. If not, do something else.\n\npassengers_df[\"age_clean\"] = np.where(\n    passengers_df[\"age_outlier\"], \n    passengers_df[\"age\"].median(), # use the median\n    passengers_df[\"age\"] # keep the original value\n)\n\npassengers_df.query(\"age_outlier == True\")[[\"age\", \"age_clean\"]]\n\n\n\n\n\n\n\n\nage\nage_clean\n\n\n\n\n33\n66.0\n28.0\n\n\n54\n65.0\n28.0\n\n\n96\n71.0\n28.0\n\n\n116\n70.5\n28.0\n\n\n280\n65.0\n28.0\n\n\n456\n65.0\n28.0\n\n\n493\n71.0\n28.0\n\n\n630\n80.0\n28.0\n\n\n672\n70.0\n28.0\n\n\n745\n70.0\n28.0\n\n\n851\n74.0\n28.0\n\n\n\n\n\n\n\nI would not do this here since these ages do not seem like bad data, just outlier ages relative to the overall dataset.",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html#missing-data",
    "href": "pandas/data-cleaning.html#missing-data",
    "title": "Data Cleaning",
    "section": "Missing Data",
    "text": "Missing Data\nAs with outliers, missing data requires us to make a decision.\n\nIdentify\n\nisna()not.na()\n\n\nReturn True if value is missing.\n\npassengers_df[\"age\"].isna()\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n886    False\n887    False\n888     True\n889    False\n890    False\nName: age, Length: 891, dtype: bool\n\n\nCount the number of missing data values with isna().sum().\n\npassengers_df[\"age\"].isna().sum()\n\nnp.int64(177)\n\n\n\n\nReturn True if value is not missing\n\npassengers_df[\"age\"].notna()\n\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n886     True\n887     True\n888    False\n889     True\n890     True\nName: age, Length: 891, dtype: bool\n\n\nCount the number of non-missing data values with notna().sum().\n\npassengers_df[\"age\"].notna().sum()\n\nnp.int64(714)\n\n\n\n\n\n\n\nRemove\n\n.dropna().dropna(subset=)\n\n\nDrop any row that has a missing data point in any column.\n\nlen(passengers_df.dropna())\n\n712\n\n\n\n\nDrop any row that has a missing data point in one or more specific columns.\n\nlen(passengers_df.dropna(subset = \"age\"))\n\n714\n\n\n\n\n\n\n\nReplace\nReplace specific missing values with something new (e.g., the median).\n\n.fillna()\n\n\n\nmedian_age = passengers_df[\"age\"].median()\n\npassengers_df[\"filled_age\"] = passengers_df[\"age\"].fillna(median_age)\n\npassengers_df[[\"age\",\"filled_age\"]]\n\n\n\n\n\n\n\n\nage\nfilled_age\n\n\n\n\n0\n22.0\n22.0\n\n\n1\n38.0\n38.0\n\n\n2\n26.0\n26.0\n\n\n3\n35.0\n35.0\n\n\n4\n35.0\n35.0\n\n\n...\n...\n...\n\n\n886\n27.0\n27.0\n\n\n887\n19.0\n19.0\n\n\n888\nNaN\n28.0\n\n\n889\n26.0\n26.0\n\n\n890\n32.0\n32.0\n\n\n\n\n891 rows × 2 columns",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/merging-data.html",
    "href": "pandas/merging-data.html",
    "title": "Merging Data",
    "section": "",
    "text": "Left Join\nLet’s try adding data from passengers table into meals table using a left join. A left join is the most common approach and keeps all records from the left table, adding new info from the right table if a connection can be made to a given record.\nluggage_combo_df = pd.merge(left = luggage_df, right = passengers_df, on = \"passenger_id\", how = \"left\")\nluggage_combo_df\n\n\n\n\n\n\n\n\npassenger_id\nbag_number\nbag_type\nweight_kgs\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\nage_clean\nfilled_age\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n1\nduffel_bag\n23.0\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n\n\n1\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n2\nsmall_suitcase\n11.1\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n\n\n2\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nsuitcase\n43.7\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n3\n5f616a6d-f338-4360-9d7b-3b92196dd350\n2\nhat_box\n18.8\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n4\n5f616a6d-f338-4360-9d7b-3b92196dd350\n3\nwardrobe_trunk\n45.2\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2031\n2094390f-10db-4ca3-9693-ef5795da5446\n2\nhat_box\n17.8\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2032\n2094390f-10db-4ca3-9693-ef5795da5446\n3\nwardrobe_trunk\n34.6\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2033\n2094390f-10db-4ca3-9693-ef5795da5446\n4\njewelry_case\n18.4\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2034\n2094390f-10db-4ca3-9693-ef5795da5446\n5\nsuitcase\n26.1\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2035\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n1\ncloth_bundle\n5.0\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n32.0\n32.0\n\n\n\n\n2036 rows × 16 columns\nThis works and we could do like find average luggage weight by something new from the passenger dataset such as class.\nluggage_combo_df.groupby(\"class\")[\"weight_kgs\"].mean()\n\n/var/folders/jh/vdccym5962j7k7gdnt8z2w1h0000gn/T/ipykernel_16278/3239628133.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  luggage_combo_df.groupby(\"class\")[\"weight_kgs\"].mean()\n\n\nclass\nFirst     32.524771\nSecond    22.240000\nThird     14.594142\nName: weight_kgs, dtype: float64\nHowever, if may be more useful to take information from the new luggage_df table, calculate something new, and then add it back to pasenger_df which is a very clean table for analytics with one row per unique passenger.\nLet’s do three things\nluggage_summary_df = luggage_df.groupby(\"passenger_id\").agg(\n    luggage_count=(\"bag_number\", \"count\"),\n    luggage_mean_weight=(\"weight_kgs\", \"mean\"),\n    luggage_total_weight=(\"weight_kgs\", \"sum\")\n).reset_index()\n\nluggage_summary_df\n\n\n\n\n\n\n\n\npassenger_id\nluggage_count\nluggage_mean_weight\nluggage_total_weight\n\n\n\n\n0\n001c43f2-cc62-405f-bc6b-32fe01ac690e\n4\n35.825000\n143.3\n\n\n1\n005eeee0-731c-4140-8173-7e320708fc8b\n2\n18.000000\n36.0\n\n\n2\n0095bd9e-f724-4ea0-b36c-14c422372fa6\n1\n8.100000\n8.1\n\n\n3\n010ed1a2-8f40-41c0-9440-e4eaa68c23bf\n1\n23.200000\n23.2\n\n\n4\n015ef17d-8360-430a-97b2-81d13fcf1674\n2\n15.650000\n31.3\n\n\n...\n...\n...\n...\n...\n\n\n886\nfcf07c16-653f-49f8-b41d-848d654433fb\n2\n14.800000\n29.6\n\n\n887\nfda40ec4-cff3-447e-a12d-f2391ac2a016\n3\n23.533333\n70.6\n\n\n888\nfe237248-3145-49c3-873a-23103a548d48\n3\n33.933333\n101.8\n\n\n889\nff4c5bd2-a58f-4d1b-9ba9-98c963e6a1f1\n1\n6.400000\n6.4\n\n\n890\nffaa9cfb-d5cd-4ef0-8248-9250a2a57a39\n1\n15.400000\n15.4\n\n\n\n\n891 rows × 4 columns\npd.merge(left=passengers_df, right = luggage_summary_df, on = \"passenger_id\", how = \"left\")\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\nage_clean\nfilled_age\nluggage_count\nluggage_mean_weight\nluggage_total_weight\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n2\n17.05\n34.1\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n3\n35.90\n107.7\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n2\nFalse\n26.0\n26.0\n2\n16.40\n32.8\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n0\nFalse\n35.0\n35.0\n4\n34.95\n139.8\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n2\nFalse\n35.0\n35.0\n1\n22.70\n22.7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n1\nFalse\n27.0\n27.0\n2\n26.75\n53.5\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n0\nFalse\n19.0\n19.0\n4\n36.00\n144.0\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n2\nFalse\nNaN\n28.0\n2\n15.45\n30.9\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n5\n28.68\n143.4\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n32.0\n32.0\n1\n5.00\n5.0\n\n\n\n\n891 rows × 16 columns",
    "crumbs": [
      "Pandas",
      "Merging Data"
    ]
  },
  {
    "objectID": "pandas/merging-data.html#left-join",
    "href": "pandas/merging-data.html#left-join",
    "title": "Merging Data",
    "section": "",
    "text": "Make the calculations and reset the index to help with eventual merging.\n\n\n\nMerge the summaries into passengers_df",
    "crumbs": [
      "Pandas",
      "Merging Data"
    ]
  }
]