[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Programming II for Data Analysis",
    "section": "",
    "text": "Preface\nThis set of Python reference guides is based on material covered in the Fall 2025 semester class Python Programming II for Data Analysis.\nCreated with Quarto.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html",
    "href": "python-fundamentals/basics.html",
    "title": "General Overview",
    "section": "",
    "text": "Getting Started\nBefore we dive into data analytics in Python, let’s recap Python basics using just the standard library. This guide serves as a comprehensive reference for Python fundamentals that you’ll use in data analysis.",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#strings",
    "href": "python-fundamentals/basics.html#strings",
    "title": "General Overview",
    "section": "Strings",
    "text": "Strings\nText data is stored as strings and enclosed in quotes.\n\ncountry = \"Netherlands\"\nprint(country)\n\nNetherlands\n\n\nWe can use the type() function to see that Python stores it as a string.\n\ntype(country)\n\nstr\n\n\nPython has many built-in tools to work with strings using functions or methods:\n\nMethod: call using dot notation (e.g., country.upper())\nFunction: call with the variable as an argument (e.g., type(country))\n\n\nCommon String Methods\n\nCases\n\ncountry.upper()\n\n'NETHERLANDS'\n\n\n\ncountry.lower()\n\n'netherlands'\n\n\n\ncity = \"den haag\"\ncity.title()\n\n'Den Haag'\n\n\n\ncity.capitalize()\n\n'Den haag'\n\n\n\n\nEvaluating Strings\n\ncountry.startswith(\"Neth\")\n\nTrue\n\n\n\ncountry.endswith(\"land\")\n\nFalse\n\n\n\ncountry.isalpha()  \n\nTrue\n\n\n\ncountry.isdigit()  \n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#numbers-integers-and-floats",
    "href": "python-fundamentals/basics.html#numbers-integers-and-floats",
    "title": "General Overview",
    "section": "Numbers (Integers and Floats)",
    "text": "Numbers (Integers and Floats)\n\nNote: Integers (whole numbers) and Floats (decimals) have nearly identical treatment in Python.\n\n\ngdp_capita = 50000\nprint(gdp_capita)\n\n50000\n\n\n\ngdp_capita_float = 50000.00\ngdp_capita == gdp_capita_float\n\nTrue\n\n\n\ntype(gdp_capita)\n\nint\n\n\n\ntype(gdp_capita_float)\n\nfloat\n\n\n\nBasic math\n\ngdp_capita + 5000    # 55000 (addition)\ngdp_capita - 5000    # 45000 (subtraction)\ngdp_capita * 2       # 100000 (multiplication)\ngdp_capita / 1000    # 50.0 (division)\ngdp_capita // 1000   # 50 (floor division)\ngdp_capita % 1000    # 0 (remainder/modulo)\ngdp_capita ** 2      # 2500000000 (exponentiation)\n\n2500000000\n\n\n\n# Math functions\nabs(gdp_capita)      # 50000 (absolute value)\nround(gdp_capita, -3) # 50000 (round to nearest thousand)\nmin(gdp_capita, 60000) # 50000 (minimum of values)\nmax(gdp_capita, 40000) # 50000 (maximum of values)\nsum([gdp_capita, 45000, 55000]) # 150000\n\n150000\n\n\n\nimport math\n\nmath.sqrt(gdp_capita)    # 223.6 (square root)\nmath.log10(gdp_capita)   # 4.699 (base-10 logarithm)\nmath.ceil(gdp_capita/3)  # 16667 (ceiling division)\n\n16667\n\n\n\n# Type conversion\nstr(gdp_capita)      # \"50000\" (convert to string)\nfloat(gdp_capita)    # 50000.0 (convert to float)\nlen(str(gdp_capita)) # 5 (number of digits)\n\n5",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#booleans",
    "href": "python-fundamentals/basics.html#booleans",
    "title": "General Overview",
    "section": "Booleans",
    "text": "Booleans\nBoolean values represent True or False and are essential for conditional logic and data filtering.\n\nis_european = True\nis_landlocked = False\n\nprint(f\"European: {is_european}\")\nprint(f\"Type: {type(is_european)}\")\n\nEuropean: True\nType: &lt;class 'bool'&gt;\n\n\n\n# Boolean operations\nprint(f\"Both conditions: {is_european and is_landlocked}\")\nprint(f\"Either condition: {is_european or is_landlocked}\")\nprint(f\"Not European: {not is_european}\")\n\nBoth conditions: False\nEither condition: True\nNot European: False",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#null-values",
    "href": "python-fundamentals/basics.html#null-values",
    "title": "General Overview",
    "section": "Null values",
    "text": "Null values\n\nmy_null = None\ntype(my_null)\n\nNoneType\n\n\n\n# Checking for None values (important for data cleaning)\nif my_null is None:\n    print(\"Value is None\")\n\n# Using None in comparisons\nvalues = [1, 2, None, 4, 5]\nclean_values = [x for x in values if x is not None]\nprint(clean_values)\n\nValue is None\n[1, 2, 4, 5]",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#creating-lists",
    "href": "python-fundamentals/basics.html#creating-lists",
    "title": "General Overview",
    "section": "Creating Lists",
    "text": "Creating Lists\n\n# Empty list\ncountries = []\n\n# List with initial values\neuropean_countries = ['Netherlands', 'France', 'Germany', 'Spain']\nprint(european_countries)\n\n['Netherlands', 'France', 'Germany', 'Spain']\n\n\n\n# Mixed data types\nmixed_list = ['Netherlands', 50000, True, None]\nprint(mixed_list)\n\n['Netherlands', 50000, True, None]",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#common-list-operations",
    "href": "python-fundamentals/basics.html#common-list-operations",
    "title": "General Overview",
    "section": "Common List Operations",
    "text": "Common List Operations\n\nAdding items\n\ncountries = ['Netherlands', 'France']\ncountries.append('Germany')  # Add to end\nprint(countries)\n\n['Netherlands', 'France', 'Germany']\n\n\n\ncountries.insert(1, 'Belgium')  # Insert at specific position\nprint(countries)\n\n['Netherlands', 'Belgium', 'France', 'Germany']\n\n\n\ncountries.extend(['Spain', 'Italy'])  # Add multiple items\nprint(countries)\n\n['Netherlands', 'Belgium', 'France', 'Germany', 'Spain', 'Italy']\n\n\n\n\nAccessing items\n\nprint(countries[0])    # First item\nprint(countries[-1])   # Last item\nprint(countries[1:3])  # Slice from index 1 to 2\n\nNetherlands\nItaly\n['Belgium', 'France']\n\n\n\n\nModifying and removing items\n\ncountries[0] = 'Holland'  # Replace item\nprint(countries)\n\n['Holland', 'Belgium', 'France', 'Germany', 'Spain', 'Italy']\n\n\n\ncountries.remove('Belgium')  # Remove first occurrence\nprint(countries)\n\n['Holland', 'France', 'Germany', 'Spain', 'Italy']\n\n\n\npopped = countries.pop()  # Remove and return last item\nprint(f\"Removed: {popped}\")\nprint(countries)\n\nRemoved: Italy\n['Holland', 'France', 'Germany', 'Spain']",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#common-list-functions-and-methods",
    "href": "python-fundamentals/basics.html#common-list-functions-and-methods",
    "title": "General Overview",
    "section": "Common List Functions and Methods",
    "text": "Common List Functions and Methods\n\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\n\n# Built-in functions\nprint(f\"Length: {len(numbers)}\")\nprint(f\"Sum: {sum(numbers)}\")\nprint(f\"Min: {min(numbers)}\")\nprint(f\"Max: {max(numbers)}\")\n\nLength: 8\nSum: 31\nMin: 1\nMax: 9\n\n\n\n# List methods\nprint(f\"Count of 1: {numbers.count(1)}\")\nprint(f\"Index of 4: {numbers.index(4)}\")\n\nnumbers.sort()  # Sort in place\nprint(f\"Sorted: {numbers}\")\n\nnumbers.reverse()  # Reverse in place\nprint(f\"Reversed: {numbers}\")\n\nCount of 1: 2\nIndex of 4: 2\nSorted: [1, 1, 2, 3, 4, 5, 6, 9]\nReversed: [9, 6, 5, 4, 3, 2, 1, 1]\n\n\n\nList comprehensions\n\n# Create a list of squares\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)\n\n[1, 4, 9, 16, 25]\n\n\n\n# Filter and transform\nwords = ['apple', 'banana', 'cherry', 'date']\nlong_words = [word.upper() for word in words if len(word) &gt; 5]\nprint(long_words)\n\n['BANANA', 'CHERRY']",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#retrieve-single-value",
    "href": "python-fundamentals/basics.html#retrieve-single-value",
    "title": "General Overview",
    "section": "Retrieve single value",
    "text": "Retrieve single value\n\ncurrencies['US']\n\n'Dollar'",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#add-a-new-item",
    "href": "python-fundamentals/basics.html#add-a-new-item",
    "title": "General Overview",
    "section": "Add a new item",
    "text": "Add a new item\n\ncurrencies['MX'] = 'Peso'\ncurrencies\n\n{'US': 'Dollar', 'NL': 'Euro', 'JP': 'Yen', 'MX': 'Peso'}",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#delete-an-item",
    "href": "python-fundamentals/basics.html#delete-an-item",
    "title": "General Overview",
    "section": "Delete an item",
    "text": "Delete an item\n\ndel currencies['MX']\ncurrencies\n\n{'US': 'Dollar', 'NL': 'Euro', 'JP': 'Yen'}",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#get-a-value-of-a-specific-key",
    "href": "python-fundamentals/basics.html#get-a-value-of-a-specific-key",
    "title": "General Overview",
    "section": "Get a value of a specific key",
    "text": "Get a value of a specific key\n\nIf the key does not exist, Python returns None type.\n\n\ncurrencies.get('US')\n\n'Dollar'\n\n\n\nprint(currencies.get('BR'))\n\nNone\n\n\nYou can pass a default value if it is not there.\n\ncurrencies.get('ZZ', 'Not in our dictionary')\n\n'Not in our dictionary'",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#get-all-keys",
    "href": "python-fundamentals/basics.html#get-all-keys",
    "title": "General Overview",
    "section": "Get all keys",
    "text": "Get all keys\n\ncurrencies.keys()\n\ndict_keys(['US', 'NL', 'JP'])",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#get-all-values",
    "href": "python-fundamentals/basics.html#get-all-values",
    "title": "General Overview",
    "section": "Get all values",
    "text": "Get all values\n\ncurrencies.values()\n\ndict_values(['Dollar', 'Euro', 'Yen'])",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#get-all-items",
    "href": "python-fundamentals/basics.html#get-all-items",
    "title": "General Overview",
    "section": "Get all items",
    "text": "Get all items\n\ncurrencies.items()\n\ndict_items([('US', 'Dollar'), ('NL', 'Euro'), ('JP', 'Yen')])\n\n\n\ncurrencies\n\n{'US': 'Dollar', 'NL': 'Euro', 'JP': 'Yen'}",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#loop-through-dictionary-keys",
    "href": "python-fundamentals/basics.html#loop-through-dictionary-keys",
    "title": "General Overview",
    "section": "Loop through dictionary keys",
    "text": "Loop through dictionary keys\n\nfor country in currencies:\n    print(country)\n\nUS\nNL\nJP",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#loop-through-values",
    "href": "python-fundamentals/basics.html#loop-through-values",
    "title": "General Overview",
    "section": "Loop through values",
    "text": "Loop through values\n\nfor currency in currencies.values():\n    print(currency)\n\nDollar\nEuro\nYen",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#loop-through-both",
    "href": "python-fundamentals/basics.html#loop-through-both",
    "title": "General Overview",
    "section": "Loop through both",
    "text": "Loop through both\n\nfor country, currency in currencies.items():\n    print(f\"The currency of {country} is the {currency}\")\n\nThe currency of US is the Dollar\nThe currency of NL is the Euro\nThe currency of JP is the Yen",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#a-list-with-a-collection-of-dictionaries",
    "href": "python-fundamentals/basics.html#a-list-with-a-collection-of-dictionaries",
    "title": "General Overview",
    "section": "A list with a collection of dictionaries",
    "text": "A list with a collection of dictionaries\n\ncountries = []\n\nnetherlands = {\n    'capital': 'Amsterdam',\n    'region':'Western Europe'\n}\n\nfrance = {\n    'capital': 'Paris',\n    'region':'Western Europe'\n}\n\ncountries.append(netherlands)\ncountries.append(france)\n\ncountries\n\n[{'capital': 'Amsterdam', 'region': 'Western Europe'},\n {'capital': 'Paris', 'region': 'Western Europe'}]\n\n\n\nfor country in countries:\n    display_name = f\"{country['capital']}, \"\n    display_name += f\"{country['region']}\"\n    print(display_name)\n\nAmsterdam, Western Europe\nParis, Western Europe",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#lists-within-dictionaries",
    "href": "python-fundamentals/basics.html#lists-within-dictionaries",
    "title": "General Overview",
    "section": "Lists within dictionaries",
    "text": "Lists within dictionaries\n\nlanguages = {\n    'Canada': ['English', 'French'],\n    'Belgium': ['French', 'Dutch'],\n    'Switzerland': ['German', 'Italian', 'French']\n}\nlanguages\n\n{'Canada': ['English', 'French'],\n 'Belgium': ['French', 'Dutch'],\n 'Switzerland': ['German', 'Italian', 'French']}\n\n\n\nfor country, languages_list in languages.items():\n    print(f\"In {country}, the following languages are spoken:\")\n    for language in languages_list:\n        print(f\"\\t{language}\")\n\nIn Canada, the following languages are spoken:\n    English\n    French\nIn Belgium, the following languages are spoken:\n    French\n    Dutch\nIn Switzerland, the following languages are spoken:\n    German\n    Italian\n    French",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#performance-considerations",
    "href": "python-fundamentals/basics.html#performance-considerations",
    "title": "General Overview",
    "section": "Performance considerations",
    "text": "Performance considerations\n\n# Performance comparison for lookups\nimport time\n\n# Create large datasets\nlarge_list = list(range(10000))\nlarge_set = set(range(10000))\nlarge_dict = {i: f\"value_{i}\" for i in range(10000)}\n\n# List lookup (slow for large lists)\ntarget = 9999\nstart_time = time.time()\nfound = target in large_list\nlist_time = time.time() - start_time\n\n# Set lookup (very fast)\nstart_time = time.time()\nfound = target in large_set\nset_time = time.time() - start_time\n\n# Dictionary lookup (very fast)\nstart_time = time.time()\nfound = target in large_dict\ndict_time = time.time() - start_time\n\nprint(f\"List lookup: {list_time:.6f} seconds\")\nprint(f\"Set lookup: {set_time:.6f} seconds\") \nprint(f\"Dict lookup: {dict_time:.6f} seconds\")\nprint(f\"Set is {list_time/set_time:.0f}x faster than list for lookups\")\n\nList lookup: 0.000074 seconds\nSet lookup: 0.000017 seconds\nDict lookup: 0.000017 seconds\nSet is 4x faster than list for lookups",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#for-loops",
    "href": "python-fundamentals/basics.html#for-loops",
    "title": "General Overview",
    "section": "For loops",
    "text": "For loops\nFor loops iterate over sequences (lists, strings, ranges, etc.). They’re the most common type of loop in data analytics.\n\n# Loop through a list\ncountries = ['Netherlands', 'France', 'Germany', 'Spain']\nfor country in countries:\n    print(f\"Visiting {country}\")\n\nVisiting Netherlands\nVisiting France\nVisiting Germany\nVisiting Spain\n\n\n\n# Loop with enumerate to get index and value\nfor index, country in enumerate(countries):\n    print(f\"{index + 1}. {country}\")\n\n1. Netherlands\n2. France\n3. Germany\n4. Spain\n\n\n\n# Loop through a range of numbers\nfor i in range(5):\n    print(f\"Number: {i}\")\n\nNumber: 0\nNumber: 1\nNumber: 2\nNumber: 3\nNumber: 4\n\n\n\n# Loop through a range with start, stop, step\nfor i in range(2, 10, 2):  # Start at 2, stop before 10, step by 2\n    print(f\"Even number: {i}\")\n\nEven number: 2\nEven number: 4\nEven number: 6\nEven number: 8\n\n\n\n# Loop through string characters\nfor letter in \"Python\":\n    print(f\"Letter: {letter}\")\n\nLetter: P\nLetter: y\nLetter: t\nLetter: h\nLetter: o\nLetter: n",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#while-loops",
    "href": "python-fundamentals/basics.html#while-loops",
    "title": "General Overview",
    "section": "While loops",
    "text": "While loops\nWhile loops continue as long as a condition is True. Use them when you don’t know exactly how many iterations you need.\n\nmonth = 1\nwhile month &lt;= 12:\n    print(f\"Month {month}\")\n    month += 1\n\nMonth 1\nMonth 2\nMonth 3\nMonth 4\nMonth 5\nMonth 6\nMonth 7\nMonth 8\nMonth 9\nMonth 10\nMonth 11\nMonth 12",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#loop-control-statements",
    "href": "python-fundamentals/basics.html#loop-control-statements",
    "title": "General Overview",
    "section": "Loop control statements",
    "text": "Loop control statements\n\nbreak: exits the loop completely when a condition is met\ncontinue: skips the current iteration and moves to the next one\n\n\n# Using break\nfor i in range(10):\n    if i == 5:\n        print(\"Breaking at 5\")\n        break\n    print(i)\n\n0\n1\n2\n3\n4\nBreaking at 5\n\n\n\n# Using continue\nfor i in range(5):\n    if i == 2:\n        print(\"Skipping 2\")\n        continue\n    print(f\"Processing {i}\")\n\nProcessing 0\nProcessing 1\nSkipping 2\nProcessing 3\nProcessing 4\n\n\n\n# Practical example: processing data with conditions\nsales_data = [100, 0, 250, -50, 300, 0, 150]\nvalid_sales = []\n\nfor sale in sales_data:\n    if sale &lt; 0:\n        print(f\"Invalid sale amount: {sale}\")\n        continue\n    if sale == 0:\n        print(\"No sale recorded\")\n        continue\n    valid_sales.append(sale)\n    \nprint(f\"Valid sales: {valid_sales}\")\nprint(f\"Total valid sales: {sum(valid_sales)}\")\n\nNo sale recorded\nInvalid sale amount: -50\nNo sale recorded\nValid sales: [100, 250, 300, 150]\nTotal valid sales: 800",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#arbitrary-positional-arguments",
    "href": "python-fundamentals/basics.html#arbitrary-positional-arguments",
    "title": "General Overview",
    "section": "Arbitrary Positional Arguments",
    "text": "Arbitrary Positional Arguments\n* allows users to pass any number of arguments for when you don’t know how much input a function may receive\n\ndef family(last_name, *first_names):\n    \"\"\"Return all people within a family\"\"\"\n    print(f\"{last_name}:\")\n    for first_name in first_names:\n        print(f\"* {first_name}\")\n\nfamily(\"chisholm\", \"alex\", \"karen\", \"clara\", \"gracie\")\n\nchisholm:\n* alex\n* karen\n* clara\n* gracie",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#arbitrary-keyword-arguments",
    "href": "python-fundamentals/basics.html#arbitrary-keyword-arguments",
    "title": "General Overview",
    "section": "Arbitrary Keyword Arguments",
    "text": "Arbitrary Keyword Arguments\nYou can also set unknown or undefined parameters using key-value pairs.\n\ndef country(name, **qualities):\n    print(name)\n    for key, value in qualities.items():\n        print(f\"* {key}: {value}\")\n\ncountry(\"Netherlands\")\n\nNetherlands\n\n\n\ncountry(\"Netherlands\", region = \"Europe\", climate = \"Wet\", landlocked = False)\n\nNetherlands\n* region: Europe\n* climate: Wet\n* landlocked: False",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#default-values",
    "href": "python-fundamentals/basics.html#default-values",
    "title": "General Overview",
    "section": "Default values",
    "text": "Default values\nYou can also set a default value that will be used as the argument if the function is called without the argument.\n\ndef hello(name, greeting = \"Hello\"):\n    return greeting + ', ' + name + '!'\n\nIf you do not pass in an updated greeting value.\n\nhello(\"Tommy\")\n\n'Hello, Tommy!'\n\n\nAnd with an updated greeting value.\n\nhello(\"Tommy\", \"What's going on\")\n\n\"What's going on, Tommy!\"",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#modules-and-imports",
    "href": "python-fundamentals/basics.html#modules-and-imports",
    "title": "General Overview",
    "section": "Modules and Imports",
    "text": "Modules and Imports\nModules allow you to organize code across multiple files and reuse functionality. This is essential for data analytics projects.\n\nBuilt-in modules\n\n# Different ways to import\nimport math\nimport random\nfrom datetime import datetime\nimport json\n\n# Using imported modules\nprint(f\"Pi: {math.pi}\")\nprint(f\"Random number: {random.randint(1, 100)}\")\nprint(f\"Current time: {datetime.now()}\")\n\ndata = {\"name\": \"Alice\", \"score\": 95}\njson_string = json.dumps(data)\nprint(f\"JSON: {json_string}\")\n\nPi: 3.141592653589793\nRandom number: 51\nCurrent time: 2025-09-13 16:24:42.049445\nJSON: {\"name\": \"Alice\", \"score\": 95}\n\n\n\n\nImport variations\n\n# Import specific functions\nfrom math import sqrt, pow\nresult = sqrt(pow(3, 2) + pow(4, 2))  # Pythagorean theorem\nprint(f\"Hypotenuse: {result}\")\n\n# Import with alias\nimport statistics as stats\nscores = [85, 92, 78, 96, 88]\nprint(f\"Mean: {stats.mean(scores)}\")\nprint(f\"Median: {stats.median(scores)}\")\nprint(f\"Standard deviation: {stats.stdev(scores):.2f}\")\n\nHypotenuse: 5.0\nMean: 87.8\nMedian: 88\nStandard deviation: 6.87\n\n\n\n\nCreating your own modules\nWhen you save functions in a .py file, you can import them into other files:\n\n# Example: If you saved these functions in 'data_helpers.py':\ndef clean_data(data_list):\n    \"\"\"Remove None values and convert to numbers\"\"\"\n    cleaned = []\n    for item in data_list:\n        if item is not None:\n            try:\n                cleaned.append(float(item))\n            except (ValueError, TypeError):\n                pass\n    return cleaned\n\ndef calculate_stats(numbers):\n    \"\"\"Calculate basic statistics\"\"\"\n    if not numbers:\n        return {\"mean\": 0, \"min\": 0, \"max\": 0}\n    \n    return {\n        \"mean\": sum(numbers) / len(numbers),\n        \"min\": min(numbers),\n        \"max\": max(numbers)\n    }\n\n# Then in another file, you could use:\n# from data_helpers import clean_data, calculate_stats\n# \n# raw_data = [1, \"2\", None, 3.5, \"invalid\", 4]\n# clean_numbers = clean_data(raw_data)\n# stats = calculate_stats(clean_numbers)\n\n# For demonstration, we'll use the functions directly:\nraw_data = [1, \"2\", None, 3.5, \"invalid\", 4]\nclean_numbers = clean_data(raw_data)\nstats = calculate_stats(clean_numbers)\nprint(f\"Clean data: {clean_numbers}\")\nprint(f\"Statistics: {stats}\")\n\nClean data: [1.0, 2.0, 3.5, 4.0]\nStatistics: {'mean': 2.625, 'min': 1.0, 'max': 4.0}\n\n\nThis modular approach is useful for: * Large programs where a single script becomes too long or complex * Reusable functions that you want to use across multiple projects * Team collaboration where different people work on different modules * Data analytics workflows where you separate data cleaning, analysis, and visualization functions",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#define-a-class",
    "href": "python-fundamentals/basics.html#define-a-class",
    "title": "General Overview",
    "section": "Define a class",
    "text": "Define a class\n\nclass Stock:\n    def __init__(self, symbol, price):\n        \"\"\"Create a stock with symbol and price\"\"\"\n        self.symbol = symbol\n        self.price = price",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#create-a-class-instance",
    "href": "python-fundamentals/basics.html#create-a-class-instance",
    "title": "General Overview",
    "section": "Create a class instance",
    "text": "Create a class instance\n\napple = Stock(\"APPL\", 214)",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#add-some-methods",
    "href": "python-fundamentals/basics.html#add-some-methods",
    "title": "General Overview",
    "section": "Add some methods",
    "text": "Add some methods\nNow let’s add new methods.\n\ndisplay(): Summarize the current price.\ntoo_expensive(): Is the stock price too expensive? (Arbitrary $100 level)\n\n\nclass Stock:\n    def __init__(self, symbol, price):\n        \"\"\"Create a stock with symbol and price\"\"\"\n        self.symbol = symbol\n        self.price = price\n    \n    def display(self):\n        \"\"\"Show the stock info\"\"\"\n        print(f\"The most recent stock price for {self.symbol} is ${self.price}.\")\n    \n    def too_expensive(self):\n        \"\"\"Check if stock costs more than $100\"\"\"\n        return self.price &gt; 100\n\n\napple = Stock(\"APPL\", 214)\napple.display()\n\nThe most recent stock price for APPL is $214.\n\n\n\napple.too_expensive()\n\nTrue\n\n\n\nuber = Stock(\"UBER\", 91)\nuber.display()\n\nThe most recent stock price for UBER is $91.\n\n\n\nuber.too_expensive()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#reading-text-files",
    "href": "python-fundamentals/basics.html#reading-text-files",
    "title": "General Overview",
    "section": "Reading text files",
    "text": "Reading text files\n\n# Reading entire file content\ntry:\n    with open('data.txt', 'r') as file:\n        content = file.read()\n        print(content)\nexcept FileNotFoundError:\n    print(\"File not found\")\n\nFile not found\n\n\n\n# Reading line by line (memory efficient for large files)\ntry:\n    with open('data.txt', 'r') as file:\n        for line_number, line in enumerate(file, 1):\n            print(f\"Line {line_number}: {line.strip()}\")\nexcept FileNotFoundError:\n    print(\"File not found\")\n\nFile not found\n\n\n\n# Reading all lines into a list\ntry:\n    with open('data.txt', 'r') as file:\n        lines = file.readlines()\n        print(f\"Read {len(lines)} lines\")\n        for line in lines[:3]:  # Show first 3 lines\n            print(line.strip())\nexcept FileNotFoundError:\n    print(\"File not found\")\n\nFile not found",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#writing-text-files",
    "href": "python-fundamentals/basics.html#writing-text-files",
    "title": "General Overview",
    "section": "Writing text files",
    "text": "Writing text files\n\n# Writing to a file (creates new file or overwrites existing)\ncountries_data = ['Netherlands', 'France', 'Germany', 'Spain']\n\nwith open('countries.txt', 'w') as file:\n    for country in countries_data:\n        file.write(f\"{country}\\n\")\n\nprint(\"Countries written to file\")\n\nCountries written to file\n\n\n\n# Appending to a file\nwith open('countries.txt', 'a') as file:\n    file.write(\"Italy\\n\")\n    file.write(\"Portugal\\n\")\n\nprint(\"Additional countries appended\")\n\nAdditional countries appended",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#working-with-csv-files",
    "href": "python-fundamentals/basics.html#working-with-csv-files",
    "title": "General Overview",
    "section": "Working with CSV files",
    "text": "Working with CSV files\nCSV (Comma-Separated Values) files are common in data analytics.\n\nimport csv\n\n# Writing CSV data\nsales_data = [\n    ['Date', 'Product', 'Sales'],\n    ['2024-01-01', 'Widget A', 100],\n    ['2024-01-02', 'Widget B', 150],\n    ['2024-01-03', 'Widget A', 120]\n]\n\nwith open('sales.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(sales_data)\n\nprint(\"CSV file created\")\n\nCSV file created\n\n\n\n# Reading CSV data\ntry:\n    with open('sales.csv', 'r') as file:\n        reader = csv.reader(file)\n        header = next(reader)  # Get header row\n        print(f\"Headers: {header}\")\n        \n        for row in reader:\n            print(f\"Date: {row[0]}, Product: {row[1]}, Sales: {row[2]}\")\nexcept FileNotFoundError:\n    print(\"CSV file not found\")\n\nHeaders: ['Date', 'Product', 'Sales']\nDate: 2024-01-01, Product: Widget A, Sales: 100\nDate: 2024-01-02, Product: Widget B, Sales: 150\nDate: 2024-01-03, Product: Widget A, Sales: 120\n\n\n\n# Reading CSV as dictionaries (more convenient)\ntry:\n    with open('sales.csv', 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            print(f\"On {row['Date']}, {row['Product']} sold {row['Sales']} units\")\nexcept FileNotFoundError:\n    print(\"CSV file not found\")\n\nOn 2024-01-01, Widget A sold 100 units\nOn 2024-01-02, Widget B sold 150 units\nOn 2024-01-03, Widget A sold 120 units",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#working-with-json-files",
    "href": "python-fundamentals/basics.html#working-with-json-files",
    "title": "General Overview",
    "section": "Working with JSON files",
    "text": "Working with JSON files\nJSON (JavaScript Object Notation) is common for structured data.\n\nimport json\n\n# Writing JSON data\ncountry_data = {\n    \"name\": \"Netherlands\",\n    \"capital\": \"Amsterdam\",\n    \"population\": 17441000,\n    \"languages\": [\"Dutch\", \"English\"],\n    \"eu_member\": True\n}\n\nwith open('country.json', 'w') as file:\n    json.dump(country_data, file, indent=2)\n\nprint(\"JSON file created\")\n\nJSON file created\n\n\n\n# Reading JSON data\ntry:\n    with open('country.json', 'r') as file:\n        data = json.load(file)\n        print(f\"Country: {data['name']}\")\n        print(f\"Capital: {data['capital']}\")\n        print(f\"Population: {data['population']:,}\")\n        print(f\"Languages: {', '.join(data['languages'])}\")\nexcept FileNotFoundError:\n    print(\"JSON file not found\")\nexcept json.JSONDecodeError:\n    print(\"Invalid JSON file\")\n\nCountry: Netherlands\nCapital: Amsterdam\nPopulation: 17,441,000\nLanguages: Dutch, English",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#file-path-operations",
    "href": "python-fundamentals/basics.html#file-path-operations",
    "title": "General Overview",
    "section": "File path operations",
    "text": "File path operations\n\nimport os\n\n# Check if file exists\nif os.path.exists('countries.txt'):\n    print(\"File exists\")\n    print(f\"File size: {os.path.getsize('countries.txt')} bytes\")\nelse:\n    print(\"File does not exist\")\n\n# Get file information\ntry:\n    stat_info = os.stat('countries.txt')\n    print(f\"Last modified: {stat_info.st_mtime}\")\nexcept FileNotFoundError:\n    print(\"File not found for stat\")\n\nFile exists\nFile size: 48 bytes\nLast modified: 1757795082.1025126\n\n\n\n# Working with directories\ncurrent_dir = os.getcwd()\nprint(f\"Current directory: {current_dir}\")\n\n# List files in directory\nfiles = os.listdir('.')\nprint(f\"Files in current directory: {files[:5]}\")  # Show first 5\n\n# Create directory\nos.makedirs('data_files', exist_ok=True)  # exist_ok prevents error if exists\nprint(\"Directory created or already exists\")\n\nCurrent directory: /Users/alexchisholm/teaching-python2/python-fundamentals\nFiles in current directory: ['basics.quarto_ipynb', 'bool_files', 'str.qmd', 'bool.qmd', 'number.qmd']\nDirectory created or already exists",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#basic-try-except",
    "href": "python-fundamentals/basics.html#basic-try-except",
    "title": "General Overview",
    "section": "Basic try-except",
    "text": "Basic try-except\n\ndef safe_divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Error: Cannot divide by zero\")\n        return None\n    except TypeError:\n        print(\"Error: Both arguments must be numbers\")\n        return None\n\n# Test the function\nprint(safe_divide(10, 2))\nprint(safe_divide(10, 0))\nprint(safe_divide(\"10\", 2))\n\n5.0\nError: Cannot divide by zero\nNone\nError: Both arguments must be numbers\nNone",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#multiple-exception-types",
    "href": "python-fundamentals/basics.html#multiple-exception-types",
    "title": "General Overview",
    "section": "Multiple exception types",
    "text": "Multiple exception types\n\ndef process_data_file(filename):\n    try:\n        with open(filename, 'r') as file:\n            data = json.load(file)\n            return data['values']\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found\")\n        return []\n    except json.JSONDecodeError as e:\n        print(f\"Error: Invalid JSON in file - {e}\")\n        return []\n    except KeyError as e:\n        print(f\"Error: Missing key {e} in JSON data\")\n        return []\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return []\n\n# Test with different scenarios\nresult = process_data_file('nonexistent.json')\nprint(f\"Result: {result}\")\n\nError: File 'nonexistent.json' not found\nResult: []",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#finally-clause-and-cleanup",
    "href": "python-fundamentals/basics.html#finally-clause-and-cleanup",
    "title": "General Overview",
    "section": "Finally clause and cleanup",
    "text": "Finally clause and cleanup\n\ndef process_file_with_cleanup(filename):\n    file_handle = None\n    try:\n        file_handle = open(filename, 'r')\n        content = file_handle.read()\n        # Process content here\n        return content\n    except FileNotFoundError:\n        print(f\"File {filename} not found\")\n        return None\n    finally:\n        if file_handle:\n            file_handle.close()\n            print(\"File closed in finally block\")\n\n# Better approach: using context manager (recommended)\ndef process_file_better(filename):\n    try:\n        with open(filename, 'r') as file:  # Automatically closes file\n            return file.read()\n    except FileNotFoundError:\n        print(f\"File {filename} not found\")\n        return None",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#custom-exceptions-for-data-validation",
    "href": "python-fundamentals/basics.html#custom-exceptions-for-data-validation",
    "title": "General Overview",
    "section": "Custom exceptions for data validation",
    "text": "Custom exceptions for data validation\n\nclass DataValidationError(Exception):\n    \"\"\"Custom exception for data validation errors\"\"\"\n    pass\n\ndef validate_age(age):\n    try:\n        age_int = int(age)\n        if age_int &lt; 0:\n            raise DataValidationError(\"Age cannot be negative\")\n        if age_int &gt; 150:\n            raise DataValidationError(\"Age seems unrealistic (&gt;150)\")\n        return age_int\n    except ValueError:\n        raise DataValidationError(f\"'{age}' is not a valid age\")\n\n# Test data validation\ntest_ages = [25, -5, \"thirty\", 200, \"25\"]\nfor age in test_ages:\n    try:\n        valid_age = validate_age(age)\n        print(f\"Valid age: {valid_age}\")\n    except DataValidationError as e:\n        print(f\"Invalid age '{age}': {e}\")\n\nValid age: 25\nInvalid age '-5': Age cannot be negative\nInvalid age 'thirty': 'thirty' is not a valid age\nInvalid age '200': Age seems unrealistic (&gt;150)\nValid age: 25",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/basics.html#simple-testing-with-assertions",
    "href": "python-fundamentals/basics.html#simple-testing-with-assertions",
    "title": "General Overview",
    "section": "Simple testing with assertions",
    "text": "Simple testing with assertions\n\ndef calculate_average(numbers):\n    \"\"\"Calculate the average of a list of numbers\"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\n# Test the function\ndef test_calculate_average():\n    # Test normal case\n    assert calculate_average([1, 2, 3, 4, 5]) == 3.0\n    \n    # Test empty list\n    assert calculate_average([]) == 0\n    \n    # Test single number\n    assert calculate_average([10]) == 10.0\n    \n    # Test negative numbers\n    assert calculate_average([-1, -2, -3]) == -2.0\n    \n    print(\"All tests passed!\")\n\ntest_calculate_average()\n\nAll tests passed!\n\n\n\n# Testing data cleaning functions\ndef clean_numeric_data(data):\n    \"\"\"Remove non-numeric values and convert to float\"\"\"\n    cleaned = []\n    for item in data:\n        try:\n            cleaned.append(float(item))\n        except (ValueError, TypeError):\n            continue  # Skip non-numeric values\n    return cleaned\n\ndef test_clean_numeric_data():\n    # Test mixed data\n    mixed_data = [1, \"2\", \"hello\", 3.5, None, \"4.7\", True]\n    result = clean_numeric_data(mixed_data)\n    expected = [1.0, 2.0, 3.5, 4.7, 1.0]  # True converts to 1.0\n    assert result == expected, f\"Expected {expected}, got {result}\"\n    \n    # Test empty list\n    assert clean_numeric_data([]) == []\n    \n    # Test all invalid data\n    assert clean_numeric_data([\"hello\", \"world\", None]) == []\n    \n    print(\"Data cleaning tests passed!\")\n\ntest_clean_numeric_data()\n\nData cleaning tests passed!",
    "crumbs": [
      "Python Fundamentals",
      "General Overview"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html",
    "href": "python-fundamentals/str.html",
    "title": "str Details",
    "section": "",
    "text": "Setup\ntarget_country = 'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#len",
    "href": "python-fundamentals/str.html#len",
    "title": "str Details",
    "section": "len()",
    "text": "len()\nReturns the length (number of characters) in the string.\n\nlen(target_country)\n\n11",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#str",
    "href": "python-fundamentals/str.html#str",
    "title": "str Details",
    "section": "str()",
    "text": "str()\nConverts object to string representation. This is redundant here since we already have a string, but useful when converting other data types.\n\nstr(target_country)\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#repr",
    "href": "python-fundamentals/str.html#repr",
    "title": "str Details",
    "section": "repr()",
    "text": "repr()\nReturns the “official” string representation showing quotes and escape characters. This is extremely useful for debugging to see exactly what’s in a string, including hidden characters.\n\nrepr(target_country)\n\n\"'Netherlands'\"",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#type",
    "href": "python-fundamentals/str.html#type",
    "title": "str Details",
    "section": "type()",
    "text": "type()\nReturns the type/class of the object.\n\ntype(target_country)\n\nstr",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#bool",
    "href": "python-fundamentals/str.html#bool",
    "title": "str Details",
    "section": "bool()",
    "text": "bool()\nReturns True for non-empty strings, False for empty strings. Used in conditional statements.\n\nbool(target_country)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#hash",
    "href": "python-fundamentals/str.html#hash",
    "title": "str Details",
    "section": "hash()",
    "text": "hash()\nReturns a hash value for the string, used internally by dictionaries and sets. The value varies between Python sessions for security reasons.\n\nhash(target_country)\n\n8973233828380520730",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#id",
    "href": "python-fundamentals/str.html#id",
    "title": "str Details",
    "section": "id()",
    "text": "id()\nReturns the memory address where the string is stored. Mainly used for debugging memory issues and understanding object identity.\n\nid(target_country)\n\n4388222128",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#upper",
    "href": "python-fundamentals/str.html#upper",
    "title": "str Details",
    "section": "upper()",
    "text": "upper()\n\ntarget_country.upper()\n\n'NETHERLANDS'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#lower",
    "href": "python-fundamentals/str.html#lower",
    "title": "str Details",
    "section": "lower()",
    "text": "lower()\n\ntarget_country.lower()\n\n'netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#title",
    "href": "python-fundamentals/str.html#title",
    "title": "str Details",
    "section": "title()",
    "text": "title()\nCapitalizes the first letter of each word.\n\ntarget_country.title()\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#capitalize",
    "href": "python-fundamentals/str.html#capitalize",
    "title": "str Details",
    "section": "capitalize()",
    "text": "capitalize()\nCapitalizes only the first letter of the entire string.\n\ntarget_country.capitalize()\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#swapcase",
    "href": "python-fundamentals/str.html#swapcase",
    "title": "str Details",
    "section": "swapcase()",
    "text": "swapcase()\nSwaps the case of all characters: uppercase becomes lowercase and vice versa.\n\ntarget_country.swapcase()\n\n'nETHERLANDS'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#casefold",
    "href": "python-fundamentals/str.html#casefold",
    "title": "str Details",
    "section": "casefold()",
    "text": "casefold()\nSimilar to lower() but more aggressive - handles special Unicode characters properly. This is the preferred method for case-insensitive comparisons.\n\ntarget_country.casefold()\n\n'netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isalpha",
    "href": "python-fundamentals/str.html#isalpha",
    "title": "str Details",
    "section": "isalpha()",
    "text": "isalpha()\nReturns True if all characters are alphabetic (a-z, A-Z).\n\ntarget_country.isalpha()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isdigit",
    "href": "python-fundamentals/str.html#isdigit",
    "title": "str Details",
    "section": "isdigit()",
    "text": "isdigit()\nReturns True if all characters are digits (0-9).\n\ntarget_country.isdigit()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isalnum",
    "href": "python-fundamentals/str.html#isalnum",
    "title": "str Details",
    "section": "isalnum()",
    "text": "isalnum()\nReturns True if all characters are alphanumeric (letters or digits).\n\ntarget_country.isalnum()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isupper",
    "href": "python-fundamentals/str.html#isupper",
    "title": "str Details",
    "section": "isupper()",
    "text": "isupper()\nReturns True if all cased characters are uppercase.\n\ntarget_country.isupper()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#islower",
    "href": "python-fundamentals/str.html#islower",
    "title": "str Details",
    "section": "islower()",
    "text": "islower()\nReturns True if all cased characters are lowercase.\n\ntarget_country.islower()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#istitle",
    "href": "python-fundamentals/str.html#istitle",
    "title": "str Details",
    "section": "istitle()",
    "text": "istitle()\nReturns True if string is in title case (first letter of each word capitalized).\n\ntarget_country.istitle()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isspace",
    "href": "python-fundamentals/str.html#isspace",
    "title": "str Details",
    "section": "isspace()",
    "text": "isspace()\nReturns True if string contains only whitespace characters.\n\ntarget_country.isspace()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isprintable",
    "href": "python-fundamentals/str.html#isprintable",
    "title": "str Details",
    "section": "isprintable()",
    "text": "isprintable()\nReturns True if all characters are printable (not control characters like \\n or \\t).\n\ntarget_country.isprintable()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isascii",
    "href": "python-fundamentals/str.html#isascii",
    "title": "str Details",
    "section": "isascii()",
    "text": "isascii()\nReturns True if all characters are ASCII (0-127 in Unicode). Useful for checking if text will display properly in ASCII-only contexts.\n\ntarget_country.isascii()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isdecimal",
    "href": "python-fundamentals/str.html#isdecimal",
    "title": "str Details",
    "section": "isdecimal()",
    "text": "isdecimal()\nReturns True if all characters are decimal digits (0-9). More restrictive than isdigit().\n\ntarget_country.isdecimal()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isnumeric",
    "href": "python-fundamentals/str.html#isnumeric",
    "title": "str Details",
    "section": "isnumeric()",
    "text": "isnumeric()\nReturns True if all characters are numeric, including digits, fractions, and superscripts. Most inclusive of the numeric checking methods.\n\ntarget_country.isnumeric()\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#isidentifier",
    "href": "python-fundamentals/str.html#isidentifier",
    "title": "str Details",
    "section": "isidentifier()",
    "text": "isidentifier()\nReturns True if string is a valid Python identifier (could be used as a variable name).\n\ntarget_country.isidentifier()\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#find",
    "href": "python-fundamentals/str.html#find",
    "title": "str Details",
    "section": "find()",
    "text": "find()\nFinds the first occurrence of substring and returns its index, or -1 if not found.\n\ntarget_country.find('land')\n\n6",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rfind",
    "href": "python-fundamentals/str.html#rfind",
    "title": "str Details",
    "section": "rfind()",
    "text": "rfind()\nFinds the last occurrence of substring and returns its index, or -1 if not found.\n\ntarget_country.rfind('e')\n\n4",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#index",
    "href": "python-fundamentals/str.html#index",
    "title": "str Details",
    "section": "index()",
    "text": "index()\nLike find() but raises a ValueError if substring is not found. Use when you’re certain the substring exists.\n\ntarget_country.index('land')\n\n6",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rindex",
    "href": "python-fundamentals/str.html#rindex",
    "title": "str Details",
    "section": "rindex()",
    "text": "rindex()\nLike rfind() but raises a ValueError if substring is not found.\n\ntarget_country.rindex('e')\n\n4",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#count",
    "href": "python-fundamentals/str.html#count",
    "title": "str Details",
    "section": "count()",
    "text": "count()\nCounts non-overlapping occurrences of substring.\n\ntarget_country.count('e')\n\n2",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#startswith",
    "href": "python-fundamentals/str.html#startswith",
    "title": "str Details",
    "section": "startswith()",
    "text": "startswith()\nReturns True if string starts with the specified prefix. Can also take a tuple of prefixes to check multiple options at once.\n\ntarget_country.startswith('Neth')\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#endswith",
    "href": "python-fundamentals/str.html#endswith",
    "title": "str Details",
    "section": "endswith()",
    "text": "endswith()\nReturns True if string ends with the specified suffix. Can also take a tuple of suffixes to check multiple options at once.\n\ntarget_country.endswith('lands')\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#split",
    "href": "python-fundamentals/str.html#split",
    "title": "str Details",
    "section": "split()",
    "text": "split()\nSplits string at each occurrence of separator and returns a list. Default separator is any whitespace.\n\ntarget_country.split('e')\n\n['N', 'th', 'rlands']",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rsplit",
    "href": "python-fundamentals/str.html#rsplit",
    "title": "str Details",
    "section": "rsplit()",
    "text": "rsplit()\nLike split() but starts from the right side. The second argument limits the number of splits.\n\ntarget_country.rsplit('e', 1)\n\n['Neth', 'rlands']",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#partition",
    "href": "python-fundamentals/str.html#partition",
    "title": "str Details",
    "section": "partition()",
    "text": "partition()\nSplits string into exactly 3 parts: before separator, separator itself, and after separator. If separator is not found, returns (original_string, ’‘,’’).\n\ntarget_country.partition('e')\n\n('N', 'e', 'therlands')",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rpartition",
    "href": "python-fundamentals/str.html#rpartition",
    "title": "str Details",
    "section": "rpartition()",
    "text": "rpartition()\nLike partition() but searches from the right side.\n\ntarget_country.rpartition('e')\n\n('Neth', 'e', 'rlands')",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#join",
    "href": "python-fundamentals/str.html#join",
    "title": "str Details",
    "section": "join()",
    "text": "join()\nJoins elements of an iterable with the string as separator. The string calling join() becomes the separator between elements.\n\n'-'.join(['N', 'e', 't', 'h'])\n\n'N-e-t-h'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#replace",
    "href": "python-fundamentals/str.html#replace",
    "title": "str Details",
    "section": "replace()",
    "text": "replace()\nReplaces all occurrences of old substring with new substring.\n\ntarget_country.replace('e', 'E')\n\n'NEthErlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#replace-with-count",
    "href": "python-fundamentals/str.html#replace-with-count",
    "title": "str Details",
    "section": "replace() with count",
    "text": "replace() with count\nThe third argument limits the number of replacements starting from the left.\n\ntarget_country.replace('e', 'E', 1)\n\n'NEtherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#translate",
    "href": "python-fundamentals/str.html#translate",
    "title": "str Details",
    "section": "translate()",
    "text": "translate()\nUses a translation table to replace characters. str.maketrans() creates the translation table. More efficient than multiple replace() calls.\n\ntarget_country.translate(str.maketrans('e', 'E'))\n\n'NEthErlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#center",
    "href": "python-fundamentals/str.html#center",
    "title": "str Details",
    "section": "center()",
    "text": "center()\nCenters string in a field of specified width, padding with spaces by default.\n\ntarget_country.center(15)\n\n'  Netherlands  '",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#center-with-fill-character",
    "href": "python-fundamentals/str.html#center-with-fill-character",
    "title": "str Details",
    "section": "center() with fill character",
    "text": "center() with fill character\nCenters string using a custom fill character.\n\ntarget_country.center(15, '-')\n\n'--Netherlands--'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#ljust",
    "href": "python-fundamentals/str.html#ljust",
    "title": "str Details",
    "section": "ljust()",
    "text": "ljust()\nLeft-justifies string in a field of specified width.\n\ntarget_country.ljust(15)\n\n'Netherlands    '",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#ljust-with-fill-character",
    "href": "python-fundamentals/str.html#ljust-with-fill-character",
    "title": "str Details",
    "section": "ljust() with fill character",
    "text": "ljust() with fill character\nLeft-justifies string with a custom fill character.\n\ntarget_country.ljust(15, '-')\n\n'Netherlands----'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rjust",
    "href": "python-fundamentals/str.html#rjust",
    "title": "str Details",
    "section": "rjust()",
    "text": "rjust()\nRight-justifies string in a field of specified width.\n\ntarget_country.rjust(15)\n\n'    Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rjust-with-fill-character",
    "href": "python-fundamentals/str.html#rjust-with-fill-character",
    "title": "str Details",
    "section": "rjust() with fill character",
    "text": "rjust() with fill character\nRight-justifies string with a custom fill character.\n\ntarget_country.rjust(15, '-')\n\n'----Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#zfill",
    "href": "python-fundamentals/str.html#zfill",
    "title": "str Details",
    "section": "zfill()",
    "text": "zfill()\nPads string with zeros on the left to specified width. Particularly useful for formatting numbers with leading zeros.\n\ntarget_country.zfill(15)\n\n'0000Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#strip",
    "href": "python-fundamentals/str.html#strip",
    "title": "str Details",
    "section": "strip()",
    "text": "strip()\nRemoves leading and trailing whitespace (spaces, tabs, newlines). Can specify custom characters to remove with strip('.,!?').\n\n(' ' + target_country + ' ').strip()\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#lstrip",
    "href": "python-fundamentals/str.html#lstrip",
    "title": "str Details",
    "section": "lstrip()",
    "text": "lstrip()\nRemoves only leading (left) whitespace.\n\n(' ' + target_country + ' ').lstrip()\n\n'Netherlands '",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#rstrip",
    "href": "python-fundamentals/str.html#rstrip",
    "title": "str Details",
    "section": "rstrip()",
    "text": "rstrip()\nRemoves only trailing (right) whitespace.\n\n(' ' + target_country + ' ').rstrip()\n\n' Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#removeprefix",
    "href": "python-fundamentals/str.html#removeprefix",
    "title": "str Details",
    "section": "removeprefix()",
    "text": "removeprefix()\nRemoves specified prefix if present (Python 3.9+). Returns original string if prefix is not found.\n\ntarget_country.removeprefix('Neth')\n\n'erlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#removesuffix",
    "href": "python-fundamentals/str.html#removesuffix",
    "title": "str Details",
    "section": "removesuffix()",
    "text": "removesuffix()\nRemoves specified suffix if present (Python 3.9+). Returns original string if suffix is not found.\n\ntarget_country.removesuffix('lands')\n\n'Nether'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#encode-with-utf-8",
    "href": "python-fundamentals/str.html#encode-with-utf-8",
    "title": "str Details",
    "section": "encode() with UTF-8",
    "text": "encode() with UTF-8\nEncodes string to bytes using specified encoding. Returns a bytes object (shown with b'...' prefix).\n\ntarget_country.encode('utf-8')\n\nb'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#encode-with-ascii",
    "href": "python-fundamentals/str.html#encode-with-ascii",
    "title": "str Details",
    "section": "encode() with ASCII",
    "text": "encode() with ASCII\nEncodes using ASCII. This will fail if any non-ASCII characters are present in the string.\n\ntarget_country.encode('ascii')\n\nb'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#character-access-by-index",
    "href": "python-fundamentals/str.html#character-access-by-index",
    "title": "str Details",
    "section": "Character access by index",
    "text": "Character access by index\nGets character at specific index using 0-based indexing.\n\ntarget_country[0]\n\n'N'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#negative-indexing",
    "href": "python-fundamentals/str.html#negative-indexing",
    "title": "str Details",
    "section": "Negative indexing",
    "text": "Negative indexing\nNegative indexing starts from the end of the string.\n\ntarget_country[-1]\n\n's'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#basic-slicing",
    "href": "python-fundamentals/str.html#basic-slicing",
    "title": "str Details",
    "section": "Basic slicing",
    "text": "Basic slicing\nSlicing uses [start:end] syntax where end is not included.\n\ntarget_country[1:5]\n\n'ethe'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#slice-from-beginning",
    "href": "python-fundamentals/str.html#slice-from-beginning",
    "title": "str Details",
    "section": "Slice from beginning",
    "text": "Slice from beginning\nSlice from beginning to index 4.\n\ntarget_country[:4]\n\n'Neth'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#slice-to-end",
    "href": "python-fundamentals/str.html#slice-to-end",
    "title": "str Details",
    "section": "Slice to end",
    "text": "Slice to end\nSlice from index 6 to the end.\n\ntarget_country[6:]\n\n'lands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#step-slicing",
    "href": "python-fundamentals/str.html#step-slicing",
    "title": "str Details",
    "section": "Step slicing",
    "text": "Step slicing\nStep slicing uses [start:end:step] - here we get every 2nd character.\n\ntarget_country[::2]\n\n'Ntelns'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#reverse-string",
    "href": "python-fundamentals/str.html#reverse-string",
    "title": "str Details",
    "section": "Reverse string",
    "text": "Reverse string\nReverse string using negative step.\n\ntarget_country[::-1]\n\n'sdnalrehteN'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#format-method",
    "href": "python-fundamentals/str.html#format-method",
    "title": "str Details",
    "section": "format() method",
    "text": "format() method\nOld-style string formatting with .format() method. Curly braces {} are placeholders for values.\n\n'Country: {}'.format(target_country)\n\n'Country: Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#f-strings",
    "href": "python-fundamentals/str.html#f-strings",
    "title": "str Details",
    "section": "f-strings",
    "text": "f-strings\nF-string (formatted string literal) introduced in Python 3.6+. This is the most readable and efficient way to format strings.\n\nf'Country: {target_country}'\n\n'Country: Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#formatting",
    "href": "python-fundamentals/str.html#formatting",
    "title": "str Details",
    "section": "% formatting",
    "text": "% formatting\nVery old-style string formatting with % operator. %s means “string”, %d means “integer”, %f means “float”.\n\n'Country: %s' % target_country\n\n'Country: Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#numbered-placeholders",
    "href": "python-fundamentals/str.html#numbered-placeholders",
    "title": "str Details",
    "section": "Numbered placeholders",
    "text": "Numbered placeholders\nNumbered placeholders in .format(). {0} refers to first argument, {1} to second, etc.\n\n'{0} has {1} letters'.format(target_country, len(target_country))\n\n'Netherlands has 11 letters'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#import-re-module",
    "href": "python-fundamentals/str.html#import-re-module",
    "title": "str Details",
    "section": "Import re module",
    "text": "Import re module\n\nimport re",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#re.search",
    "href": "python-fundamentals/str.html#re.search",
    "title": "str Details",
    "section": "re.search()",
    "text": "re.search()\nSearches for pattern in string and returns a Match object or None. The r'...' syntax creates a raw string where backslashes are not treated as escape characters.\n\nre.search(r'land', target_country)\n\n&lt;re.Match object; span=(6, 10), match='land'&gt;",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#re.findall",
    "href": "python-fundamentals/str.html#re.findall",
    "title": "str Details",
    "section": "re.findall()",
    "text": "re.findall()\nFinds all non-overlapping matches of pattern. [aeiou] matches any single vowel.\n\nre.findall(r'[aeiou]', target_country)\n\n['e', 'e', 'a']",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#re.sub",
    "href": "python-fundamentals/str.html#re.sub",
    "title": "str Details",
    "section": "re.sub()",
    "text": "re.sub()\nSubstitutes pattern with replacement string. Returns a new string (original is unchanged).\n\nre.sub(r'e', 'E', target_country)\n\n'NEthErlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#re.split",
    "href": "python-fundamentals/str.html#re.split",
    "title": "str Details",
    "section": "re.split()",
    "text": "re.split()\nSplits string by pattern, similar to str.split() but using regular expressions.\n\nre.split(r'e', target_country)\n\n['N', 'th', 'rlands']",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#import-string-module",
    "href": "python-fundamentals/str.html#import-string-module",
    "title": "str Details",
    "section": "Import string module",
    "text": "Import string module\n\nimport string",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#string.ascii_letters-membership",
    "href": "python-fundamentals/str.html#string.ascii_letters-membership",
    "title": "str Details",
    "section": "string.ascii_letters membership",
    "text": "string.ascii_letters membership\nChecks if the entire string is contained in the ascii_letters constant. Note: this checks if the string itself is a subset, not individual characters.\n\ntarget_country in string.ascii_letters\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#character-by-character-checking",
    "href": "python-fundamentals/str.html#character-by-character-checking",
    "title": "str Details",
    "section": "Character-by-character checking",
    "text": "Character-by-character checking\nChecks if ALL characters in string are letters using the all() function with a generator expression.\n\nall(c in string.ascii_letters for c in target_country)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#string.capwords",
    "href": "python-fundamentals/str.html#string.capwords",
    "title": "str Details",
    "section": "string.capwords()",
    "text": "string.capwords()\nCapitalizes words separated by whitespace. More sophisticated than title() for handling apostrophes and other punctuation.\n\nstring.capwords(target_country)\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#substring-membership",
    "href": "python-fundamentals/str.html#substring-membership",
    "title": "str Details",
    "section": "Substring membership",
    "text": "Substring membership\nTests if substring exists anywhere in the string.\n\n'land' in target_country\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#character-membership",
    "href": "python-fundamentals/str.html#character-membership",
    "title": "str Details",
    "section": "Character membership",
    "text": "Character membership\nTests if a character exists in the string.\n\n'x' in target_country\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#negative-membership",
    "href": "python-fundamentals/str.html#negative-membership",
    "title": "str Details",
    "section": "Negative membership",
    "text": "Negative membership\nTests if substring does NOT exist in string using explicit negation.\n\n'land' not in target_country\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#convert-to-list",
    "href": "python-fundamentals/str.html#convert-to-list",
    "title": "str Details",
    "section": "Convert to list",
    "text": "Convert to list\nConverts string to a list of individual characters.\n\nlist(target_country)\n\n['N', 'e', 't', 'h', 'e', 'r', 'l', 'a', 'n', 'd', 's']",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#convert-to-tuple",
    "href": "python-fundamentals/str.html#convert-to-tuple",
    "title": "str Details",
    "section": "Convert to tuple",
    "text": "Convert to tuple\nConverts string to a tuple of individual characters.\n\ntuple(target_country)\n\n('N', 'e', 't', 'h', 'e', 'r', 'l', 'a', 'n', 'd', 's')",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#convert-to-set",
    "href": "python-fundamentals/str.html#convert-to-set",
    "title": "str Details",
    "section": "Convert to set",
    "text": "Convert to set\nConverts string to a set of unique characters (unordered collection).\n\nset(target_country)\n\n{'N', 'a', 'd', 'e', 'h', 'l', 'n', 'r', 's', 't'}",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#equality-comparison",
    "href": "python-fundamentals/str.html#equality-comparison",
    "title": "str Details",
    "section": "Equality comparison",
    "text": "Equality comparison\nCase-sensitive equality comparison.\n\ntarget_country == 'Netherlands'\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#inequality-comparison",
    "href": "python-fundamentals/str.html#inequality-comparison",
    "title": "str Details",
    "section": "Inequality comparison",
    "text": "Inequality comparison\n\ntarget_country != 'Belgium'\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#lexicographic-less-than",
    "href": "python-fundamentals/str.html#lexicographic-less-than",
    "title": "str Details",
    "section": "Lexicographic less than",
    "text": "Lexicographic less than\nLexicographic comparison (dictionary order) comparing ASCII/Unicode values character by character.\n\ntarget_country &lt; 'Norway'\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#lexicographic-greater-than",
    "href": "python-fundamentals/str.html#lexicographic-greater-than",
    "title": "str Details",
    "section": "Lexicographic greater than",
    "text": "Lexicographic greater than\n\ntarget_country &gt; 'Germany'\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#multiple-prefix-checking",
    "href": "python-fundamentals/str.html#multiple-prefix-checking",
    "title": "str Details",
    "section": "Multiple prefix checking",
    "text": "Multiple prefix checking\nCan check multiple prefixes at once using a tuple.\n\ntarget_country.startswith(('N', 'B'))\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/str.html#multiple-suffix-checking",
    "href": "python-fundamentals/str.html#multiple-suffix-checking",
    "title": "str Details",
    "section": "Multiple suffix checking",
    "text": "Multiple suffix checking\nCan check multiple suffixes at once using a tuple.\n\ntarget_country.endswith(('lands', 'mark'))\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "str Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html",
    "href": "python-fundamentals/number.html",
    "title": "number Details",
    "section": "",
    "text": "Setup\ngdp_capita = 65000\ngdp_capita_float = 65000.0\nprint(f\"Working with integer: {gdp_capita}\")\nprint(f\"Working with float: {gdp_capita_float}\")\n\nWorking with integer: 65000\nWorking with float: 65000.0",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#len",
    "href": "python-fundamentals/number.html#len",
    "title": "number Details",
    "section": "len()",
    "text": "len()\nThis function doesn’t work with integers - it’s only for sequences and collections.\n\n# This would raise a TypeError\n# len(gdp_capita)\nprint(\"len() doesn't work with integers\")\n\nlen() doesn't work with integers",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#str",
    "href": "python-fundamentals/number.html#str",
    "title": "number Details",
    "section": "str()",
    "text": "str()\nConverts the integer to its string representation.\n\nstr(gdp_capita)\n\n'65000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#repr",
    "href": "python-fundamentals/number.html#repr",
    "title": "number Details",
    "section": "repr()",
    "text": "repr()\nReturns the “official” string representation. For integers, this is identical to str().\n\nrepr(gdp_capita)\n\n'65000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#type",
    "href": "python-fundamentals/number.html#type",
    "title": "number Details",
    "section": "type()",
    "text": "type()\nReturns the type/class of the object.\n\ntype(gdp_capita)\n\nint",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bool",
    "href": "python-fundamentals/number.html#bool",
    "title": "number Details",
    "section": "bool()",
    "text": "bool()\nReturns False for zero, True for any non-zero integer.\n\nbool(gdp_capita)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bool-with-zero",
    "href": "python-fundamentals/number.html#bool-with-zero",
    "title": "number Details",
    "section": "bool() with zero",
    "text": "bool() with zero\n\nbool(0)\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#hash",
    "href": "python-fundamentals/number.html#hash",
    "title": "number Details",
    "section": "hash()",
    "text": "hash()\nReturns a hash value for the integer. Unlike strings, integer hash values are predictable and consistent.\n\nhash(gdp_capita)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#id",
    "href": "python-fundamentals/number.html#id",
    "title": "number Details",
    "section": "id()",
    "text": "id()\nReturns the memory address where the integer object is stored. Small integers (-5 to 256) are cached and reused in Python.\n\nid(gdp_capita)\n\n4399023792",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#abs",
    "href": "python-fundamentals/number.html#abs",
    "title": "number Details",
    "section": "abs()",
    "text": "abs()\nReturns the absolute value of the integer.\n\nabs(gdp_capita)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#abs-with-negative",
    "href": "python-fundamentals/number.html#abs-with-negative",
    "title": "number Details",
    "section": "abs() with negative",
    "text": "abs() with negative\n\nabs(-gdp_capita)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#int",
    "href": "python-fundamentals/number.html#int",
    "title": "number Details",
    "section": "int()",
    "text": "int()\nConverts to integer (redundant here, but useful for converting other types).\n\nint(gdp_capita)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#float",
    "href": "python-fundamentals/number.html#float",
    "title": "number Details",
    "section": "float()",
    "text": "float()\nConverts integer to floating-point number.\n\nfloat(gdp_capita)\n\n65000.0",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#complex",
    "href": "python-fundamentals/number.html#complex",
    "title": "number Details",
    "section": "complex()",
    "text": "complex()\nConverts integer to complex number (real part = integer, imaginary part = 0).\n\ncomplex(gdp_capita)\n\n(65000+0j)",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#basic-arithmetic",
    "href": "python-fundamentals/number.html#basic-arithmetic",
    "title": "number Details",
    "section": "Basic arithmetic",
    "text": "Basic arithmetic\n\ngdp_capita + 5000  # Addition\n\n70000\n\n\n\ngdp_capita - 10000  # Subtraction\n\n55000\n\n\n\ngdp_capita * 2  # Multiplication\n\n130000\n\n\n\ngdp_capita / 2  # Division (returns float)\n\n32500.0",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#floor-division",
    "href": "python-fundamentals/number.html#floor-division",
    "title": "number Details",
    "section": "Floor division",
    "text": "Floor division\nReturns the largest integer less than or equal to the division result.\n\ngdp_capita // 3  # Floor division\n\n21666",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#modulo",
    "href": "python-fundamentals/number.html#modulo",
    "title": "number Details",
    "section": "Modulo",
    "text": "Modulo\nReturns the remainder after division.\n\ngdp_capita % 7  # Modulo\n\n5",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#exponentiation",
    "href": "python-fundamentals/number.html#exponentiation",
    "title": "number Details",
    "section": "Exponentiation",
    "text": "Exponentiation\n\ngdp_capita ** 2  # Exponentiation\n\n4225000000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#divmod",
    "href": "python-fundamentals/number.html#divmod",
    "title": "number Details",
    "section": "divmod()",
    "text": "divmod()\nReturns both quotient and remainder as a tuple.\n\ndivmod(gdp_capita, 7)\n\n(9285, 5)",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#pow",
    "href": "python-fundamentals/number.html#pow",
    "title": "number Details",
    "section": "pow()",
    "text": "pow()\nRaises number to a power. Third argument provides modulo operation.\n\npow(gdp_capita, 2)\n\n4225000000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#pow-with-modulo",
    "href": "python-fundamentals/number.html#pow-with-modulo",
    "title": "number Details",
    "section": "pow() with modulo",
    "text": "pow() with modulo\nMore efficient than (base ** exp) % mod for large numbers.\n\npow(gdp_capita, 2, 1000)  # (65000^2) % 1000\n\n0",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#equality",
    "href": "python-fundamentals/number.html#equality",
    "title": "number Details",
    "section": "Equality",
    "text": "Equality\n\ngdp_capita == 65000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#inequality",
    "href": "python-fundamentals/number.html#inequality",
    "title": "number Details",
    "section": "Inequality",
    "text": "Inequality\n\ngdp_capita != 50000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#less-than",
    "href": "python-fundamentals/number.html#less-than",
    "title": "number Details",
    "section": "Less than",
    "text": "Less than\n\ngdp_capita &lt; 70000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#greater-than",
    "href": "python-fundamentals/number.html#greater-than",
    "title": "number Details",
    "section": "Greater than",
    "text": "Greater than\n\ngdp_capita &gt; 60000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#less-than-or-equal",
    "href": "python-fundamentals/number.html#less-than-or-equal",
    "title": "number Details",
    "section": "Less than or equal",
    "text": "Less than or equal\n\ngdp_capita &lt;= 65000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#greater-than-or-equal",
    "href": "python-fundamentals/number.html#greater-than-or-equal",
    "title": "number Details",
    "section": "Greater than or equal",
    "text": "Greater than or equal\n\ngdp_capita &gt;= 65000\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#binary-representation",
    "href": "python-fundamentals/number.html#binary-representation",
    "title": "number Details",
    "section": "Binary representation",
    "text": "Binary representation\n\nbin(gdp_capita)\n\n'0b1111110111101000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#hexadecimal-representation",
    "href": "python-fundamentals/number.html#hexadecimal-representation",
    "title": "number Details",
    "section": "Hexadecimal representation",
    "text": "Hexadecimal representation\n\nhex(gdp_capita)\n\n'0xfde8'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#octal-representation",
    "href": "python-fundamentals/number.html#octal-representation",
    "title": "number Details",
    "section": "Octal representation",
    "text": "Octal representation\n\noct(gdp_capita)\n\n'0o176750'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bitwise-and",
    "href": "python-fundamentals/number.html#bitwise-and",
    "title": "number Details",
    "section": "Bitwise AND",
    "text": "Bitwise AND\n\ngdp_capita & 255  # AND with 255 (gets last 8 bits)\n\n232",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bitwise-or",
    "href": "python-fundamentals/number.html#bitwise-or",
    "title": "number Details",
    "section": "Bitwise OR",
    "text": "Bitwise OR\n\ngdp_capita | 15  # OR with 15\n\n65007",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bitwise-xor",
    "href": "python-fundamentals/number.html#bitwise-xor",
    "title": "number Details",
    "section": "Bitwise XOR",
    "text": "Bitwise XOR\n\ngdp_capita ^ 100  # XOR with 100\n\n64908",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bitwise-not",
    "href": "python-fundamentals/number.html#bitwise-not",
    "title": "number Details",
    "section": "Bitwise NOT",
    "text": "Bitwise NOT\nReturns the bitwise complement (inverts all bits).\n\n~gdp_capita\n\n-65001",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#left-shift",
    "href": "python-fundamentals/number.html#left-shift",
    "title": "number Details",
    "section": "Left shift",
    "text": "Left shift\nShifts bits left (equivalent to multiplying by 2^n).\n\ngdp_capita &lt;&lt; 2  # Shift left by 2 positions\n\n260000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#right-shift",
    "href": "python-fundamentals/number.html#right-shift",
    "title": "number Details",
    "section": "Right shift",
    "text": "Right shift\nShifts bits right (equivalent to integer division by 2^n).\n\ngdp_capita &gt;&gt; 3  # Shift right by 3 positions\n\n8125",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bit_length",
    "href": "python-fundamentals/number.html#bit_length",
    "title": "number Details",
    "section": "bit_length()",
    "text": "bit_length()\nReturns the number of bits required to represent the integer in base 2.\n\ngdp_capita.bit_length()\n\n16",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#bit_count",
    "href": "python-fundamentals/number.html#bit_count",
    "title": "number Details",
    "section": "bit_count()",
    "text": "bit_count()\nReturns the number of 1-bits in the binary representation (Python 3.10+).\n\ngdp_capita.bit_count()\n\n11",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#to_bytes",
    "href": "python-fundamentals/number.html#to_bytes",
    "title": "number Details",
    "section": "to_bytes()",
    "text": "to_bytes()\nConverts integer to bytes representation. Requires length and byte order.\n\ngdp_capita.to_bytes(4, 'big')  # 4 bytes, big-endian\n\nb'\\x00\\x00\\xfd\\xe8'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#to_bytes-little-endian",
    "href": "python-fundamentals/number.html#to_bytes-little-endian",
    "title": "number Details",
    "section": "to_bytes() little endian",
    "text": "to_bytes() little endian\n\ngdp_capita.to_bytes(4, 'little')  # 4 bytes, little-endian\n\nb'\\xe8\\xfd\\x00\\x00'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#from_bytes",
    "href": "python-fundamentals/number.html#from_bytes",
    "title": "number Details",
    "section": "from_bytes()",
    "text": "from_bytes()\nClass method that creates integer from bytes (demonstrates the reverse operation).\n\nint.from_bytes(b'\\x00\\x00\\xfd\\xe8', 'big')\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#string-formatting-with-f-strings",
    "href": "python-fundamentals/number.html#string-formatting-with-f-strings",
    "title": "number Details",
    "section": "String formatting with f-strings",
    "text": "String formatting with f-strings\n\nf\"GDP per capita: ${gdp_capita:,}\"  # Thousands separator\n\n'GDP per capita: $65,000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#string-formatting-with-format",
    "href": "python-fundamentals/number.html#string-formatting-with-format",
    "title": "number Details",
    "section": "String formatting with format()",
    "text": "String formatting with format()\n\n\"GDP per capita: ${:,}\".format(gdp_capita)\n\n'GDP per capita: $65,000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#binary-formatting",
    "href": "python-fundamentals/number.html#binary-formatting",
    "title": "number Details",
    "section": "Binary formatting",
    "text": "Binary formatting\n\nf\"Binary: {gdp_capita:b}\"\n\n'Binary: 1111110111101000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#hexadecimal-formatting",
    "href": "python-fundamentals/number.html#hexadecimal-formatting",
    "title": "number Details",
    "section": "Hexadecimal formatting",
    "text": "Hexadecimal formatting\n\nf\"Hex: {gdp_capita:x}\"\n\n'Hex: fde8'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#zero-padded-formatting",
    "href": "python-fundamentals/number.html#zero-padded-formatting",
    "title": "number Details",
    "section": "Zero-padded formatting",
    "text": "Zero-padded formatting\n\nf\"Zero-padded: {gdp_capita:08d}\"\n\n'Zero-padded: 00065000'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.sqrt",
    "href": "python-fundamentals/number.html#math.sqrt",
    "title": "number Details",
    "section": "math.sqrt()",
    "text": "math.sqrt()\nReturns the square root as a float.\n\nmath.sqrt(gdp_capita)\n\n254.95097567963924",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.log",
    "href": "python-fundamentals/number.html#math.log",
    "title": "number Details",
    "section": "math.log()",
    "text": "math.log()\nReturns the natural logarithm.\n\nmath.log(gdp_capita)\n\n11.082142548877775",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.log10",
    "href": "python-fundamentals/number.html#math.log10",
    "title": "number Details",
    "section": "math.log10()",
    "text": "math.log10()\nReturns the base-10 logarithm.\n\nmath.log10(gdp_capita)\n\n4.812913356642856",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.factorial",
    "href": "python-fundamentals/number.html#math.factorial",
    "title": "number Details",
    "section": "math.factorial()",
    "text": "math.factorial()\nReturns the factorial. Only works with non-negative integers.\n\nmath.factorial(10)  # Using smaller number for readability\n\n3628800",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.gcd",
    "href": "python-fundamentals/number.html#math.gcd",
    "title": "number Details",
    "section": "math.gcd()",
    "text": "math.gcd()\nReturns the greatest common divisor of two integers.\n\nmath.gcd(gdp_capita, 1000)\n\n1000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#math.lcm",
    "href": "python-fundamentals/number.html#math.lcm",
    "title": "number Details",
    "section": "math.lcm()",
    "text": "math.lcm()\nReturns the least common multiple (Python 3.9+).\n\nmath.lcm(gdp_capita, 1000)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#isinstance-with-int",
    "href": "python-fundamentals/number.html#isinstance-with-int",
    "title": "number Details",
    "section": "isinstance() with int",
    "text": "isinstance() with int\nChecks if object is an instance of integer type.\n\nisinstance(gdp_capita, int)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#isinstance-with-multiple-types",
    "href": "python-fundamentals/number.html#isinstance-with-multiple-types",
    "title": "number Details",
    "section": "isinstance() with multiple types",
    "text": "isinstance() with multiple types\nCan check against multiple types using a tuple.\n\nisinstance(gdp_capita, (int, float))\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#round",
    "href": "python-fundamentals/number.html#round",
    "title": "number Details",
    "section": "round()",
    "text": "round()\nFor integers, round() returns the same value but as an integer type.\n\nround(gdp_capita)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#round-with-decimal-places",
    "href": "python-fundamentals/number.html#round-with-decimal-places",
    "title": "number Details",
    "section": "round() with decimal places",
    "text": "round() with decimal places\nEven with decimal places specified, integer input returns integer.\n\nround(gdp_capita, 2)\n\n65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#type-comparison",
    "href": "python-fundamentals/number.html#type-comparison",
    "title": "number Details",
    "section": "Type comparison",
    "text": "Type comparison\n\nprint(f\"Integer type: {type(gdp_capita)}\")\nprint(f\"Float type: {type(gdp_capita_float)}\")\n\nInteger type: &lt;class 'int'&gt;\nFloat type: &lt;class 'float'&gt;",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#memory-representation",
    "href": "python-fundamentals/number.html#memory-representation",
    "title": "number Details",
    "section": "Memory representation",
    "text": "Memory representation\nIntegers and floats are stored differently in memory.\n\nprint(f\"Integer id: {id(gdp_capita)}\")\nprint(f\"Float id: {id(gdp_capita_float)}\")\n\nInteger id: 4399023792\nFloat id: 4399023056",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#equality-despite-different-types",
    "href": "python-fundamentals/number.html#equality-despite-different-types",
    "title": "number Details",
    "section": "Equality despite different types",
    "text": "Equality despite different types\nPython allows comparison between int and float when values are equal.\n\ngdp_capita == gdp_capita_float\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#type-specific-behavior-division",
    "href": "python-fundamentals/number.html#type-specific-behavior-division",
    "title": "number Details",
    "section": "Type-specific behavior: Division",
    "text": "Type-specific behavior: Division\nInteger division vs float division can produce different types.\n\nprint(f\"Int / Int: {gdp_capita / 2} (type: {type(gdp_capita / 2)})\")\nprint(f\"Float / Float: {gdp_capita_float / 2.0} (type: {type(gdp_capita_float / 2.0)})\")\n\nInt / Int: 32500.0 (type: &lt;class 'float'&gt;)\nFloat / Float: 32500.0 (type: &lt;class 'float'&gt;)",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#type-specific-behavior-floor-division",
    "href": "python-fundamentals/number.html#type-specific-behavior-floor-division",
    "title": "number Details",
    "section": "Type-specific behavior: Floor division",
    "text": "Type-specific behavior: Floor division\nFloor division behavior differs between int and float.\n\nprint(f\"Int // Int: {gdp_capita // 3} (type: {type(gdp_capita // 3)})\")\nprint(f\"Float // Float: {gdp_capita_float // 3.0} (type: {type(gdp_capita_float // 3.0)})\")\n\nInt // Int: 21666 (type: &lt;class 'int'&gt;)\nFloat // Float: 21666.0 (type: &lt;class 'float'&gt;)",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#precision-differences",
    "href": "python-fundamentals/number.html#precision-differences",
    "title": "number Details",
    "section": "Precision differences",
    "text": "Precision differences\nFloats have limited precision, while integers have arbitrary precision.\n\nlarge_int = 99999999999999999999999999999999999999\nlarge_float = 99999999999999999999999999999999999999.0\nprint(f\"Large integer: {large_int}\")\nprint(f\"Large float: {large_float}\")\n\nLarge integer: 99999999999999999999999999999999999999\nLarge float: 1e+38",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#scientific-notation",
    "href": "python-fundamentals/number.html#scientific-notation",
    "title": "number Details",
    "section": "Scientific notation",
    "text": "Scientific notation\nOnly floats display in scientific notation for very large numbers.\n\nvery_large_float = float(10**20)\nvery_large_int = 10**20\nprint(f\"Large float: {very_large_float}\")\nprint(f\"Large int: {very_large_int}\")\n\nLarge float: 1e+20\nLarge int: 100000000000000000000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#is-vs-comparison",
    "href": "python-fundamentals/number.html#is-vs-comparison",
    "title": "number Details",
    "section": "is vs == comparison",
    "text": "is vs == comparison\nIdentity vs equality comparison shows they’re different objects.\n\nprint(f\"gdp_capita == gdp_capita_float: {gdp_capita == gdp_capita_float}\")\nprint(f\"gdp_capita is gdp_capita_float: {gdp_capita is gdp_capita_float}\")\n\ngdp_capita == gdp_capita_float: True\ngdp_capita is gdp_capita_float: False",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#hash-values",
    "href": "python-fundamentals/number.html#hash-values",
    "title": "number Details",
    "section": "Hash values",
    "text": "Hash values\nIntegers and equivalent floats have the same hash value for dictionary/set compatibility.\n\nprint(f\"hash(gdp_capita): {hash(gdp_capita)}\")\nprint(f\"hash(gdp_capita_float): {hash(gdp_capita_float)}\")\n\nhash(gdp_capita): 65000\nhash(gdp_capita_float): 65000",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#method-availability",
    "href": "python-fundamentals/number.html#method-availability",
    "title": "number Details",
    "section": "Method availability",
    "text": "Method availability\nSome methods are specific to integers or floats.\n\nprint(f\"Integer has bit_length(): {hasattr(gdp_capita, 'bit_length')}\")\nprint(f\"Float has bit_length(): {hasattr(gdp_capita_float, 'bit_length')}\")\nprint(f\"Float has is_integer(): {hasattr(gdp_capita_float, 'is_integer')}\")\nprint(f\"Integer has is_integer(): {hasattr(gdp_capita, 'is_integer')}\")\n\nInteger has bit_length(): True\nFloat has bit_length(): False\nFloat has is_integer(): True\nInteger has is_integer(): True",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#float-specific-methods",
    "href": "python-fundamentals/number.html#float-specific-methods",
    "title": "number Details",
    "section": "Float-specific methods",
    "text": "Float-specific methods\n\nprint(f\"Is the float an integer value? {gdp_capita_float.is_integer()}\")\nprint(f\"Float as integer ratio: {gdp_capita_float.as_integer_ratio()}\")\n\nIs the float an integer value? True\nFloat as integer ratio: (65000, 1)",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#range",
    "href": "python-fundamentals/number.html#range",
    "title": "number Details",
    "section": "range()",
    "text": "range()\nCreates a sequence of integers. Often used in loops.\n\nlist(range(5))  # 0 to 4\n\n[0, 1, 2, 3, 4]",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#range-with-start-and-stop",
    "href": "python-fundamentals/number.html#range-with-start-and-stop",
    "title": "number Details",
    "section": "range() with start and stop",
    "text": "range() with start and stop\n\nlist(range(gdp_capita, gdp_capita + 5))\n\n[65000, 65001, 65002, 65003, 65004]",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#membership-in-ranges",
    "href": "python-fundamentals/number.html#membership-in-ranges",
    "title": "number Details",
    "section": "Membership in ranges",
    "text": "Membership in ranges\n\ngdp_capita in range(60000, 70000)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#list-indexing",
    "href": "python-fundamentals/number.html#list-indexing",
    "title": "number Details",
    "section": "List indexing",
    "text": "List indexing\nIntegers are used as indices for sequences.\n\ncountries = ['USA', 'Germany', 'Japan', 'Netherlands']\nindex = 3\ncountries[index]\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/number.html#dictionary-keys",
    "href": "python-fundamentals/number.html#dictionary-keys",
    "title": "number Details",
    "section": "Dictionary keys",
    "text": "Dictionary keys\nIntegers can be used as dictionary keys.\n\ngdp_data = {gdp_capita: 'Netherlands', 50000: 'Germany', 70000: 'USA'}\ngdp_data[gdp_capita]\n\n'Netherlands'",
    "crumbs": [
      "Python Fundamentals",
      "number Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html",
    "href": "python-fundamentals/bool.html",
    "title": "bool Details",
    "section": "",
    "text": "Setup\neuro = True\nnot_euro = False\nprint(f\"Working with boolean True: {euro}\")\nprint(f\"Working with boolean False: {not_euro}\")\n\nWorking with boolean True: True\nWorking with boolean False: False",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#str",
    "href": "python-fundamentals/bool.html#str",
    "title": "bool Details",
    "section": "str()",
    "text": "str()\nConverts the boolean to its string representation.\n\nstr(euro)\n\n'True'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#str-with-false",
    "href": "python-fundamentals/bool.html#str-with-false",
    "title": "bool Details",
    "section": "str() with False",
    "text": "str() with False\n\nstr(not_euro)\n\n'False'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#repr",
    "href": "python-fundamentals/bool.html#repr",
    "title": "bool Details",
    "section": "repr()",
    "text": "repr()\nReturns the “official” string representation. For booleans, this is identical to str().\n\nrepr(euro)\n\n'True'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#type",
    "href": "python-fundamentals/bool.html#type",
    "title": "bool Details",
    "section": "type()",
    "text": "type()\nReturns the type/class of the object. Note that bool is a subclass of int in Python.\n\ntype(euro)\n\nbool",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bool",
    "href": "python-fundamentals/bool.html#bool",
    "title": "bool Details",
    "section": "bool()",
    "text": "bool()\nConverting a boolean to boolean returns the same value (redundant but sometimes used for clarity).\n\nbool(euro)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bool-with-false",
    "href": "python-fundamentals/bool.html#bool-with-false",
    "title": "bool Details",
    "section": "bool() with False",
    "text": "bool() with False\n\nbool(not_euro)\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#hash",
    "href": "python-fundamentals/bool.html#hash",
    "title": "bool Details",
    "section": "hash()",
    "text": "hash()\nReturns a hash value for the boolean. True and False have predictable hash values.\n\nhash(euro)\n\n1",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#hash-with-false",
    "href": "python-fundamentals/bool.html#hash-with-false",
    "title": "bool Details",
    "section": "hash() with False",
    "text": "hash() with False\n\nhash(not_euro)\n\n0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#id",
    "href": "python-fundamentals/bool.html#id",
    "title": "bool Details",
    "section": "id()",
    "text": "id()\nReturns the memory address. Python reuses the same objects for True and False throughout the program.\n\nid(euro)\n\n4384853144",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#id-consistency",
    "href": "python-fundamentals/bool.html#id-consistency",
    "title": "bool Details",
    "section": "id() consistency",
    "text": "id() consistency\nAll True values reference the same object in memory.\n\nanother_true = True\nprint(f\"euro id: {id(euro)}\")\nprint(f\"another_true id: {id(another_true)}\")\nprint(f\"Same object? {euro is another_true}\")\n\neuro id: 4384853144\nanother_true id: 4384853144\nSame object? True",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#int",
    "href": "python-fundamentals/bool.html#int",
    "title": "bool Details",
    "section": "int()",
    "text": "int()\nConverts boolean to integer. True becomes 1, False becomes 0.\n\nint(euro)\n\n1",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#int-with-false",
    "href": "python-fundamentals/bool.html#int-with-false",
    "title": "bool Details",
    "section": "int() with False",
    "text": "int() with False\n\nint(not_euro)\n\n0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#float",
    "href": "python-fundamentals/bool.html#float",
    "title": "bool Details",
    "section": "float()",
    "text": "float()\nConverts boolean to floating-point number.\n\nfloat(euro)\n\n1.0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#float-with-false",
    "href": "python-fundamentals/bool.html#float-with-false",
    "title": "bool Details",
    "section": "float() with False",
    "text": "float() with False\n\nfloat(not_euro)\n\n0.0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#complex",
    "href": "python-fundamentals/bool.html#complex",
    "title": "bool Details",
    "section": "complex()",
    "text": "complex()\nConverts boolean to complex number.\n\ncomplex(euro)\n\n(1+0j)",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#arithmetic-operations",
    "href": "python-fundamentals/bool.html#arithmetic-operations",
    "title": "bool Details",
    "section": "Arithmetic operations",
    "text": "Arithmetic operations\nSince bool inherits from int, booleans can be used in arithmetic operations.\n\neuro + 5  # True + 5 = 1 + 5 = 6\n\n6",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#arithmetic-with-false",
    "href": "python-fundamentals/bool.html#arithmetic-with-false",
    "title": "bool Details",
    "section": "Arithmetic with False",
    "text": "Arithmetic with False\n\nnot_euro + 10  # False + 10 = 0 + 10 = 10\n\n10",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#multiplication",
    "href": "python-fundamentals/bool.html#multiplication",
    "title": "bool Details",
    "section": "Multiplication",
    "text": "Multiplication\n\neuro * 100  # True * 100 = 1 * 100 = 100\n\n100",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#division",
    "href": "python-fundamentals/bool.html#division",
    "title": "bool Details",
    "section": "Division",
    "text": "Division\n\neuro / 2  # True / 2 = 1 / 2 = 0.5\n\n0.5",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#exponentiation",
    "href": "python-fundamentals/bool.html#exponentiation",
    "title": "bool Details",
    "section": "Exponentiation",
    "text": "Exponentiation\n\neuro ** 5  # True ** 5 = 1 ** 5 = 1\n\n1",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#sum-of-booleans",
    "href": "python-fundamentals/bool.html#sum-of-booleans",
    "title": "bool Details",
    "section": "Sum of booleans",
    "text": "Sum of booleans\nUseful for counting True values in a collection.\n\nsum([True, False, True, True])  # Counts True values\n\n3",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-and",
    "href": "python-fundamentals/bool.html#logical-and",
    "title": "bool Details",
    "section": "Logical AND",
    "text": "Logical AND\n\neuro and True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-and-with-false",
    "href": "python-fundamentals/bool.html#logical-and-with-false",
    "title": "bool Details",
    "section": "Logical AND with False",
    "text": "Logical AND with False\n\neuro and False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-or",
    "href": "python-fundamentals/bool.html#logical-or",
    "title": "bool Details",
    "section": "Logical OR",
    "text": "Logical OR\n\neuro or False\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-or-with-both-false",
    "href": "python-fundamentals/bool.html#logical-or-with-both-false",
    "title": "bool Details",
    "section": "Logical OR with both False",
    "text": "Logical OR with both False\n\nnot_euro or False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-not",
    "href": "python-fundamentals/bool.html#logical-not",
    "title": "bool Details",
    "section": "Logical NOT",
    "text": "Logical NOT\n\nnot euro\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#logical-not-with-false",
    "href": "python-fundamentals/bool.html#logical-not-with-false",
    "title": "bool Details",
    "section": "Logical NOT with False",
    "text": "Logical NOT with False\n\nnot not_euro\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#complex-logical-expression",
    "href": "python-fundamentals/bool.html#complex-logical-expression",
    "title": "bool Details",
    "section": "Complex logical expression",
    "text": "Complex logical expression\n\neuro and (not not_euro) or False\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#equality-with-boolean",
    "href": "python-fundamentals/bool.html#equality-with-boolean",
    "title": "bool Details",
    "section": "Equality with boolean",
    "text": "Equality with boolean\n\neuro == True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#equality-with-integer",
    "href": "python-fundamentals/bool.html#equality-with-integer",
    "title": "bool Details",
    "section": "Equality with integer",
    "text": "Equality with integer\nBooleans can be compared with integers due to inheritance.\n\neuro == 1\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#equality-false-with-integer",
    "href": "python-fundamentals/bool.html#equality-false-with-integer",
    "title": "bool Details",
    "section": "Equality False with integer",
    "text": "Equality False with integer\n\nnot_euro == 0\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#identity-comparison",
    "href": "python-fundamentals/bool.html#identity-comparison",
    "title": "bool Details",
    "section": "Identity comparison",
    "text": "Identity comparison\n\neuro is True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#identity-vs-equality",
    "href": "python-fundamentals/bool.html#identity-vs-equality",
    "title": "bool Details",
    "section": "Identity vs equality",
    "text": "Identity vs equality\n\nprint(f\"euro == 1: {euro == 1}\")\nprint(f\"euro is 1: {euro is 1}\")  # False because they're different objects\n\neuro == 1: True\neuro is 1: False\n\n\n&lt;&gt;:2: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n&lt;&gt;:2: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n/var/folders/jh/vdccym5962j7k7gdnt8z2w1h0000gn/T/ipykernel_10332/2288819409.py:2: SyntaxWarning: \"is\" with 'int' literal. Did you mean \"==\"?\n  print(f\"euro is 1: {euro is 1}\")  # False because they're different objects",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#comparison-with-other-booleans",
    "href": "python-fundamentals/bool.html#comparison-with-other-booleans",
    "title": "bool Details",
    "section": "Comparison with other booleans",
    "text": "Comparison with other booleans\n\neuro != not_euro\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#ordering-comparisons",
    "href": "python-fundamentals/bool.html#ordering-comparisons",
    "title": "bool Details",
    "section": "Ordering comparisons",
    "text": "Ordering comparisons\nBooleans can be ordered: False &lt; True.\n\nnot_euro &lt; euro\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#ordering-with-integers",
    "href": "python-fundamentals/bool.html#ordering-with-integers",
    "title": "bool Details",
    "section": "Ordering with integers",
    "text": "Ordering with integers\n\neuro &gt; 0\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bitwise-and",
    "href": "python-fundamentals/bool.html#bitwise-and",
    "title": "bool Details",
    "section": "Bitwise AND",
    "text": "Bitwise AND\n\neuro & True  # 1 & 1 = 1\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bitwise-or",
    "href": "python-fundamentals/bool.html#bitwise-or",
    "title": "bool Details",
    "section": "Bitwise OR",
    "text": "Bitwise OR\n\neuro | not_euro  # 1 | 0 = 1\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bitwise-xor",
    "href": "python-fundamentals/bool.html#bitwise-xor",
    "title": "bool Details",
    "section": "Bitwise XOR",
    "text": "Bitwise XOR\n\neuro ^ not_euro  # 1 ^ 0 = 1\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#bitwise-not",
    "href": "python-fundamentals/bool.html#bitwise-not",
    "title": "bool Details",
    "section": "Bitwise NOT",
    "text": "Bitwise NOT\n\n~euro  # ~1 = -2 (bitwise complement)\n\n/var/folders/jh/vdccym5962j7k7gdnt8z2w1h0000gn/T/ipykernel_10332/3639478026.py:1: DeprecationWarning: Bitwise inversion '~' on bool is deprecated and will be removed in Python 3.16. This returns the bitwise inversion of the underlying int object and is usually not what you expect from negating a bool. Use the 'not' operator for boolean negation or ~int(x) if you really want the bitwise inversion of the underlying int.\n  ~euro  # ~1 = -2 (bitwise complement)\n\n\n-2",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#left-shift",
    "href": "python-fundamentals/bool.html#left-shift",
    "title": "bool Details",
    "section": "Left shift",
    "text": "Left shift\n\neuro &lt;&lt; 2  # 1 &lt;&lt; 2 = 4\n\n4",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#right-shift",
    "href": "python-fundamentals/bool.html#right-shift",
    "title": "bool Details",
    "section": "Right shift",
    "text": "Right shift\n\neuro &gt;&gt; 1  # 1 &gt;&gt; 1 = 0\n\n0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#if-statements",
    "href": "python-fundamentals/bool.html#if-statements",
    "title": "bool Details",
    "section": "if statements",
    "text": "if statements\nBooleans are primarily used in conditional statements.\n\nif euro:\n    result = \"Uses Euro currency\"\nelse:\n    result = \"Does not use Euro currency\"\nresult\n\n'Uses Euro currency'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-other-types",
    "href": "python-fundamentals/bool.html#truthiness-of-other-types",
    "title": "bool Details",
    "section": "Truthiness of other types",
    "text": "Truthiness of other types\nPython converts other types to boolean in boolean contexts.\n\nbool(0)  # False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-non-zero-numbers",
    "href": "python-fundamentals/bool.html#truthiness-of-non-zero-numbers",
    "title": "bool Details",
    "section": "Truthiness of non-zero numbers",
    "text": "Truthiness of non-zero numbers\n\nbool(42)  # True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-strings",
    "href": "python-fundamentals/bool.html#truthiness-of-strings",
    "title": "bool Details",
    "section": "Truthiness of strings",
    "text": "Truthiness of strings\n\nbool(\"\")  # Empty string is False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-non-empty-strings",
    "href": "python-fundamentals/bool.html#truthiness-of-non-empty-strings",
    "title": "bool Details",
    "section": "Truthiness of non-empty strings",
    "text": "Truthiness of non-empty strings\n\nbool(\"hello\")  # Non-empty string is True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-collections",
    "href": "python-fundamentals/bool.html#truthiness-of-collections",
    "title": "bool Details",
    "section": "Truthiness of collections",
    "text": "Truthiness of collections\n\nbool([])  # Empty list is False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-non-empty-collections",
    "href": "python-fundamentals/bool.html#truthiness-of-non-empty-collections",
    "title": "bool Details",
    "section": "Truthiness of non-empty collections",
    "text": "Truthiness of non-empty collections\n\nbool([1, 2, 3])  # Non-empty list is True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#truthiness-of-none",
    "href": "python-fundamentals/bool.html#truthiness-of-none",
    "title": "bool Details",
    "section": "Truthiness of None",
    "text": "Truthiness of None\n\nbool(None)  # None is False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#and-short-circuit",
    "href": "python-fundamentals/bool.html#and-short-circuit",
    "title": "bool Details",
    "section": "AND short-circuit",
    "text": "AND short-circuit\nIf first operand is False, second operand is not evaluated.\n\nresult = not_euro and print(\"This won't print\")\nprint(f\"Result: {result}\")\n\nResult: False",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#or-short-circuit",
    "href": "python-fundamentals/bool.html#or-short-circuit",
    "title": "bool Details",
    "section": "OR short-circuit",
    "text": "OR short-circuit\nIf first operand is True, second operand is not evaluated.\n\nresult = euro or print(\"This won't print either\")\nprint(f\"Result: {result}\")\n\nResult: True",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#practical-short-circuit-example",
    "href": "python-fundamentals/bool.html#practical-short-circuit-example",
    "title": "bool Details",
    "section": "Practical short-circuit example",
    "text": "Practical short-circuit example\n\nsafe_division = euro and (10 / (int(euro)))  # Won't divide by zero\nsafe_division\n\n10.0",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#all",
    "href": "python-fundamentals/bool.html#all",
    "title": "bool Details",
    "section": "all()",
    "text": "all()\nReturns True if all elements in iterable are True (or if iterable is empty).\n\nall([euro, True, 1, \"hello\"])  # All truthy values\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#all-with-false",
    "href": "python-fundamentals/bool.html#all-with-false",
    "title": "bool Details",
    "section": "all() with False",
    "text": "all() with False\n\nall([euro, False, True])  # Contains False\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#any",
    "href": "python-fundamentals/bool.html#any",
    "title": "bool Details",
    "section": "any()",
    "text": "any()\nReturns True if any element in iterable is True.\n\nany([not_euro, False, 0])  # All falsy values\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#any-with-true",
    "href": "python-fundamentals/bool.html#any-with-true",
    "title": "bool Details",
    "section": "any() with True",
    "text": "any() with True\n\nany([not_euro, euro, False])  # Contains True\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#string-formatting",
    "href": "python-fundamentals/bool.html#string-formatting",
    "title": "bool Details",
    "section": "String formatting",
    "text": "String formatting\n\nf\"Euro currency: {euro}\"\n\n'Euro currency: True'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#conditional-formatting",
    "href": "python-fundamentals/bool.html#conditional-formatting",
    "title": "bool Details",
    "section": "Conditional formatting",
    "text": "Conditional formatting\n\nf\"Currency: {'Euro' if euro else 'Other'}\"\n\n'Currency: Euro'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#uppercaselowercase-formatting",
    "href": "python-fundamentals/bool.html#uppercaselowercase-formatting",
    "title": "bool Details",
    "section": "Uppercase/lowercase formatting",
    "text": "Uppercase/lowercase formatting\n\nf\"Uses Euro: {str(euro).upper()}\"\n\n'Uses Euro: TRUE'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#list-indexing",
    "href": "python-fundamentals/bool.html#list-indexing",
    "title": "bool Details",
    "section": "List indexing",
    "text": "List indexing\nBooleans can be used as indices (True=1, False=0).\n\ncurrencies = [\"USD\", \"EUR\"]\ncurrencies[euro]  # True = 1, so gets \"EUR\"\n\n'EUR'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#dictionary-keys",
    "href": "python-fundamentals/bool.html#dictionary-keys",
    "title": "bool Details",
    "section": "Dictionary keys",
    "text": "Dictionary keys\n\ncurrency_map = {True: \"Euro\", False: \"Other\"}\ncurrency_map[euro]\n\n'Euro'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#set-operations",
    "href": "python-fundamentals/bool.html#set-operations",
    "title": "bool Details",
    "section": "Set operations",
    "text": "Set operations\n\nbool_set = {True, False, 1, 0}  # Only {False, True} due to equality\nbool_set\n\n{False, True}",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#isinstance-with-bool",
    "href": "python-fundamentals/bool.html#isinstance-with-bool",
    "title": "bool Details",
    "section": "isinstance() with bool",
    "text": "isinstance() with bool\n\nisinstance(euro, bool)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#isinstance-with-int",
    "href": "python-fundamentals/bool.html#isinstance-with-int",
    "title": "bool Details",
    "section": "isinstance() with int",
    "text": "isinstance() with int\nSince bool inherits from int, this is also True.\n\nisinstance(euro, int)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#type-hierarchy-check",
    "href": "python-fundamentals/bool.html#type-hierarchy-check",
    "title": "bool Details",
    "section": "Type hierarchy check",
    "text": "Type hierarchy check\n\nissubclass(bool, int)\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#specific-boolean-check",
    "href": "python-fundamentals/bool.html#specific-boolean-check",
    "title": "bool Details",
    "section": "Specific boolean check",
    "text": "Specific boolean check\nTo check for specifically boolean type (not int).\n\ntype(euro) is bool\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#true-constant",
    "href": "python-fundamentals/bool.html#true-constant",
    "title": "bool Details",
    "section": "True constant",
    "text": "True constant\n\nTrue\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#false-constant",
    "href": "python-fundamentals/bool.html#false-constant",
    "title": "bool Details",
    "section": "False constant",
    "text": "False constant\n\nFalse\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#boolean-literals-comparison",
    "href": "python-fundamentals/bool.html#boolean-literals-comparison",
    "title": "bool Details",
    "section": "Boolean literals comparison",
    "text": "Boolean literals comparison\n\nprint(f\"True is True: {True is True}\")\nprint(f\"False is False: {False is False}\")\nprint(f\"True is not False: {True is not False}\")\n\nTrue is True: True\nFalse is False: True\nTrue is not False: True",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#flag-toggling",
    "href": "python-fundamentals/bool.html#flag-toggling",
    "title": "bool Details",
    "section": "Flag toggling",
    "text": "Flag toggling\n\ntoggled = not euro\ntoggled\n\nFalse",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#boolean-accumulation",
    "href": "python-fundamentals/bool.html#boolean-accumulation",
    "title": "bool Details",
    "section": "Boolean accumulation",
    "text": "Boolean accumulation\n\nconditions = [True, False, True, True]\ntotal_true = sum(conditions)  # Count of True values\ntotal_true\n\n3",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#conditional-assignment",
    "href": "python-fundamentals/bool.html#conditional-assignment",
    "title": "bool Details",
    "section": "Conditional assignment",
    "text": "Conditional assignment\n\nstatus = \"active\" if euro else \"inactive\"\nstatus\n\n'active'",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#default-value-pattern",
    "href": "python-fundamentals/bool.html#default-value-pattern",
    "title": "bool Details",
    "section": "Default value pattern",
    "text": "Default value pattern\n\nvalue = euro or \"default_value\"  # If euro is False, use default\nvalue\n\nTrue",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#simulating-boolean-indexing",
    "href": "python-fundamentals/bool.html#simulating-boolean-indexing",
    "title": "bool Details",
    "section": "Simulating boolean indexing",
    "text": "Simulating boolean indexing\n\ndata = [10, 20, 30, 40]\nmask = [True, False, True, False]\nfiltered = [x for x, m in zip(data, mask) if m]\nfiltered\n\n[10, 30]",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/bool.html#boolean-aggregation",
    "href": "python-fundamentals/bool.html#boolean-aggregation",
    "title": "bool Details",
    "section": "Boolean aggregation",
    "text": "Boolean aggregation\n\nresults = [True, False, True, True, False]\nsuccess_rate = sum(results) / len(results)\nsuccess_rate\n\n0.6",
    "crumbs": [
      "Python Fundamentals",
      "bool Details"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html",
    "href": "python-fundamentals/type-functions.html",
    "title": "Functions/Method by Type Matrix",
    "section": "",
    "text": "Function/Method Availability by Type",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html#functionmethod-availability-by-type",
    "href": "python-fundamentals/type-functions.html#functionmethod-availability-by-type",
    "title": "Functions/Method by Type Matrix",
    "section": "",
    "text": "Function/Method\nDefinition\nstr\nint\nfloat\nbool\nNotes\n\n\n\n\nBuilt-in Functions\n\n\n\n\n\n\n\n\nlen()\nLength/count of items\n✅\n❌\n❌\n❌\nOnly for sequences/collections\n\n\nstr()\nConvert to string\n✅\n✅\n✅\n✅\nUniversal conversion\n\n\nrepr()\nOfficial string representation\n✅\n✅\n✅\n✅\nUniversal representation\n\n\ntype()\nGet object type\n✅\n✅\n✅\n✅\nUniversal type checking\n\n\nbool()\nConvert to boolean\n✅\n✅\n✅\n✅\nUniversal truthiness conversion\n\n\nhash()\nGet hash value\n✅\n✅\n✅\n✅\nUniversal (immutable types)\n\n\nid()\nGet memory address\n✅\n✅\n✅\n✅\nUniversal memory address\n\n\nabs()\nAbsolute value\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nint()\nConvert to integer\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\nfloat()\nConvert to float\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\ncomplex()\nConvert to complex number\n✅*\n✅\n✅\n✅\n*if string contains valid number\n\n\nround()\nRound to nearest integer\n❌\n✅\n✅\n✅\nNumeric types only\n\n\npow()\nRaise to power\n❌\n✅\n✅\n✅\nNumeric types only\n\n\ndivmod()\nDivision and remainder\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nsum()\nSum of iterable\n❌\n✅\n✅\n✅\nWorks on iterables of numeric types\n\n\nmin()/max()\nMinimum/maximum value\n✅\n✅\n✅\n✅\nComparable types\n\n\nsorted()\nSort iterable\n✅\n✅\n✅\n✅\nWorks on iterables\n\n\nreversed()\nReverse sequence\n✅\n❌\n❌\n❌\nSequences only\n\n\nArithmetic Operators\n\n\n\n\n\n\n\n\n+ (addition)\nAdd values/concatenate\n✅\n✅\n✅\n✅\nString concatenation vs numeric addition\n\n\n- (subtraction)\nSubtract values\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n* (multiplication)\nMultiply/repeat\n✅\n✅\n✅\n✅\nString repetition vs numeric multiplication\n\n\n/ (division)\nDivide values\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n// (floor division)\nInteger division\n❌\n✅\n✅\n✅\nNumeric types only\n\n\n% (modulo)\nRemainder/format\n✅\n✅\n✅\n✅\nString formatting vs numeric modulo\n\n\n** (exponentiation)\nRaise to power\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nComparison Operators\n\n\n\n\n\n\n\n\n==, !=\nEqual/not equal\n✅\n✅\n✅\n✅\nUniversal\n\n\n&lt;, &gt;, &lt;=, &gt;=\nOrdering comparisons\n✅\n✅\n✅\n✅\nUniversal (comparable types)\n\n\nBitwise Operators\n\n\n\n\n\n\n\n\n&, |, ^\nAND, OR, XOR\n❌\n✅\n❌\n✅\nInteger types only (bool inherits from int)\n\n\n~\nBitwise NOT\n❌\n✅\n❌\n✅\nInteger types only\n\n\n&lt;&lt;, &gt;&gt;\nLeft/right shift\n❌\n✅\n❌\n✅\nInteger types only\n\n\nType-Specific Methods\n\n\n\n\n\n\n\n\n.upper()/.lower()\nChange case\n✅\n❌\n❌\n❌\nString methods only\n\n\n.strip()/.split()\nRemove whitespace/split\n✅\n❌\n❌\n❌\nString methods only\n\n\n.replace()/.find()\nReplace/find substring\n✅\n❌\n❌\n❌\nString methods only\n\n\n.startswith()/.endswith()\nCheck prefix/suffix\n✅\n❌\n❌\n❌\nString methods only\n\n\n.isalpha()/.isdigit()\nCheck character types\n✅\n❌\n❌\n❌\nString methods only\n\n\n.join()\nJoin strings with separator\n✅\n❌\n❌\n❌\nString methods only\n\n\n.format()\nFormat string\n✅\n❌\n❌\n❌\nString methods only\n\n\n.encode()\nEncode to bytes\n✅\n❌\n❌\n❌\nString methods only\n\n\n.bit_length()\nNumber of bits needed\n❌\n✅\n❌\n✅\nInteger methods (bool inherits)\n\n\n.bit_count()\nCount of 1-bits\n❌\n✅\n❌\n✅\nInteger methods (Python 3.10+)\n\n\n.to_bytes()\nConvert to bytes\n❌\n✅\n❌\n✅\nInteger methods\n\n\n.from_bytes()\nCreate from bytes\n❌\n✅\n❌\n✅\nInteger class methods\n\n\n.is_integer()\nCheck if whole number\n❌\n❌\n✅\n❌\nFloat methods only\n\n\n.as_integer_ratio()\nReturn as fraction\n❌\n❌\n✅\n❌\nFloat methods only\n\n\n.hex()\nHexadecimal representation\n❌\n❌\n✅\n❌\nFloat methods only\n\n\nFormatting Functions\n\n\n\n\n\n\n\n\nbin()\nBinary representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\noct()\nOctal representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nhex()\nHexadecimal representation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nMath Module Functions\n\n\n\n\n\n\n\n\nmath.sqrt()\nSquare root\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.log()\nNatural logarithm\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.sin()/.cos()\nTrigonometric functions\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nmath.factorial()\nFactorial calculation\n❌\n✅\n❌\n✅\nInteger types only\n\n\nmath.gcd()/.lcm()\nGreatest common divisor/LCM\n❌\n✅\n❌\n✅\nInteger types only\n\n\nmath.ceil()/.floor()\nRound up/down\n❌\n✅\n✅\n✅\nNumeric types only\n\n\nRegular Expressions\n\n\n\n\n\n\n\n\nre.search()\nFind pattern match\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.findall()\nFind all matches\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.sub()\nSubstitute pattern\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nre.split()\nSplit by pattern\n✅\n❌*\n❌*\n❌*\n*Must convert to string first\n\n\nString Module\n\n\n\n\n\n\n\n\nstring.ascii_letters\nLetter constants\n✅\n❌\n❌\n❌\nString operations only\n\n\nstring.capwords()\nCapitalize words\n✅\n❌\n❌\n❌\nString operations only\n\n\nCollections/Iteration\n\n\n\n\n\n\n\n\nlist()\nConvert to list\n✅\n❌\n❌\n❌\nSequences only\n\n\ntuple()\nConvert to tuple\n✅\n❌\n❌\n❌\nSequences only\n\n\nset()\nConvert to set\n✅\n❌\n❌\n❌\nSequences only\n\n\nenumerate()\nAdd index to iterable\n✅\n❌\n❌\n❌\nSequences only\n\n\nzip()\nCombine iterables\n✅\n❌\n❌\n❌\nSequences only\n\n\nMembership/Indexing\n\n\n\n\n\n\n\n\nin/not in\nCheck membership\n✅\n❌\n❌\n❌\nSequences only\n\n\n[index]\nAccess by position\n✅\n❌\n❌\n❌\nSequences only\n\n\n[start:end]\nSlice sequence\n✅\n❌\n❌\n❌\nSequences only",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/type-functions.html#legend",
    "href": "python-fundamentals/type-functions.html#legend",
    "title": "Functions/Method by Type Matrix",
    "section": "Legend",
    "text": "Legend\n\n✅ Available: Function/method works directly with this type\n❌ Not Available: Function/method doesn’t work with this type\n✅* Conditional: Works with conditions (see notes)\n❌* Requires Conversion: Must convert type first",
    "crumbs": [
      "Python Fundamentals",
      "Functions/Method by Type Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html",
    "href": "python-fundamentals/list-functions.html",
    "title": "List Operations Matrix",
    "section": "",
    "text": "Function/Method Compatibility with Lists Containing Different Types",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#functionmethod-compatibility-with-lists-containing-different-types",
    "href": "python-fundamentals/list-functions.html#functionmethod-compatibility-with-lists-containing-different-types",
    "title": "List Operations Matrix",
    "section": "",
    "text": "Function/Method\nDefinition\nList[str]\nList[int]\nList[float]\nList[bool]\nMixed List\nNotes\n\n\n\n\nBasic List Functions\n\n\n\n\n\n\n\n\n\nlen()\nLength of list\n✅\n✅\n✅\n✅\n✅\nAlways works regardless of element type\n\n\ntype()\nGet object type\n✅\n✅\n✅\n✅\n✅\nAlways returns &lt;class 'list'&gt;\n\n\nstr()\nConvert to string\n✅\n✅\n✅\n✅\n✅\nString representation of entire list\n\n\nrepr()\nOfficial representation\n✅\n✅\n✅\n✅\n✅\nShows list with element representations\n\n\nbool()\nConvert to boolean\n✅\n✅\n✅\n✅\n✅\nFalse for empty list, True otherwise\n\n\nid()\nGet memory address\n✅\n✅\n✅\n✅\n✅\nEvery list has unique identity\n\n\nMathematical Functions\n\n\n\n\n\n\n\n\n\nsum()\nSum all elements\n❌\n✅\n✅\n✅\n⚠️\nString concatenation not supported; mixed needs compatible types\n\n\nmin()\nMinimum value\n✅\n✅\n✅\n✅\n⚠️\nWorks if all elements are comparable\n\n\nmax()\nMaximum value\n✅\n✅\n✅\n✅\n⚠️\nWorks if all elements are comparable\n\n\nall()\nAll elements truthy\n✅\n✅\n✅\n✅\n✅\nChecks truthiness of each element\n\n\nany()\nAny element truthy\n✅\n✅\n✅\n✅\n✅\nChecks if any element is truthy\n\n\nList Methods - Modification\n\n\n\n\n\n\n\n\n\n.append()\nAdd single item to end\n✅\n✅\n✅\n✅\n✅\nCan append any type to any list\n\n\n.extend()\nAdd multiple items\n✅\n✅\n✅\n✅\n✅\nExtends with any iterable\n\n\n.insert()\nInsert at position\n✅\n✅\n✅\n✅\n✅\nCan insert any type anywhere\n\n\n.remove()\nRemove first occurrence\n✅\n✅\n✅\n✅\n✅\nMust match element exactly\n\n\n.pop()\nRemove and return item\n✅\n✅\n✅\n✅\n✅\nReturns the removed element\n\n\n.clear()\nRemove all items\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\n.reverse()\nReverse in place\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\n.sort()\nSort in place\n✅\n✅\n✅\n✅\n⚠️\nMixed types may not be comparable\n\n\nList Methods - Information\n\n\n\n\n\n\n\n\n\n.index()\nFind first index\n✅\n✅\n✅\n✅\n✅\nMust match element exactly\n\n\n.count()\nCount occurrences\n✅\n✅\n✅\n✅\n✅\nCounts exact matches\n\n\n.copy()\nShallow copy\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nSequence Operations\n\n\n\n\n\n\n\n\n\n+ (concatenation)\nJoin lists\n✅\n✅\n✅\n✅\n✅\nCan concatenate any list types\n\n\n* (repetition)\nRepeat list\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nin/not in\nCheck membership\n✅\n✅\n✅\n✅\n✅\nChecks for exact element match\n\n\n[index]\nAccess by position\n✅\n✅\n✅\n✅\n✅\nAlways works with valid index\n\n\n[start:end]\nSlice list\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nSorting Functions\n\n\n\n\n\n\n\n\n\nsorted()\nReturn sorted copy\n✅\n✅\n✅\n✅\n⚠️\nMixed types may not be comparable\n\n\nreversed()\nReturn reversed iterator\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nType Conversion\n\n\n\n\n\n\n\n\n\ntuple()\nConvert to tuple\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nset()\nConvert to set\n✅\n✅\n✅\n✅\n✅\nRemoves duplicates; elements must be hashable\n\n\nfrozenset()\nConvert to immutable set\n✅\n✅\n✅\n✅\n✅\nLike set() but immutable\n\n\nIteration Functions\n\n\n\n\n\n\n\n\n\nenumerate()\nAdd index to elements\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nzip()\nCombine with other iterables\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nmap()\nApply function to elements\n✅\n✅\n✅\n✅\n✅\nFunction must be compatible with element types\n\n\nfilter()\nFilter elements\n✅\n✅\n✅\n✅\n✅\nFunction must be compatible with element types\n\n\nList Comprehensions\n\n\n\n\n\n\n\n\n\nBasic comprehension\n[expr for x in list]\n✅\n✅\n✅\n✅\n✅\nExpression must work with element type\n\n\nConditional comprehension\n[x for x in list if cond]\n✅\n✅\n✅\n✅\n✅\nCondition must work with element type\n\n\nMathematical Operations on Elements\n\n\n\n\n\n\n\n\n\nElement-wise arithmetic\nApply math to each element\n❌\n✅\n✅\n✅\n⚠️\n[x + 1 for x in lst] - numeric types only\n\n\nString Operations on Lists\n\n\n\n\n\n\n\n\n\nstr.join()\nJoin elements with separator\n✅\n⚠️\n⚠️\n⚠️\n⚠️\nNon-string elements need str() conversion\n\n\nStatistical Functions (statistics module)\n\n\n\n\n\n\n\n\n\nstatistics.mean()\nCalculate average\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.median()\nFind median\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.mode()\nFind most common\n✅\n✅\n✅\n✅\n✅\nWorks with any hashable type\n\n\nstatistics.stdev()\nStandard deviation\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nstatistics.variance()\nCalculate variance\n❌\n✅\n✅\n✅\n⚠️\nNumeric types only\n\n\nCollections Module Functions\n\n\n\n\n\n\n\n\n\ncollections.Counter()\nCount element frequencies\n✅\n✅\n✅\n✅\n✅\nWorks with any hashable elements\n\n\ncollections.deque()\nConvert to double-ended queue\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nRandom Module Functions\n\n\n\n\n\n\n\n\n\nrandom.choice()\nPick random element\n✅\n✅\n✅\n✅\n✅\nWorks with any non-empty list\n\n\nrandom.choices()\nPick multiple with replacement\n✅\n✅\n✅\n✅\n✅\nWorks with any non-empty list\n\n\nrandom.sample()\nPick multiple without replacement\n✅\n✅\n✅\n✅\n✅\nWorks with any list\n\n\nrandom.shuffle()\nShuffle in place\n✅\n✅\n✅\n✅\n✅\nAlways works\n\n\nItertools Functions\n\n\n\n\n\n\n\n\n\nitertools.chain()\nFlatten nested iterables\n✅\n✅\n✅\n✅\n✅\nCombines multiple lists\n\n\nitertools.compress()\nFilter by boolean mask\n✅\n✅\n✅\n✅\n✅\nUses boolean list as selector\n\n\nitertools.groupby()\nGroup consecutive elements\n✅\n✅\n✅\n✅\n✅\nGroups by key function\n\n\nitertools.accumulate()\nCumulative operations\n❌\n✅\n✅\n✅\n⚠️\nDefault is addition (numeric only)\n\n\nCopy Module Functions\n\n\n\n\n\n\n\n\n\ncopy.copy()\nShallow copy\n✅\n✅\n✅\n✅\n✅\nSame as list.copy()\n\n\ncopy.deepcopy()\nDeep copy\n✅\n✅\n✅\n✅\n✅\nCopies nested objects too\n\n\nComparison Operations\n\n\n\n\n\n\n\n\n\n==, !=\nEquality comparison\n✅\n✅\n✅\n✅\n✅\nElement-wise comparison\n\n\n&lt;, &gt;, &lt;=, &gt;=\nLexicographic comparison\n✅\n✅\n✅\n✅\n⚠️\nElements must be comparable\n\n\nFunctional Programming\n\n\n\n\n\n\n\n\n\nfunctools.reduce()\nReduce to single value\n✅\n✅\n✅\n✅\n✅\nFunction must work with element types\n\n\nNumPy Operations (if available)\n\n\n\n\n\n\n\n\n\nnumpy.array()\nConvert to NumPy array\n✅\n✅\n✅\n✅\n⚠️\nMixed types become object arrays\n\n\nnumpy.mean()\nArray mean\n❌\n✅\n✅\n✅\n⚠️\nNumeric arrays only\n\n\nnumpy.sum()\nArray sum\n❌\n✅\n✅\n✅\n⚠️\nNumeric arrays only\n\n\nPandas Operations (if available)\n\n\n\n\n\n\n\n\n\npandas.Series()\nConvert to Pandas Series\n✅\n✅\n✅\n✅\n✅\nAlways works, handles mixed types\n\n\npandas.DataFrame()\nConvert to DataFrame\n✅\n✅\n✅\n✅\n✅\nCreates single-column DataFrame",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#example-lists-for-testing",
    "href": "python-fundamentals/list-functions.html#example-lists-for-testing",
    "title": "List Operations Matrix",
    "section": "Example Lists for Testing",
    "text": "Example Lists for Testing\n# Sample lists for each type\nstr_list = ['apple', 'banana', 'cherry']\nint_list = [1, 2, 3, 4, 5]\nfloat_list = [1.1, 2.2, 3.3, 4.4]\nbool_list = [True, False, True, False]\nmixed_list = ['hello', 42, 3.14, True]",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "python-fundamentals/list-functions.html#legend",
    "href": "python-fundamentals/list-functions.html#legend",
    "title": "List Operations Matrix",
    "section": "Legend",
    "text": "Legend\n\n✅ Works: Function/method works directly with this list type\n❌ Doesn’t Work: Function/method doesn’t work with this list type\n⚠️ Conditional: Works with conditions or may raise errors",
    "crumbs": [
      "Python Fundamentals",
      "List Operations Matrix"
    ]
  },
  {
    "objectID": "pandas/project-setup.html",
    "href": "pandas/project-setup.html",
    "title": "Project Setup",
    "section": "",
    "text": "Read in data\npassengers_df = pd.read_csv(\"../data/titanic.csv\")\ntype(passengers_df)\n\npandas.core.frame.DataFrame",
    "crumbs": [
      "Pandas",
      "Project Setup"
    ]
  },
  {
    "objectID": "pandas/project-setup.html#peek-at-data",
    "href": "pandas/project-setup.html#peek-at-data",
    "title": "Project Setup",
    "section": "Peek at data",
    "text": "Peek at data\n\npassengers_df\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibsp\nparch\nfare\nclass\nembark_town\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n\n\n\n\n891 rows × 9 columns",
    "crumbs": [
      "Pandas",
      "Project Setup"
    ]
  },
  {
    "objectID": "pandas/dataframe.html",
    "href": "pandas/dataframe.html",
    "title": "DataFrame",
    "section": "",
    "text": "Evaluation",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#evaluation",
    "href": "pandas/dataframe.html#evaluation",
    "title": "DataFrame",
    "section": "",
    "text": ".columns.info().shape.dtypes\n\n\n\npassengers_df.columns\n\nIndex(['passenger_id', 'survived', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'class', 'embark_town'],\n      dtype='object')\n\n\n\n\n\npassengers_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   passenger_id  891 non-null    object \n 1   survived      891 non-null    int64  \n 2   sex           891 non-null    object \n 3   age           714 non-null    float64\n 4   sibsp         891 non-null    int64  \n 5   parch         891 non-null    int64  \n 6   fare          891 non-null    float64\n 7   class         891 non-null    object \n 8   embark_town   889 non-null    object \ndtypes: float64(2), int64(3), object(4)\nmemory usage: 62.8+ KB\n\n\n\n\n\npassengers_df.shape\n\n(891, 9)\n\n\nThis returns (rows, columns) and can be slices to get one or the other by its index. For example, the number of rows:\n\npassengers_df.shape[0]\n\n891\n\n\n\n\n\npassengers_df.dtypes\n\npassenger_id     object\nsurvived          int64\nsex              object\nage             float64\nsibsp             int64\nparch             int64\nfare            float64\nclass            object\nembark_town      object\ndtype: object",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#modification",
    "href": "pandas/dataframe.html#modification",
    "title": "DataFrame",
    "section": "Modification",
    "text": "Modification\n\n.rename()pd.Categorical()\n\n\nRename columns by passing \"old_name\":\"new_name\" to the columns argument of .rename(). Remember to use inplace=True to store the changes in the existing DataFrame.\n\npassengers_df.rename(columns={\n    \"sibsp\":\"sibling_spouse_count\",\n    \"parch\":\"parents_children_count\"\n}, inplace=True)\n\npassengers_df.columns\n\nIndex(['passenger_id', 'survived', 'sex', 'age', 'sibling_spouse_count',\n       'parents_children_count', 'fare', 'class', 'embark_town'],\n      dtype='object')\n\n\n\n\nDefine categorical ordering by passing desired label ordering into pd.Categorical.\n\ndesired_ordering = [\"First\", \"Second\", \"Third\"]\n\npassengers_df[\"class\"] = pd.Categorical(\n    passengers_df[\"class\"],\n    categories=desired_ordering,\n    ordered=True\n)\n\npassengers_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column                  Non-Null Count  Dtype   \n---  ------                  --------------  -----   \n 0   passenger_id            891 non-null    object  \n 1   survived                891 non-null    int64   \n 2   sex                     891 non-null    object  \n 3   age                     714 non-null    float64 \n 4   sibling_spouse_count    891 non-null    int64   \n 5   parents_children_count  891 non-null    int64   \n 6   fare                    891 non-null    float64 \n 7   class                   891 non-null    category\n 8   embark_town             889 non-null    object  \ndtypes: category(1), float64(2), int64(3), object(3)\nmemory usage: 56.8+ KB\n\n\nCalling the variable shows that it looks the same as before, but now pandas knows the correct ordering ['First' &lt; 'Second' &lt; 'Third'].\n\npassengers_df[\"class\"]\n\n0       Third\n1       First\n2       Third\n3       First\n4       Third\n        ...  \n886    Second\n887     First\n888     Third\n889     First\n890     Third\nName: class, Length: 891, dtype: category\nCategories (3, object): ['First' &lt; 'Second' &lt; 'Third']\n\n\nDefining the variable as an ordered categorical series stores a numeric representation of the data labels.\n\npassengers_df[\"class\"].cat.codes\n\n0      2\n1      0\n2      2\n3      0\n4      2\n      ..\n886    1\n887    0\n888    2\n889    0\n890    2\nLength: 891, dtype: int8\n\n\nThese can be accessed for further analysis, if desired.\n\npassengers_df[\"class\"].cat.codes.median()\n\nnp.float64(2.0)",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/dataframe.html#summarization",
    "href": "pandas/dataframe.html#summarization",
    "title": "DataFrame",
    "section": "Summarization",
    "text": "Summarization\n\n.describe().describe(include=[“object”, “category”])\n\n\n\npassengers_df.describe()\n\n\n\n\n\n\n\n\nsurvived\nage\nsibling_spouse_count\nparents_children_count\nfare\n\n\n\n\ncount\n891.000000\n714.000000\n891.000000\n891.000000\n891.000000\n\n\nmean\n0.383838\n29.699118\n0.523008\n0.381594\n32.204208\n\n\nstd\n0.486592\n14.526497\n1.102743\n0.806057\n49.693429\n\n\nmin\n0.000000\n0.420000\n0.000000\n0.000000\n0.000000\n\n\n25%\n0.000000\n20.125000\n0.000000\n0.000000\n7.910400\n\n\n50%\n0.000000\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n75%\n1.000000\n38.000000\n1.000000\n0.000000\n31.000000\n\n\nmax\n1.000000\n80.000000\n8.000000\n6.000000\n512.329200\n\n\n\n\n\n\n\n\n\n\npassengers_df.describe(include=[\"object\", \"category\"])\n\n\n\n\n\n\n\n\npassenger_id\nsex\nclass\nembark_town\n\n\n\n\ncount\n891\n891\n891\n889\n\n\nunique\n891\n2\n3\n3\n\n\ntop\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\nmale\nThird\nSouthampton\n\n\nfreq\n1\n577\n491\n644",
    "crumbs": [
      "Pandas",
      "DataFrame"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html",
    "href": "pandas/one-variable-analysis.html",
    "title": "Analyzing One Variable",
    "section": "",
    "text": "Categorical\nYou can get to a specific variable in your DataFrame in two ways:\nDot notation is often quicker, especially if your variable names are well constructed. However, be aware that if the variable name is the same as a reserved name in Python (e.g., class) or pandas, that you might hit errors.\npassengers_df[\"embark_town\"]\n\n0      Southampton\n1        Cherbourg\n2      Southampton\n3      Southampton\n4      Southampton\n          ...     \n886    Southampton\n887    Southampton\n888    Southampton\n889      Cherbourg\n890     Queenstown\nName: embark_town, Length: 891, dtype: object",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html#categorical",
    "href": "pandas/one-variable-analysis.html#categorical",
    "title": "Analyzing One Variable",
    "section": "",
    "text": "Value Counts\n\n.value_counts()sortnormalize\n\n\n\npassengers_df[\"embark_town\"].value_counts()\n\nembark_town\nSouthampton    644\nCherbourg      168\nQueenstown      77\nName: count, dtype: int64\n\n\n\n\nValue counts are sorted by frequency (top to bottom) by default. You can turn this off with sort.\n\npassengers_df[\"embark_town\"].value_counts(sort = False)\n\nembark_town\nSouthampton    644\nCherbourg      168\nQueenstown      77\nName: count, dtype: int64\n\n\nYou can also use ascending to change the sort order.\n\npassengers_df[\"embark_town\"].value_counts(sort = True, ascending=True)\n\nembark_town\nQueenstown      77\nCherbourg      168\nSouthampton    644\nName: count, dtype: int64\n\n\n\n\nThe normalize argument returns relative frequencies, which is the percent of total observations.\n\npassengers_df[\"embark_town\"].value_counts(normalize = True)\n\nembark_town\nSouthampton    0.724409\nCherbourg      0.188976\nQueenstown     0.086614\nName: proportion, dtype: float64\n\n\n\n\n\n\n\nVisualization\n\n.plot.bar().plot.barh().plot.pie()\n\n\n\npassengers_df[\"embark_town\"].value_counts().plot.bar()\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"embark_town\"].value_counts().plot.barh()\n\n\n\n\n\n\n\n\n\n\nAlthough it is generally better to avoid pie charts, using them with few data points and clear labels can be ok.\n\npassengers_df[\"embark_town\"].value_counts().plot.pie()",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/one-variable-analysis.html#numeric",
    "href": "pandas/one-variable-analysis.html#numeric",
    "title": "Analyzing One Variable",
    "section": "Numeric",
    "text": "Numeric\n\npassengers_df[\"age\"]\n\n0      22.0\n1      38.0\n2      26.0\n3      35.0\n4      35.0\n       ... \n886    27.0\n887    19.0\n888     NaN\n889    26.0\n890    32.0\nName: age, Length: 891, dtype: float64\n\n\n\nSummary and Subsetting\n\n.describe.nlargest().nsmallest()math methods\n\n\n\npassengers_df[\"age\"].describe()\n\ncount    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n25%       20.125000\n50%       28.000000\n75%       38.000000\nmax       80.000000\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].nlargest()\n\n630    80.0\n851    74.0\n96     71.0\n493    71.0\n116    70.5\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].nsmallest()\n\n803    0.42\n755    0.67\n469    0.75\n644    0.75\n78     0.83\nName: age, dtype: float64\n\n\n\n\n\npassengers_df[\"age\"].mean()\n\nnp.float64(29.69911764705882)\n\n\n\n\n\n\n\nRank\nAdd a rank for each value relative to all observations. The method defaults to ascending=False, but this can be changed to True when you want lower values to earn higher ranks.\n\naverageminmaxfirstdense\n\n\nTies get the average of their rank positions (default)\n\npassengers_df[\"age\"].rank(method = \"average\").sort_values()\n\n803    1.0\n755    2.0\n644    3.5\n469    3.5\n78     5.5\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies all get the lowest possible rank\n\npassengers_df[\"age\"].rank(method=\"min\").sort_values()\n\n803    1.0\n755    2.0\n644    3.0\n469    3.0\n78     5.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies all get the highest possible rank\n\npassengers_df[\"age\"].rank(method=\"max\").sort_values()\n\n803    1.0\n755    2.0\n644    4.0\n469    4.0\n78     6.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nTies ranked by order they appear in data\n\npassengers_df[\"age\"].rank(method=\"first\").sort_values()\n\n803    1.0\n755    2.0\n469    3.0\n644    4.0\n78     5.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\nLike min, but no gaps created in ranking sequence\n\npassengers_df[\"age\"].rank(method=\"dense\").sort_values()\n\n803    1.0\n755    2.0\n644    3.0\n469    3.0\n78     4.0\n      ... \n859    NaN\n863    NaN\n868    NaN\n878    NaN\n888    NaN\nName: age, Length: 891, dtype: float64\n\n\n\n\n\n\n\nVisualization\n\n.plot.hist().plot.hist(bins=).plot.box()\n\n\n\npassengers_df[\"age\"].plot.hist()\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"age\"].plot.hist(bins=80)\n\n\n\n\n\n\n\n\n\n\n\npassengers_df[\"age\"].plot.box()",
    "crumbs": [
      "Pandas",
      "Analyzing One Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html",
    "href": "pandas/multiple-variable-analysis.html",
    "title": "Analyzing Multiple Variable",
    "section": "",
    "text": "Categorical\nWe could pass the entire DataFrame into value_counts and use two categorical variables.\npassengers_df.value_counts([\"sex\", \"class\"])\n\nsex     class \nmale    Third     347\nfemale  Third     144\nmale    First     122\n        Second    108\nfemale  First      94\n        Second     76\nName: count, dtype: int64\nHowever, this format isn’t that easy to worth with and lacks the additional functionality of .crosstab().",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#categorical",
    "href": "pandas/multiple-variable-analysis.html#categorical",
    "title": "Analyzing Multiple Variable",
    "section": "",
    "text": "Crosstabs\n\n.crosstab().crosstab(margins=True).crosstab(normalize=True)\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"])\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n94\n76\n144\n\n\nmale\n122\n108\n347\n\n\n\n\n\n\n\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], margins=True)\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\nAll\n\n\nsex\n\n\n\n\n\n\n\n\nfemale\n94\n76\n144\n314\n\n\nmale\n122\n108\n347\n577\n\n\nAll\n216\n184\n491\n891\n\n\n\n\n\n\n\n\n\n\nPercent of Total\nAll values sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=True)\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.105499\n0.085297\n0.161616\n\n\nmale\n0.136925\n0.121212\n0.389450\n\n\n\n\n\n\n\n\n\nRow Percents\nRows sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=\"index\")\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.299363\n0.242038\n0.458599\n\n\nmale\n0.211438\n0.187175\n0.601386\n\n\n\n\n\n\n\n\n\nColumn Percents\nColumns sum to 100%\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"], normalize=\"columns\")\n\n\n\n\n\n\n\nclass\nFirst\nSecond\nThird\n\n\nsex\n\n\n\n\n\n\n\nfemale\n0.435185\n0.413043\n0.293279\n\n\nmale\n0.564815\n0.586957\n0.706721\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\n\n.plot.bar().plot.barh()sns.heatmap()\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"]).plot.bar()\n\n\n\n\n\n\n\n\n\n\n\npd.crosstab(index = passengers_df[\"sex\"], columns = passengers_df[\"class\"]).plot.barh()\n\n\n\n\n\n\n\n\n\n\n\nct = pd.crosstab(passengers_df[\"sex\"], passengers_df[\"class\"])\nsns.heatmap(ct, annot=True, fmt='d', cmap='Blues')\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore than two variables\nYou can pass in more than one variable to either the index argument (e.g., rows) or the columns argument.\n\npd.crosstab(index = [passengers_df[\"sex\"], passengers_df[\"class\"]], \n            columns = passengers_df[\"embark_town\"], \n            margins = True)\n\n\n\n\n\n\n\n\nembark_town\nCherbourg\nQueenstown\nSouthampton\nAll\n\n\nsex\nclass\n\n\n\n\n\n\n\n\nfemale\nFirst\n43\n1\n48\n92\n\n\nSecond\n7\n2\n67\n76\n\n\nThird\n23\n33\n88\n144\n\n\nmale\nFirst\n42\n1\n79\n122\n\n\nSecond\n10\n1\n97\n108\n\n\nThird\n43\n39\n265\n347\n\n\nAll\n\n168\n77\n644\n889",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#numeric",
    "href": "pandas/multiple-variable-analysis.html#numeric",
    "title": "Analyzing Multiple Variable",
    "section": "Numeric",
    "text": "Numeric\n\nCorrelation\n\nSingle .corr()Correlation MatrixCorrelation Matrix heatmap\n\n\n\npassengers_df[\"age\"].corr(passengers_df[\"fare\"])\n\nnp.float64(0.09606669176903891)\n\n\n\n\n\npassengers_df.corr(numeric_only=True)\n\n\n\n\n\n\n\n\nsurvived\nage\nsibling_spouse_count\nparents_children_count\nfare\n\n\n\n\nsurvived\n1.000000\n-0.077221\n-0.035322\n0.081629\n0.257307\n\n\nage\n-0.077221\n1.000000\n-0.308247\n-0.189119\n0.096067\n\n\nsibling_spouse_count\n-0.035322\n-0.308247\n1.000000\n0.414838\n0.159651\n\n\nparents_children_count\n0.081629\n-0.189119\n0.414838\n1.000000\n0.216225\n\n\nfare\n0.257307\n0.096067\n0.159651\n0.216225\n1.000000\n\n\n\n\n\n\n\n\n\n\n# add class codes that might be relevant\npassengers_df[\"class_codes\"] = passengers_df[\"class\"].cat.codes\ncorr_matrix = passengers_df.corr(numeric_only=True)\n\nsns.heatmap(corr_matrix,\n            annot=True,           # Show correlation values\n            cmap=\"coolwarm\",      # Color scheme (blue-white-red)\n            fmt=\".2f\")            # Format numbers to 2 decimal places\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\n\n.scatter()\n\n\n\npassengers_df.plot.scatter(x = \"age\", y = \"fare\")",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/multiple-variable-analysis.html#mixed",
    "href": "pandas/multiple-variable-analysis.html#mixed",
    "title": "Analyzing Multiple Variable",
    "section": "Mixed",
    "text": "Mixed\nWhat if we wanted to explore the categorical embark_town variable with the numeric age and fare variables?\n\npassengers_df[[\"embark_town\", \"age\", \"fare\"]]\n\n\n\n\n\n\n\n\nembark_town\nage\nfare\n\n\n\n\n0\nSouthampton\n22.0\n7.2500\n\n\n1\nCherbourg\n38.0\n71.2833\n\n\n2\nSouthampton\n26.0\n7.9250\n\n\n3\nSouthampton\n35.0\n53.1000\n\n\n4\nSouthampton\n35.0\n8.0500\n\n\n...\n...\n...\n...\n\n\n886\nSouthampton\n27.0\n13.0000\n\n\n887\nSouthampton\n19.0\n30.0000\n\n\n888\nSouthampton\nNaN\n23.4500\n\n\n889\nCherbourg\n26.0\n30.0000\n\n\n890\nQueenstown\n32.0\n7.7500\n\n\n\n\n891 rows × 3 columns\n\n\n\n\nGrouping\n\n.groupby().groupby().agg([list]).groupby().agg([dictionary])\n\n\n\npassengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].mean()\n\n\n\n\n\n\n\n\nage\nfare\n\n\nembark_town\n\n\n\n\n\n\nCherbourg\n30.814769\n59.954144\n\n\nQueenstown\n28.089286\n13.276030\n\n\nSouthampton\n29.445397\n27.079812\n\n\n\n\n\n\n\n\n\n\npassengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].agg([\"mean\", \"max\"])\n\n\n\n\n\n\n\n\nage\nfare\n\n\n\nmean\nmax\nmean\nmax\n\n\nembark_town\n\n\n\n\n\n\n\n\nCherbourg\n30.814769\n71.0\n59.954144\n512.3292\n\n\nQueenstown\n28.089286\n70.5\n13.276030\n90.0000\n\n\nSouthampton\n29.445397\n80.0\n27.079812\n263.0000\n\n\n\n\n\n\n\n\n\n\npassengers_df.groupby(\"embark_town\").agg({\n    \"passenger_id\": \"count\",\n    \"fare\": \"sum\",\n    \"age\": [\"min\", \"median\", \"max\"]\n    })\n\n\n\n\n\n\n\n\npassenger_id\nfare\nage\n\n\n\ncount\nsum\nmin\nmedian\nmax\n\n\nembark_town\n\n\n\n\n\n\n\n\n\nCherbourg\n168\n10072.2962\n0.42\n29.0\n71.0\n\n\nQueenstown\n77\n1022.2543\n2.00\n27.0\n70.5\n\n\nSouthampton\n644\n17439.3988\n0.67\n28.0\n80.0\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization\nYou can also visualize the result from a groupby() workflow. For instance,\n\nresults = passengers_df.groupby(\"embark_town\")[[\"age\", \"fare\"]].mean()\nresults\n\n\n\n\n\n\n\n\nage\nfare\n\n\nembark_town\n\n\n\n\n\n\nCherbourg\n30.814769\n59.954144\n\n\nQueenstown\n28.089286\n13.276030\n\n\nSouthampton\n29.445397\n27.079812\n\n\n\n\n\n\n\n\nAll resultsSubset of results\n\n\n\nresults.plot.bar()\n\n\n\n\n\n\n\n\n\n\n\nresults[\"age\"].plot.bar()",
    "crumbs": [
      "Pandas",
      "Analyzing Multiple Variable"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html",
    "href": "pandas/data-cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Outliers\nOutliers are extreme observations that can have an impact on summary statistics.",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html#outliers",
    "href": "pandas/data-cleaning.html#outliers",
    "title": "Data Cleaning",
    "section": "",
    "text": "Identification\nA common approach to identifying them is by examining each data point relative to a lower and upper bound.\n\nLower bound: 25th percentile - (1.5 x IQR)\nUpper bound: 75th percentile + (1.5 x IQR)\n\n\nIQR: Interquartile Range = 75th Percentile - 25th Percentile\n\nAn value below less than the lower bound or more than the upper bound can be considered an outlier.\nLet’s examine the age variable from passengers_df which had the following descriptive statistics.\n\npassengers_df[\"age\"].describe()\n\ncount    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n25%       20.125000\n50%       28.000000\n75%       38.000000\nmax       80.000000\nName: age, dtype: float64\n\n\nWe can calculate the information needed to generate a lower and upper cutoff bound.\n\np25 = passengers_df[\"age\"].quantile(0.25)\np75 = passengers_df[\"age\"].quantile(0.75)\niqr = p75 - p25\nlower_bound = p25 - 1.5 * iqr\nupper_bound = p75 + 1.5 * iqr\nprint(f\"\"\"\n25th Percentile: {p25}\\n75th Percentile: {p75}\\nIQR: {iqr}\\nLower Bound: {lower_bound}\\nUpper Bound: {upper_bound}\"\"\"\n)\n\n\n25th Percentile: 20.125\n75th Percentile: 38.0\nIQR: 17.875\nLower Bound: -6.6875\nUpper Bound: 64.8125\n\n\n\n\nAssignment\nWith this information, we can check the data series. Let’s assign True/False values to a new variable to track this\n\npassengers_df[\"age_outlier\"] = (passengers_df[\"age\"] &lt; lower_bound) | (passengers_df[\"age\"] &gt; upper_bound)\npassengers_df[\"age_outlier\"] \n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n886    False\n887    False\n888    False\n889    False\n890    False\nName: age_outlier, Length: 891, dtype: bool\n\n\nWe can now count it:\n\npassengers_df[\"age_outlier\"].value_counts()\n\nage_outlier\nFalse    880\nTrue      11\nName: count, dtype: int64\n\n\n\n\nDecision\nJust because you have outliers in a number series doesn’t mean you have to do anything about it. It depends on your goals and if you think the value is correct or now.\nYou could do nothing and leave the outliers in the data. If so, it could be helpful to:\n\nCommunicate their existence with explanation of values, if available.\nLean on more robust summary statistics (e.g., Median) when communicating findings.\n\nYou could also:\n\n\nCrosstabs\n\nRemove the rowRemove the valueReplace it\n\n\n\npassengers_df[passengers_df[\"age_outlier\"] == False]\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n2\nFalse\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n0\nFalse\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n2\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n1\nFalse\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n0\nFalse\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n2\nFalse\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n\n\n\n\n880 rows × 11 columns\n\n\n\n\n\n\nnp.where(\n    passengers_df[\"age_outlier\"], \n    np.nan, # remove the outlier and letting it be missing\n    passengers_df[\"age\"] # keep the original value\n)\n\narray([22.  , 38.  , 26.  , 35.  , 35.  ,   nan, 54.  ,  2.  , 27.  ,\n       14.  ,  4.  , 58.  , 20.  , 39.  , 14.  , 55.  ,  2.  ,   nan,\n       31.  ,   nan, 35.  , 34.  , 15.  , 28.  ,  8.  , 38.  ,   nan,\n       19.  ,   nan,   nan, 40.  ,   nan,   nan,   nan, 28.  , 42.  ,\n         nan, 21.  , 18.  , 14.  , 40.  , 27.  ,   nan,  3.  , 19.  ,\n         nan,   nan,   nan,   nan, 18.  ,  7.  , 21.  , 49.  , 29.  ,\n         nan,   nan, 21.  , 28.5 ,  5.  , 11.  , 22.  , 38.  , 45.  ,\n        4.  ,   nan,   nan, 29.  , 19.  , 17.  , 26.  , 32.  , 16.  ,\n       21.  , 26.  , 32.  , 25.  ,   nan,   nan,  0.83, 30.  , 22.  ,\n       29.  ,   nan, 28.  , 17.  , 33.  , 16.  ,   nan, 23.  , 24.  ,\n       29.  , 20.  , 46.  , 26.  , 59.  ,   nan,   nan, 23.  , 34.  ,\n       34.  , 28.  ,   nan, 21.  , 33.  , 37.  , 28.  , 21.  ,   nan,\n       38.  ,   nan, 47.  , 14.5 , 22.  , 20.  , 17.  , 21.  ,   nan,\n       29.  , 24.  ,  2.  , 21.  ,   nan, 32.5 , 32.5 , 54.  , 12.  ,\n         nan, 24.  ,   nan, 45.  , 33.  , 20.  , 47.  , 29.  , 25.  ,\n       23.  , 19.  , 37.  , 16.  , 24.  ,   nan, 22.  , 24.  , 19.  ,\n       18.  , 19.  , 27.  ,  9.  , 36.5 , 42.  , 51.  , 22.  , 55.5 ,\n       40.5 ,   nan, 51.  , 16.  , 30.  ,   nan,   nan, 44.  , 40.  ,\n       26.  , 17.  ,  1.  ,  9.  ,   nan, 45.  ,   nan, 28.  , 61.  ,\n        4.  ,  1.  , 21.  , 56.  , 18.  ,   nan, 50.  , 30.  , 36.  ,\n         nan,   nan,  9.  ,  1.  ,  4.  ,   nan,   nan, 45.  , 40.  ,\n       36.  , 32.  , 19.  , 19.  ,  3.  , 44.  , 58.  ,   nan, 42.  ,\n         nan, 24.  , 28.  ,   nan, 34.  , 45.5 , 18.  ,  2.  , 32.  ,\n       26.  , 16.  , 40.  , 24.  , 35.  , 22.  , 30.  ,   nan, 31.  ,\n       27.  , 42.  , 32.  , 30.  , 16.  , 27.  , 51.  ,   nan, 38.  ,\n       22.  , 19.  , 20.5 , 18.  ,   nan, 35.  , 29.  , 59.  ,  5.  ,\n       24.  ,   nan, 44.  ,  8.  , 19.  , 33.  ,   nan,   nan, 29.  ,\n       22.  , 30.  , 44.  , 25.  , 24.  , 37.  , 54.  ,   nan, 29.  ,\n       62.  , 30.  , 41.  , 29.  ,   nan, 30.  , 35.  , 50.  ,   nan,\n        3.  , 52.  , 40.  ,   nan, 36.  , 16.  , 25.  , 58.  , 35.  ,\n         nan, 25.  , 41.  , 37.  ,   nan, 63.  , 45.  ,   nan,  7.  ,\n       35.  ,   nan, 28.  , 16.  , 19.  ,   nan, 33.  , 30.  , 22.  ,\n       42.  , 22.  , 26.  , 19.  , 36.  , 24.  , 24.  ,   nan, 23.5 ,\n        2.  ,   nan, 50.  ,   nan,   nan, 19.  ,   nan,   nan,  0.92,\n         nan, 17.  , 30.  , 30.  , 24.  , 18.  , 26.  , 28.  , 43.  ,\n       26.  , 24.  , 54.  , 31.  , 40.  , 22.  , 27.  , 30.  , 22.  ,\n         nan, 36.  , 61.  , 36.  , 31.  , 16.  ,   nan, 45.5 , 38.  ,\n       16.  ,   nan,   nan, 29.  , 41.  , 45.  , 45.  ,  2.  , 24.  ,\n       28.  , 25.  , 36.  , 24.  , 40.  ,   nan,  3.  , 42.  , 23.  ,\n         nan, 15.  , 25.  ,   nan, 28.  , 22.  , 38.  ,   nan,   nan,\n       40.  , 29.  , 45.  , 35.  ,   nan, 30.  , 60.  ,   nan,   nan,\n       24.  , 25.  , 18.  , 19.  , 22.  ,  3.  ,   nan, 22.  , 27.  ,\n       20.  , 19.  , 42.  ,  1.  , 32.  , 35.  ,   nan, 18.  ,  1.  ,\n       36.  ,   nan, 17.  , 36.  , 21.  , 28.  , 23.  , 24.  , 22.  ,\n       31.  , 46.  , 23.  , 28.  , 39.  , 26.  , 21.  , 28.  , 20.  ,\n       34.  , 51.  ,  3.  , 21.  ,   nan,   nan,   nan, 33.  ,   nan,\n       44.  ,   nan, 34.  , 18.  , 30.  , 10.  ,   nan, 21.  , 29.  ,\n       28.  , 18.  ,   nan, 28.  , 19.  ,   nan, 32.  , 28.  ,   nan,\n       42.  , 17.  , 50.  , 14.  , 21.  , 24.  , 64.  , 31.  , 45.  ,\n       20.  , 25.  , 28.  ,   nan,  4.  , 13.  , 34.  ,  5.  , 52.  ,\n       36.  ,   nan, 30.  , 49.  ,   nan, 29.  ,   nan,   nan, 50.  ,\n         nan, 48.  , 34.  , 47.  , 48.  ,   nan, 38.  ,   nan, 56.  ,\n         nan,  0.75,   nan, 38.  , 33.  , 23.  , 22.  ,   nan, 34.  ,\n       29.  , 22.  ,  2.  ,  9.  ,   nan, 50.  , 63.  , 25.  ,   nan,\n       35.  , 58.  , 30.  ,  9.  ,   nan, 21.  , 55.  ,   nan, 21.  ,\n         nan, 54.  ,   nan, 25.  , 24.  , 17.  , 21.  ,   nan, 37.  ,\n       16.  , 18.  , 33.  ,   nan, 28.  , 26.  , 29.  ,   nan, 36.  ,\n       54.  , 24.  , 47.  , 34.  ,   nan, 36.  , 32.  , 30.  , 22.  ,\n         nan, 44.  ,   nan, 40.5 , 50.  ,   nan, 39.  , 23.  ,  2.  ,\n         nan, 17.  ,   nan, 30.  ,  7.  , 45.  , 30.  ,   nan, 22.  ,\n       36.  ,  9.  , 11.  , 32.  , 50.  , 64.  , 19.  ,   nan, 33.  ,\n        8.  , 17.  , 27.  ,   nan, 22.  , 22.  , 62.  , 48.  ,   nan,\n       39.  , 36.  ,   nan, 40.  , 28.  ,   nan,   nan, 24.  , 19.  ,\n       29.  ,   nan, 32.  , 62.  , 53.  , 36.  ,   nan, 16.  , 19.  ,\n       34.  , 39.  ,   nan, 32.  , 25.  , 39.  , 54.  , 36.  ,   nan,\n       18.  , 47.  , 60.  , 22.  ,   nan, 35.  , 52.  , 47.  ,   nan,\n       37.  , 36.  ,   nan, 49.  ,   nan, 49.  , 24.  ,   nan,   nan,\n       44.  , 35.  , 36.  , 30.  , 27.  , 22.  , 40.  , 39.  ,   nan,\n         nan,   nan, 35.  , 24.  , 34.  , 26.  ,  4.  , 26.  , 27.  ,\n       42.  , 20.  , 21.  , 21.  , 61.  , 57.  , 21.  , 26.  ,   nan,\n         nan, 51.  , 32.  ,   nan,  9.  , 28.  , 32.  , 31.  , 41.  ,\n         nan, 20.  , 24.  ,  2.  ,   nan,  0.75, 48.  , 19.  , 56.  ,\n         nan, 23.  ,   nan, 18.  , 21.  ,   nan, 18.  , 24.  ,   nan,\n       32.  , 23.  , 58.  , 50.  , 40.  , 47.  , 36.  , 20.  , 32.  ,\n       25.  ,   nan, 43.  ,   nan, 40.  , 31.  ,   nan, 31.  ,   nan,\n       18.  , 24.5 , 18.  , 43.  , 36.  ,   nan, 27.  , 20.  , 14.  ,\n       60.  , 25.  , 14.  , 19.  , 18.  , 15.  , 31.  ,  4.  ,   nan,\n       25.  , 60.  , 52.  , 44.  ,   nan, 49.  , 42.  , 18.  , 35.  ,\n       18.  , 25.  , 26.  , 39.  , 45.  , 42.  , 22.  ,   nan, 24.  ,\n         nan, 48.  , 29.  , 52.  , 19.  , 38.  , 27.  ,   nan, 33.  ,\n        6.  , 17.  , 34.  , 50.  , 27.  , 20.  , 30.  ,   nan, 25.  ,\n       25.  , 29.  , 11.  ,   nan, 23.  , 23.  , 28.5 , 48.  , 35.  ,\n         nan,   nan,   nan, 36.  , 21.  , 24.  , 31.  ,   nan, 16.  ,\n       30.  , 19.  , 31.  ,  4.  ,  6.  , 33.  , 23.  , 48.  ,  0.67,\n       28.  , 18.  , 34.  , 33.  ,   nan, 41.  , 20.  , 36.  , 16.  ,\n       51.  ,   nan, 30.5 ,   nan, 32.  , 24.  , 48.  , 57.  ,   nan,\n       54.  , 18.  ,   nan,  5.  ,   nan, 43.  , 13.  , 17.  , 29.  ,\n         nan, 25.  , 25.  , 18.  ,  8.  ,  1.  , 46.  ,   nan, 16.  ,\n         nan,   nan, 25.  , 39.  , 49.  , 31.  , 30.  , 30.  , 34.  ,\n       31.  , 11.  ,  0.42, 27.  , 31.  , 39.  , 18.  , 39.  , 33.  ,\n       26.  , 39.  , 35.  ,  6.  , 30.5 ,   nan, 23.  , 31.  , 43.  ,\n       10.  , 52.  , 27.  , 38.  , 27.  ,  2.  ,   nan,   nan,  1.  ,\n         nan, 62.  , 15.  ,  0.83,   nan, 23.  , 18.  , 39.  , 21.  ,\n         nan, 32.  ,   nan, 20.  , 16.  , 30.  , 34.5 , 17.  , 42.  ,\n         nan, 35.  , 28.  ,   nan,  4.  ,   nan,  9.  , 16.  , 44.  ,\n       18.  , 45.  , 51.  , 24.  ,   nan, 41.  , 21.  , 48.  ,   nan,\n       24.  , 42.  , 27.  , 31.  ,   nan,  4.  , 26.  , 47.  , 33.  ,\n       47.  , 28.  , 15.  , 20.  , 19.  ,   nan, 56.  , 25.  , 33.  ,\n       22.  , 28.  , 25.  , 39.  , 27.  , 19.  ,   nan, 26.  , 32.  ])\n\n\n\n\nThis is useful if you believe the data is simply wrong and you need to keep other information that is good from the observation.\nImagine if the variable was age and the value was 224. It would be an outlier, but it is not a believable outlier. Perhaps it was a typo that should have been 24. Instead of trying to guess what it should have been, you could also impute a value based upon data you have more faith in.\nFor instance, you could replace missing values with the median of the series - which is a more robust summary statistic.\nHere we use np.where that says where something is True, do something. If not, do something else.\n\npassengers_df[\"age_clean\"] = np.where(\n    passengers_df[\"age_outlier\"], \n    passengers_df[\"age\"].median(), # use the median\n    passengers_df[\"age\"] # keep the original value\n)\n\npassengers_df.query(\"age_outlier == True\")[[\"age\", \"age_clean\"]]\n\n\n\n\n\n\n\n\nage\nage_clean\n\n\n\n\n33\n66.0\n28.0\n\n\n54\n65.0\n28.0\n\n\n96\n71.0\n28.0\n\n\n116\n70.5\n28.0\n\n\n280\n65.0\n28.0\n\n\n456\n65.0\n28.0\n\n\n493\n71.0\n28.0\n\n\n630\n80.0\n28.0\n\n\n672\n70.0\n28.0\n\n\n745\n70.0\n28.0\n\n\n851\n74.0\n28.0\n\n\n\n\n\n\n\nI would not do this here since these ages do not seem like bad data, just outlier ages relative to the overall dataset.",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/data-cleaning.html#missing-data",
    "href": "pandas/data-cleaning.html#missing-data",
    "title": "Data Cleaning",
    "section": "Missing Data",
    "text": "Missing Data\nAs with outliers, missing data requires us to make a decision.\n\nIdentify\n\nisna()not.na()\n\n\nReturn True if value is missing.\n\npassengers_df[\"age\"].isna()\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n886    False\n887    False\n888     True\n889    False\n890    False\nName: age, Length: 891, dtype: bool\n\n\nCount the number of missing data values with isna().sum().\n\npassengers_df[\"age\"].isna().sum()\n\nnp.int64(177)\n\n\n\n\nReturn True if value is not missing\n\npassengers_df[\"age\"].notna()\n\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n886     True\n887     True\n888    False\n889     True\n890     True\nName: age, Length: 891, dtype: bool\n\n\nCount the number of non-missing data values with notna().sum().\n\npassengers_df[\"age\"].notna().sum()\n\nnp.int64(714)\n\n\n\n\n\n\n\nRemove\n\n.dropna().dropna(subset=)\n\n\nDrop any row that has a missing data point in any column.\n\nlen(passengers_df.dropna())\n\n712\n\n\n\n\nDrop any row that has a missing data point in one or more specific columns.\n\nlen(passengers_df.dropna(subset = \"age\"))\n\n714\n\n\n\n\n\n\n\nReplace\nReplace specific missing values with something new (e.g., the median).\n\n.fillna()\n\n\n\nmedian_age = passengers_df[\"age\"].median()\n\npassengers_df[\"filled_age\"] = passengers_df[\"age\"].fillna(median_age)\n\npassengers_df[[\"age\",\"filled_age\"]]\n\n\n\n\n\n\n\n\nage\nfilled_age\n\n\n\n\n0\n22.0\n22.0\n\n\n1\n38.0\n38.0\n\n\n2\n26.0\n26.0\n\n\n3\n35.0\n35.0\n\n\n4\n35.0\n35.0\n\n\n...\n...\n...\n\n\n886\n27.0\n27.0\n\n\n887\n19.0\n19.0\n\n\n888\nNaN\n28.0\n\n\n889\n26.0\n26.0\n\n\n890\n32.0\n32.0\n\n\n\n\n891 rows × 2 columns",
    "crumbs": [
      "Pandas",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "pandas/merging-data.html",
    "href": "pandas/merging-data.html",
    "title": "Merging Data",
    "section": "",
    "text": "Left Join\nLet’s try adding data from passengers table into meals table using a left join. A left join is the most common approach and keeps all records from the left table, adding new info from the right table if a connection can be made to a given record.\nluggage_combo_df = pd.merge(left = luggage_df, right = passengers_df, on = \"passenger_id\", how = \"left\")\nluggage_combo_df\n\n\n\n\n\n\n\n\npassenger_id\nbag_number\nbag_type\nweight_kgs\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\nage_clean\nfilled_age\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n1\nduffel_bag\n23.0\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n\n\n1\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n2\nsmall_suitcase\n11.1\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n\n\n2\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nsuitcase\n43.7\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n3\n5f616a6d-f338-4360-9d7b-3b92196dd350\n2\nhat_box\n18.8\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n4\n5f616a6d-f338-4360-9d7b-3b92196dd350\n3\nwardrobe_trunk\n45.2\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2031\n2094390f-10db-4ca3-9693-ef5795da5446\n2\nhat_box\n17.8\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2032\n2094390f-10db-4ca3-9693-ef5795da5446\n3\nwardrobe_trunk\n34.6\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2033\n2094390f-10db-4ca3-9693-ef5795da5446\n4\njewelry_case\n18.4\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2034\n2094390f-10db-4ca3-9693-ef5795da5446\n5\nsuitcase\n26.1\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n\n\n2035\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n1\ncloth_bundle\n5.0\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n32.0\n32.0\n\n\n\n\n2036 rows × 16 columns\nThis works and we could do like find average luggage weight by something new from the passenger dataset such as class.\nluggage_combo_df.groupby(\"class\")[\"weight_kgs\"].mean()\n\n/var/folders/jh/vdccym5962j7k7gdnt8z2w1h0000gn/T/ipykernel_10393/3239628133.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  luggage_combo_df.groupby(\"class\")[\"weight_kgs\"].mean()\n\n\nclass\nFirst     32.524771\nSecond    22.240000\nThird     14.594142\nName: weight_kgs, dtype: float64\nHowever, if may be more useful to take information from the new luggage_df table, calculate something new, and then add it back to pasenger_df which is a very clean table for analytics with one row per unique passenger.\nLet’s do three things\nluggage_summary_df = luggage_df.groupby(\"passenger_id\").agg(\n    luggage_count=(\"bag_number\", \"count\"),\n    luggage_mean_weight=(\"weight_kgs\", \"mean\"),\n    luggage_total_weight=(\"weight_kgs\", \"sum\")\n).reset_index()\n\nluggage_summary_df\n\n\n\n\n\n\n\n\npassenger_id\nluggage_count\nluggage_mean_weight\nluggage_total_weight\n\n\n\n\n0\n001c43f2-cc62-405f-bc6b-32fe01ac690e\n4\n35.825000\n143.3\n\n\n1\n005eeee0-731c-4140-8173-7e320708fc8b\n2\n18.000000\n36.0\n\n\n2\n0095bd9e-f724-4ea0-b36c-14c422372fa6\n1\n8.100000\n8.1\n\n\n3\n010ed1a2-8f40-41c0-9440-e4eaa68c23bf\n1\n23.200000\n23.2\n\n\n4\n015ef17d-8360-430a-97b2-81d13fcf1674\n2\n15.650000\n31.3\n\n\n...\n...\n...\n...\n...\n\n\n886\nfcf07c16-653f-49f8-b41d-848d654433fb\n2\n14.800000\n29.6\n\n\n887\nfda40ec4-cff3-447e-a12d-f2391ac2a016\n3\n23.533333\n70.6\n\n\n888\nfe237248-3145-49c3-873a-23103a548d48\n3\n33.933333\n101.8\n\n\n889\nff4c5bd2-a58f-4d1b-9ba9-98c963e6a1f1\n1\n6.400000\n6.4\n\n\n890\nffaa9cfb-d5cd-4ef0-8248-9250a2a57a39\n1\n15.400000\n15.4\n\n\n\n\n891 rows × 4 columns\npd.merge(left=passengers_df, right = luggage_summary_df, on = \"passenger_id\", how = \"left\")\n\n\n\n\n\n\n\n\npassenger_id\nsurvived\nsex\nage\nsibling_spouse_count\nparents_children_count\nfare\nclass\nembark_town\nclass_codes\nage_outlier\nage_clean\nfilled_age\nluggage_count\nluggage_mean_weight\nluggage_total_weight\n\n\n\n\n0\naf1089fa-c928-4719-94ec-4bdb0aa90e8a\n0\nmale\n22.0\n1\n0\n7.2500\nThird\nSouthampton\n2\nFalse\n22.0\n22.0\n2\n17.05\n34.1\n\n\n1\n5f616a6d-f338-4360-9d7b-3b92196dd350\n1\nfemale\n38.0\n1\n0\n71.2833\nFirst\nCherbourg\n0\nFalse\n38.0\n38.0\n3\n35.90\n107.7\n\n\n2\n34ad8431-f090-40d0-a1c9-50fe2cb39979\n1\nfemale\n26.0\n0\n0\n7.9250\nThird\nSouthampton\n2\nFalse\n26.0\n26.0\n2\n16.40\n32.8\n\n\n3\n3bcdceb3-f1dd-4ef2-a9dc-089c13f54a27\n1\nfemale\n35.0\n1\n0\n53.1000\nFirst\nSouthampton\n0\nFalse\n35.0\n35.0\n4\n34.95\n139.8\n\n\n4\n0ee5b915-66c7-42d4-ba2d-5c0703633ccc\n0\nmale\n35.0\n0\n0\n8.0500\nThird\nSouthampton\n2\nFalse\n35.0\n35.0\n1\n22.70\n22.7\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n79e179d2-8fd2-42e3-8e25-6d1124861a45\n0\nmale\n27.0\n0\n0\n13.0000\nSecond\nSouthampton\n1\nFalse\n27.0\n27.0\n2\n26.75\n53.5\n\n\n887\na53b93a9-a0fe-4e83-ac58-a74c32825abe\n1\nfemale\n19.0\n0\n0\n30.0000\nFirst\nSouthampton\n0\nFalse\n19.0\n19.0\n4\n36.00\n144.0\n\n\n888\nc89d25cf-49ac-4aaf-a614-b2cf8754bc13\n0\nfemale\nNaN\n1\n2\n23.4500\nThird\nSouthampton\n2\nFalse\nNaN\n28.0\n2\n15.45\n30.9\n\n\n889\n2094390f-10db-4ca3-9693-ef5795da5446\n1\nmale\n26.0\n0\n0\n30.0000\nFirst\nCherbourg\n0\nFalse\n26.0\n26.0\n5\n28.68\n143.4\n\n\n890\nb64de32c-dfbc-4e27-a2dc-a2af3e5597c5\n0\nmale\n32.0\n0\n0\n7.7500\nThird\nQueenstown\n2\nFalse\n32.0\n32.0\n1\n5.00\n5.0\n\n\n\n\n891 rows × 16 columns",
    "crumbs": [
      "Pandas",
      "Merging Data"
    ]
  },
  {
    "objectID": "pandas/merging-data.html#left-join",
    "href": "pandas/merging-data.html#left-join",
    "title": "Merging Data",
    "section": "",
    "text": "Make the calculations and reset the index to help with eventual merging.\n\n\n\nMerge the summaries into passengers_df",
    "crumbs": [
      "Pandas",
      "Merging Data"
    ]
  }
]